{
	"info": {
		"_postman_id": "07f3aa13-a950-48b5-9665-6549e8dd513d",
		"name": "Salesforce B2B Commerce PLC Collection",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "8399406"
	},
	"item": [
		{
			"name": "Product Search (Log In Flow)",
			"item": [
				{
					"name": "1. Clear Collection Variables",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
									"\r",
									"// Check for environment selection\r",
									"if(pm.environment.name === undefined) {\r",
									"    const msg = 'No Postman environment selected or set.';\r",
									"    pm.expect.fail(msg);\r",
									"}\r",
									"\r",
									"// Clean up the variables from the collection set throughout the various calls\r",
									"pm.collectionVariables.clear();"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(`${pm.info.requestName} Tests...`);\r",
									"\r",
									"pm.test('Make sure collection variables are clean', () => {\r",
									"    pm.expect(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value)).to.be.an('array').empty;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "postman-echo.com/get",
							"host": [
								"postman-echo",
								"com"
							],
							"path": [
								"get"
							]
						}
					},
					"response": []
				},
				{
					"name": "2. Log in as System Administrator (SOAP)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(`${pm.info.requestName} Tests...`);\r",
									"\r",
									"pm.test('Status code is 200', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Validate the access token is found in the body and save it to the variables', () => {\r",
									"    const result = xml2Json(pm.response.text())['soapenv:Envelope']['soapenv:Body'].loginResponse.result;\r",
									"    const url = result.serverUrl.split('/');\r",
									"\r",
									"    pm.expect(result.sessionId).to.exist;\r",
									"    pm.expect(result.sessionId).to.be.a.string;\r",
									"\r",
									"    pm.collectionVariables.set('_token', result.sessionId);\r",
									"    pm.collectionVariables.set('_instanceUrl', url[0] + '//' + url[2]);\r",
									"    pm.collectionVariables.set('_userId', result.userId);\r",
									"    pm.collectionVariables.set('_orgId', result.userInfo.organizationId);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
									"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
									"\r",
									"// Expected strings in environment variables\r",
									"['orgLoginUrl','apiVersion'].forEach(esiev => {\r",
									"    if(!pm.environment.has(esiev)) {\r",
									"        const msg = `Expected Postman environment variable not found: '${esiev} in environment: '${pm.environment.name}'`;\r",
									"        pm.expect.fail(msg);\r",
									"    }\r",
									"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
									"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml; charset=UTF-8",
								"type": "text"
							},
							{
								"key": "SOAPAction",
								"value": "login",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "text/xml",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\r\n<env:Envelope xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"\r\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n    xmlns:n1=\"urn:partner.soap.sforce.com\"\r\n    xmlns:env=\"http://schemas.xmlsoap.org/soap/envelope/\">\r\n    <env:Body>\r\n        <n1:login>\r\n            <n1:username><![CDATA[{{orgAdminUsername}}]]></n1:username>\r\n            <n1:password><![CDATA[{{orgAdminPassword}}]]></n1:password>\r\n        </n1:login>\r\n    </env:Body>\r\n</env:Envelope>"
						},
						"url": {
							"raw": "{{orgLoginUrl}}/services/Soap/u/{{apiVersion}}",
							"host": [
								"{{orgLoginUrl}}"
							],
							"path": [
								"services",
								"Soap",
								"u",
								"{{apiVersion}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "3. Set WebStoreId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(`${pm.info.requestName}Tests...`);\r",
									"\r",
									"pm.test('Status code is 200', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Response is valid and has a JSON body', () => {\r",
									"     pm.response.to.be.success;\r",
									"     pm.response.to.be.withBody;\r",
									"     pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test('Validate the response and saves the WebStore Id in the collection variables', () => {\r",
									"    const data = pm.response.json();\r",
									"    pm.expect(data.records).to.exist;\r",
									"    pm.expect(data.records).to.be.an('array');\r",
									"    pm.expect(data.records.length).to.eql(1);\r",
									"    const webStore = data.records[0];\r",
									"    pm.expect(webStore.Id).to.exist;\r",
									"    pm.expect(webStore.Id).to.be.an('string');\r",
									"    pm.collectionVariables.set('_webStoreId', webStore.Id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
									"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
									"\r",
									"console.log(`${pm.collectionVariables.get('_instanceUrl')} _instanceUrl from collection`);\r",
									"console.log(`${pm.environment.get('orgHostMySalesforceFormat')} orgHostMySalesforceFormat from environment`);\r",
									"\r",
									"// Expected strings in environment variables\r",
									"['orgLoginUrl','apiVersion', 'webStoreName'].forEach(esiev => {\r",
									"    if(!pm.environment.has(esiev)) {\r",
									"       const msg = `Expected Postman environment variable not found: '${esiev} in environment: '${pm.environment.name}'`;\r",
									"        pm.expect.fail(msg);\r",
									"    }\r",
									"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
									"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
									"});\r",
									"\r",
									"// Expected strings in collection variables\r",
									"['_instanceUrl'].forEach(esicv => {\r",
									"    if(pm.collectionVariables.get(esicv) === undefined) {\r",
									"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
									"        pm.expect.fail(msg);\r",
									"    }\r",
									"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
									"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{_instanceUrl}}/services/data/v{{apiVersion}}/query/?q=SELECT+Id,+Name+FROM+WebStore+WHERE+Name+=+'{{webStoreName}}'",
							"host": [
								"{{_instanceUrl}}"
							],
							"path": [
								"services",
								"data",
								"v{{apiVersion}}",
								"query",
								""
							],
							"query": [
								{
									"key": "q",
									"value": "SELECT+Id,+Name+FROM+WebStore+WHERE+Name+=+'{{webStoreName}}'"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "4. Login as Buyer (SOAP)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(`${pm.info.requestName} Tests...`);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Validate the access token is found in the body and save it to a collection variable', () => {",
									"    const result = xml2Json(pm.response.text())['soapenv:Envelope']['soapenv:Body'].loginResponse.result;",
									"    const url = result.serverUrl.split('/');",
									"",
									"    pm.expect(result.sessionId).to.exist;",
									"    pm.expect(result.sessionId).to.be.a.string;",
									"",
									"    pm.collectionVariables.set('_token', result.sessionId);",
									"    pm.collectionVariables.set('_instanceUrl', url[0] + '//' + url[2]);",
									"    pm.collectionVariables.set('_userId', result.userId);",
									"    pm.collectionVariables.set('_orgId', result.userInfo.organizationId);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
									"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
									"\r",
									"// Expected strings in environment variables\r",
									"['orgLoginUrl','apiVersion'].forEach(esiev => {\r",
									"    if(!pm.environment.has(esiev)) {\r",
									"        const msg = `Expected Postman environment variable not found: '${esiev} in environment: '${pm.environment.name}'`;\r",
									"        pm.expect.fail(msg);\r",
									"    }\r",
									"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
									"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
									"});\r",
									"\r",
									"// Expected strings in collection variables\r",
									"['_orgId', '_webStoreId'].forEach(esicv => {\r",
									"    if(pm.collectionVariables.get(esicv) === undefined) {\r",
									"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
									"        pm.expect.fail(msg);\r",
									"    }\r",
									"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
									"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml; charset=UTF-8"
							},
							{
								"key": "SOAPAction",
								"value": "login"
							},
							{
								"key": "Accept",
								"value": "text/xml"
							},
							{
								"key": "Cookie",
								"value": "BrowserId=POhd6XTZEe2v6_8M7WG26g"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap:Envelope xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\" \nxmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://\nwww.w3.org/2001/XMLSchema\">\n    <soap:Header>\n        <LoginScopeHeader xmlns=\"urn:partner.soap.sforce.com\">\n            <organizationId>{{_orgId}}</organizationId>\n        </LoginScopeHeader>\n    </soap:Header>\n    <soap:Body>\n        <login xmlns=\"urn:partner.soap.sforce.com\">\n            <username><![CDATA[{{buyerUsername}}]]></username>\n            <password><![CDATA[{{buyerPassword}}]]></password>\n        </login>\n    </soap:Body>\n</soap:Envelope>"
						},
						"url": {
							"raw": "{{orgLoginUrl}}/services/Soap/u/{{apiVersion}}",
							"host": [
								"{{orgLoginUrl}}"
							],
							"path": [
								"services",
								"Soap",
								"u",
								"{{apiVersion}}"
							]
						},
						"description": "Authenticate the shopper through the variables _buyerUsername_ and _buyerPassword_. Generated session ID is saved in _accessToken for use in the other calls in the collection."
					},
					"response": []
				},
				{
					"name": "5. Search for Products",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(`${pm.info.requestName} Tests...`);",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test('Response is valid and has a JSON body', () => {",
									"    pm.response.to.be.success;",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test('Validate the response and save the product id to a collection variable', () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.productsPage).to.exist;",
									"    pm.expect(jsonData.productsPage).to.be.an('object');",
									"    pm.expect(jsonData.productsPage.products).to.exist;",
									"    pm.expect(jsonData.productsPage.products).to.be.an('array');",
									"    pm.expect(jsonData.productsPage.products[0]).to.exist;",
									"    pm.expect(jsonData.productsPage.products[0]).to.be.an('object');",
									"    pm.expect(jsonData.productsPage.products[0]).to.exist;",
									"    pm.expect(jsonData.productsPage.products[0].id).to.be.an('string');",
									"    pm.collectionVariables.set('_productId', jsonData.productsPage.products[0].id);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
									"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
									"\r",
									"console.log(`${pm.collectionVariables.get('_instanceUrl')} _instanceUrl from collection`);\r",
									"console.log(`${pm.environment.get('orgHostMySalesforceFormat')} orgHostMySalesforceFormat from environment`);\r",
									"\r",
									"// Expected strings in environment variables\r",
									"['orgHostMySalesforceFormat','apiVersion', 'productSearchTerm'].forEach(esiev => {\r",
									"    if(!pm.environment.has(esiev)) {\r",
									"        const msg = `Expected Postman environment variable not found: '${esiev} in environment: '${pm.environment.name}'`;\r",
									"        pm.expect.fail(msg);\r",
									"    }\r",
									"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
									"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
									"});\r",
									"\r",
									"// Expected strings in collection variables\r",
									"['_webStoreId', '_token', '_orgId'].forEach(esicv => {\r",
									"    if(!pm.collectionVariables.has(esicv)) {\r",
									"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
									"        pm.expect.fail(msg);\r",
									"    }\r",
									"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
									"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableUrlEncoding": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"searchTerm\": \"{{productSearchTerm}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{_instanceUrl}}/services/data/v{{apiVersion}}/commerce/webstores/{{_webStoreId}}/search/product-search",
							"host": [
								"{{_instanceUrl}}"
							],
							"path": [
								"services",
								"data",
								"v{{apiVersion}}",
								"commerce",
								"webstores",
								"{{_webStoreId}}",
								"search",
								"product-search"
							]
						},
						"description": "Uses the variable _productSearchTerm_ to search for products in the webstore. Sets the first returned product in the variable _productId_."
					},
					"response": []
				},
				{
					"name": "6. Get Product Detail",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(`${pm.info.requestName} Tests...`);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response is valid and has a JSON body', () => {",
									"    pm.response.to.be.success;",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test('Validate the response', () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.defaultImage).to.exist;",
									"    pm.expect(jsonData.defaultImage).to.be.an('object').with.property('id').to.be.an('string');",
									"",
									"    pm.expect(jsonData.fields).to.exist;",
									"    pm.expect(jsonData.fields).to.be.an('object').with.property('Name').to.be.an('string');",
									"    pm.expect(jsonData.fields).to.be.an('object').with.property('Description').to.be.an('string');",
									"    pm.expect(jsonData.fields).to.be.an('object').with.property('LastModifiedDate').to.match(/\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}Z/);",
									"    ",
									"    pm.expect(jsonData.mediaGroups).to.exist;",
									"    pm.expect(jsonData.mediaGroups).to.be.an('array');",
									"    pm.expect(jsonData.mediaGroups[0]).to.be.an('object').with.property('id').to.be.an('string');",
									"    pm.expect(jsonData.mediaGroups[0].mediaItems[0]).to.be.an('object').with.property('url').to.be.an('string');",
									"    pm.expect(jsonData.mediaGroups[0].mediaItems[0]).to.be.an('object').with.property('mediaType').to.be.an('string');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
									"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
									"\r",
									"// Expected strings in environment variables\r",
									"['orgHostMySalesforceFormat','apiVersion'].forEach(esiev => {\r",
									"    if(!pm.environment.has(esiev)) {\r",
									"        const msg = `Expected Postman environment variable not found: '${esiev} in environment: '${pm.environment.name}'`;\r",
									"        pm.expect.fail(msg);\r",
									"    }\r",
									"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
									"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
									"});\r",
									"\r",
									"// Expected strings in collection variables\r",
									"['_webStoreId', '_productId', '_token'].forEach(esicv => {\r",
									"    if(!pm.collectionVariables.has(esicv)) {\r",
									"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
									"        pm.expect.fail(msg);\r",
									"    }\r",
									"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
									"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{_instanceUrl}}/services/data/v{{apiVersion}}/commerce/webstores/{{_webStoreId}}/products/{{_productId}}",
							"host": [
								"{{_instanceUrl}}"
							],
							"path": [
								"services",
								"data",
								"v{{apiVersion}}",
								"commerce",
								"webstores",
								"{{_webStoreId}}",
								"products",
								"{{_productId}}"
							],
							"query": [
								{
									"key": "effectiveAccountId",
									"value": "<string>",
									"disabled": true
								},
								{
									"key": "excludeAttributeSetInfo",
									"value": "<boolean>",
									"disabled": true
								},
								{
									"key": "excludeEntitlementDetails",
									"value": "<boolean>",
									"disabled": true
								},
								{
									"key": "excludeFields",
									"value": "<boolean>",
									"disabled": true
								},
								{
									"key": "excludeMedia",
									"value": "<boolean>",
									"disabled": true
								},
								{
									"key": "excludePrimaryProductCategory",
									"value": "<boolean>",
									"disabled": true
								},
								{
									"key": "excludeProductSellingModels",
									"value": "<boolean>",
									"disabled": true
								},
								{
									"key": "excludeQuantityRule",
									"value": "<boolean>",
									"disabled": true
								},
								{
									"key": "excludeVariationInfo",
									"value": "<boolean>",
									"disabled": true
								},
								{
									"key": "fields",
									"value": "[]",
									"disabled": true
								},
								{
									"key": "mediaGroups",
									"value": "[]",
									"disabled": true
								}
							]
						},
						"description": "Fetch standard field data, custom field data, and enrichment data for a single Product, identified by the variable _productId_ that was set by the search products request."
					},
					"response": []
				}
			],
			"auth": {
				"type": "noauth"
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Product Search (oAuth Flow)",
			"item": [
				{
					"name": "1. Clear Collection Variables",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
									"\r",
									"// Check for environment selection\r",
									"if(pm.environment.name === undefined) {\r",
									"    const msg = 'No Postman environment selected or set.';\r",
									"    pm.expect.fail(msg);\r",
									"}\r",
									"\r",
									"// Clean up the variables from the collection set throughout the various calls\r",
									"pm.collectionVariables.clear();"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(`${pm.info.requestName} Tests...`);\r",
									"\r",
									"pm.test('Make sure collection variables are clean', () => {\r",
									"    pm.expect(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value)).to.be.an('array').empty;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "postman-echo.com/get",
							"host": [
								"postman-echo",
								"com"
							],
							"path": [
								"get"
							]
						}
					},
					"response": []
				},
				{
					"name": "2. Log in as System Administrator (SOAP)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(`${pm.info.requestName} Tests...`);\r",
									"\r",
									"pm.test('Status code is 200', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Validate the access token is found in the body and save it to the variables', () => {\r",
									"    const result = xml2Json(pm.response.text())['soapenv:Envelope']['soapenv:Body'].loginResponse.result;\r",
									"    const url = result.serverUrl.split('/');\r",
									"\r",
									"    pm.expect(result.sessionId).to.exist;\r",
									"    pm.expect(result.sessionId).to.be.a.string;\r",
									"\r",
									"    pm.collectionVariables.set('_token', result.sessionId);\r",
									"    pm.collectionVariables.set('_instanceUrl', url[0] + '//' + url[2]);\r",
									"    pm.collectionVariables.set('_userId', result.userId);\r",
									"    pm.collectionVariables.set('_orgId', result.userInfo.organizationId);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
									"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
									"\r",
									"['orgLoginUrl','apiVersion'].forEach(esiev => {\r",
									"    if(!pm.environment.has(esiev)) {\r",
									"        const msg = `Expected Postman environment variable not found: '${esiev} in environment: '${pm.environment.name}'`;\r",
									"        pm.expect.fail(msg);\r",
									"    }\r",
									"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
									"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "text/xml; charset=UTF-8",
								"type": "text"
							},
							{
								"key": "SOAPAction",
								"value": "login",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "text/xml",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\r\n<env:Envelope xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"\r\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n    xmlns:n1=\"urn:partner.soap.sforce.com\"\r\n    xmlns:env=\"http://schemas.xmlsoap.org/soap/envelope/\">\r\n    <env:Body>\r\n        <n1:login>\r\n            <n1:username><![CDATA[{{orgAdminUsername}}]]></n1:username>\r\n            <n1:password><![CDATA[{{orgAdminPassword}}]]></n1:password>\r\n        </n1:login>\r\n    </env:Body>\r\n</env:Envelope>"
						},
						"url": {
							"raw": "{{orgLoginUrl}}/services/Soap/u/{{apiVersion}}",
							"host": [
								"{{orgLoginUrl}}"
							],
							"path": [
								"services",
								"Soap",
								"u",
								"{{apiVersion}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "3. Set WebStoreId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(`${pm.info.requestName} Tests...`);\r",
									"\r",
									"pm.test('Status code is 200', () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('Response is valid and has a JSON body', () => {\r",
									"     pm.response.to.be.success;\r",
									"     pm.response.to.be.withBody;\r",
									"     pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test('Validate the response and save the WebStore Id in the collection variables', () => {\r",
									"    const data = pm.response.json();\r",
									"    pm.expect(data.records).to.exist;\r",
									"    pm.expect(data.records).to.be.an('array');\r",
									"    pm.expect(data.records.length).to.eql(1);\r",
									"    const webStore = data.records[0];\r",
									"    pm.expect(webStore.Id).to.exist;\r",
									"    pm.expect(webStore.Id).to.be.an('string');\r",
									"    pm.collectionVariables.set('_webStoreId', webStore.Id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
									"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
									"\r",
									"['orgLoginUrl','apiVersion', 'webStoreName'].forEach(esiev => {\r",
									"    if(!pm.environment.has(esiev)) {\r",
									"        const msg = `Expected Postman environment variable not found: '${esiev} in environment: '${pm.environment.name}'`;\r",
									"        pm.expect.fail(msg);\r",
									"    }\r",
									"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
									"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
									"});\r",
									"\r",
									"['_instanceUrl'].forEach(esicv => {\r",
									"    if(pm.collectionVariables.get(esicv) === undefined) {\r",
									"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
									"        pm.expect.fail(msg);\r",
									"    }\r",
									"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
									"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{_instanceUrl}}/services/data/v{{apiVersion}}/query/?q=SELECT+Id,+Name+FROM+WebStore+WHERE+Name+=+'{{webStoreName}}'",
							"host": [
								"{{_instanceUrl}}"
							],
							"path": [
								"services",
								"data",
								"v{{apiVersion}}",
								"query",
								""
							],
							"query": [
								{
									"key": "q",
									"value": "SELECT+Id,+Name+FROM+WebStore+WHERE+Name+=+'{{webStoreName}}'"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "4. Set your oAuth 2.0 Token in Authorization tab",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
									"console.log('Checking oAuth has been set up...');\r",
									"\r",
									"const isTokenMissing = pm.request.auth === undefined\r",
									"    || pm.request.auth.oauth2 === undefined\r",
									"    || !pm.request.auth.oauth2.has('accessToken')\r",
									"    || pm.request.auth.oauth2.get('accessToken') === undefined\r",
									"    || pm.request.auth.oauth2.get('accessToken') === null\r",
									"    || pm.request.auth.oauth2.get('accessToken').length === 0;\r",
									"\r",
									"pm.test('oAuth 2.0 Token is present', () => {\r",
									"    pm.expect(isTokenMissing === false);\r",
									"    pm.expect(pm.request.auth).to.exist;\r",
									"    pm.expect(pm.request.auth).to.be.an('object');\r",
									"    pm.expect(pm.request.auth.oauth2).to.exist;\r",
									"    pm.expect(pm.request.auth.oauth2).to.be.an('object');\r",
									"    pm.expect(pm.request.auth.oauth2.has('accessToken')).to.be.true;\r",
									"    pm.expect(pm.request.auth.oauth2.get('accessToken')).to.exist;\r",
									"    pm.expect(pm.request.auth.oauth2.get('accessToken')).to.be.an('string').with.length.greaterThan(0);\r",
									"});\r",
									"\r",
									"if(isTokenMissing) {\r",
									"    const msg = 'No Soup for you! Error 1: oAuth 2.0 token not found. Steps to fix the issue:\\r\\n' + \r",
									"    '1. Click on the Request with a name like \"Set your oAuth 2.0 Token here in Authorization tab\"\\r\\n' +\r",
									"    '2. Click the \"Authorization\" tab\\r\\n' + \r",
									"    '3. Click the \"Get New Access Token\" button\\r\\n' +\r",
									"    '4. Click the \"Proceed\" button\\r\\n' + \r",
									"    '5. Click the \"Use Token\" button\\r\\n' +\r",
									"    '6. Retry your request';\r",
									"    console.log(msg);\r",
									"    pm.expect.fail('No Soup for you! Error 1: oAuth 2.0 token not found. See steps above for a fix.');\r",
									"}\r",
									"else\r",
									"{\r",
									"    const tokenAgeInMnutes = Math.floor(Math.floor((new Date().getTime() - pm.request.auth.oauth2.get('timestamp')) / 1000) / 60);\r",
									"    console.warn(`Token age: ${tokenAgeInMnutes} minutes`);\r",
									"    pm.collectionVariables.set('_token', pm.request.auth.oauth2.get('accessToken'));\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(`${pm.info.requestName} Tests...`);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "client_authentication",
									"value": "body",
									"type": "string"
								},
								{
									"key": "password",
									"value": "{{orgAdminPassword}}{{orgAdminSecurityToken}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{orgAdminUsername}}",
									"type": "string"
								},
								{
									"key": "clientSecret",
									"value": "{{connectedAppConsumerSecret}}",
									"type": "string"
								},
								{
									"key": "clientId",
									"value": "{{connectedAppConsumerKey}}",
									"type": "string"
								},
								{
									"key": "accessTokenUrl",
									"value": "{{orgLoginUrl}}/services/oauth2/token",
									"type": "string"
								},
								{
									"key": "grant_type",
									"value": "password_credentials",
									"type": "string"
								},
								{
									"key": "tokenName",
									"value": "SF Token",
									"type": "string"
								},
								{
									"key": "addTokenTo",
									"value": "header",
									"type": "string"
								},
								{
									"key": "useBrowser",
									"value": true,
									"type": "boolean"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "postman-echo.com/get",
							"host": [
								"postman-echo",
								"com"
							],
							"path": [
								"get"
							]
						}
					},
					"response": []
				},
				{
					"name": "5. Search for Products",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(`${pm.info.requestName} Tests...`);",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test('Response is valid and has a JSON body', () => {",
									"    pm.response.to.be.success;",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"const validateSession = (jsonData) => {",
									"    if(jsonData[0] !== undefined && jsonData[0].message !== undefined && jsonData[0].errorCode !== undefined &&",
									"        (jsonData[0].message.toUpperCase() === 'SESSION EXPIRED OR INVALID' || jsonData[0].errorCode.toUpperCase() === 'INVALID_SESSION_ID')) {",
									"        const msg = 'No Soup for you! Error 2: oAuth 2.0 token found but likely expired. Steps to fix the issue:\\r\\n' + ",
									"        '1. Click on the Request with a name like \"Set your oAuth 2.0 Token here in Authorization tab\"\\r\\n' +",
									"        '2. Click the \"Authorization\" tab\\r\\n' + ",
									"        '3. Click the \"Get New Access Token\" button\\r\\n' +",
									"        '4. Click the \"Proceed\" button\\r\\n' + ",
									"        '5. Click the \"Use Token\" button\\r\\n' +",
									"        '6. Optional - Use the delete button\\'s dropdown option to remove expired tokens\\r\\n' +",
									"        '7. Retry your request';",
									"        console.warn(msg);",
									"        console.error('No Soup for you! Error 2: oAuth 2.0 token found but likely expired. See steps above for a fix.');",
									"        pm.expect.fail('No Soup for you! Error 2: oAuth 2.0 token found but likely expired. See steps above for a fix.');",
									"    }",
									"};",
									"",
									"const jsonData = pm.response.json();",
									"",
									"pm.test('Session is valid', () => {",
									"    validateSession(jsonData);",
									"});",
									"",
									"pm.test('Validate the response and save the product id to a collection variable', () => {",
									"    pm.expect(jsonData.productsPage).to.exist;",
									"    pm.expect(jsonData.productsPage).to.be.an('object');",
									"    pm.expect(jsonData.productsPage.products).to.exist;",
									"    pm.expect(jsonData.productsPage.products).to.be.an('array');",
									"    pm.expect(jsonData.productsPage.products[0]).to.exist;",
									"    pm.expect(jsonData.productsPage.products[0]).to.be.an('object');",
									"    pm.expect(jsonData.productsPage.products[0]).to.exist;",
									"    pm.expect(jsonData.productsPage.products[0].id).to.be.an('string');",
									"    pm.collectionVariables.set('_productId', jsonData.productsPage.products[0].id);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
									"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
									"\r",
									"const expectedStringsInEnvironmentVariables = ['orgHostMySalesforceFormat','apiVersion', 'productSearchTerm'];\r",
									"expectedStringsInEnvironmentVariables.forEach(esiev => {\r",
									"    if(!pm.environment.has(esiev)) {\r",
									"        const msg = `Expected Postman environment variable not found: '${esiev} in environment: '${pm.environment.name}'`;\r",
									"        pm.expect.fail(msg);\r",
									"    }\r",
									"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
									"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
									"});\r",
									"\r",
									"const expectedStringsInCollectionVariables = ['_webStoreId', '_token', '_orgId'];\r",
									"expectedStringsInCollectionVariables.forEach(esicv => {\r",
									"    if(pm.collectionVariables.get(esicv) === undefined) {\r",
									"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
									"        pm.expect.fail(msg);\r",
									"    }\r",
									"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
									"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableUrlEncoding": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"searchTerm\": \"{{productSearchTerm}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{orgHostMySalesforceFormat}}/services/data/v{{apiVersion}}/commerce/webstores/{{_webStoreId}}/search/product-search",
							"host": [
								"{{orgHostMySalesforceFormat}}"
							],
							"path": [
								"services",
								"data",
								"v{{apiVersion}}",
								"commerce",
								"webstores",
								"{{_webStoreId}}",
								"search",
								"product-search"
							]
						},
						"description": "Uses the variable _productSearchTerm_ to search for products in the webstore. Sets the first returned product in the variable _productId_."
					},
					"response": []
				},
				{
					"name": "6. Get Product Detail",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(`${pm.info.requestName} Tests...`);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response is valid and has a JSON body', () => {",
									"    pm.response.to.be.success;",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"const validateSession = (jsonData) => {",
									"    if(jsonData[0] !== undefined && jsonData[0].message !== undefined && jsonData[0].errorCode !== undefined &&",
									"        (jsonData[0].message.toUpperCase() === 'SESSION EXPIRED OR INVALID' || jsonData[0].errorCode.toUpperCase() === 'INVALID_SESSION_ID')) {",
									"        const msg = 'No Soup for you! Error 2: oAuth 2.0 token found but likely expired. Steps to fix the issue:\\r\\n' + ",
									"        '1. Click on the Request with a name like \"Set your oAuth 2.0 Token here in Authorization tab\"\\r\\n' +",
									"        '2. Click the \"Authorization\" tab\\r\\n' + ",
									"        '3. Click the \"Get New Access Token\" button\\r\\n' +",
									"        '4. Click the \"Proceed\" button\\r\\n' + ",
									"        '5. Click the \"Use Token\" button\\r\\n' +",
									"        '6. Optional - Use the delete button\\'s dropdown option to remove expired tokens\\r\\n' +",
									"        '7. Retry your request';",
									"        console.warn(msg);",
									"        console.error('No Soup for you! Error 2: oAuth 2.0 token found but likely expired. See steps above for a fix.');",
									"        pm.expect.fail('No Soup for you! Error 2: oAuth 2.0 token found but likely expired. See steps above for a fix.');",
									"    }",
									"};",
									"",
									"const jsonData = pm.response.json();",
									"",
									"pm.test('Session is valid', () => {",
									"    validateSession(jsonData);",
									"});",
									"",
									"pm.test('Validate the response', () => {",
									"    pm.expect(jsonData.defaultImage).to.exist;",
									"    pm.expect(jsonData.defaultImage).to.be.an('object').with.property('id').to.be.an('string');",
									"",
									"    pm.expect(jsonData.fields).to.exist;",
									"    pm.expect(jsonData.fields).to.be.an('object').with.property('Name').to.be.an('string');",
									"    pm.expect(jsonData.fields).to.be.an('object').with.property('Description').to.be.an('string');",
									"    pm.expect(jsonData.fields).to.be.an('object').with.property('LastModifiedDate').to.match(/\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}Z/);",
									"    ",
									"    pm.expect(jsonData.mediaGroups).to.exist;",
									"    pm.expect(jsonData.mediaGroups).to.be.an('array');",
									"    pm.expect(jsonData.mediaGroups[0]).to.be.an('object').with.property('id').to.be.an('string');",
									"    pm.expect(jsonData.mediaGroups[0].mediaItems[0]).to.be.an('object').with.property('url').to.be.an('string');",
									"    pm.expect(jsonData.mediaGroups[0].mediaItems[0]).to.be.an('object').with.property('mediaType').to.be.an('string');",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
									"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
									"\r",
									"['orgHostMySalesforceFormat','apiVersion'].forEach(esiev => {\r",
									"    if(!pm.environment.has(esiev)) {\r",
									"        const msg = `Expected Postman environment variable not found: '${esiev} in environment: '${pm.environment.name}'`;\r",
									"        pm.expect.fail(msg);\r",
									"    }\r",
									"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
									"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
									"});\r",
									"\r",
									"['_webStoreId', '_productId', '_token'].forEach(esicv => {\r",
									"    if(!pm.collectionVariables.has(esicv)) {\r",
									"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
									"        pm.expect.fail(msg);\r",
									"    }\r",
									"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
									"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{orgHostMySalesforceFormat}}/services/data/v{{apiVersion}}/commerce/webstores/{{_webStoreId}}/products/{{_productId}}",
							"host": [
								"{{orgHostMySalesforceFormat}}"
							],
							"path": [
								"services",
								"data",
								"v{{apiVersion}}",
								"commerce",
								"webstores",
								"{{_webStoreId}}",
								"products",
								"{{_productId}}"
							],
							"query": [
								{
									"key": "effectiveAccountId",
									"value": "<string>",
									"disabled": true
								},
								{
									"key": "excludeAttributeSetInfo",
									"value": "<boolean>",
									"disabled": true
								},
								{
									"key": "excludeEntitlementDetails",
									"value": "<boolean>",
									"disabled": true
								},
								{
									"key": "excludeFields",
									"value": "<boolean>",
									"disabled": true
								},
								{
									"key": "excludeMedia",
									"value": "<boolean>",
									"disabled": true
								},
								{
									"key": "excludePrimaryProductCategory",
									"value": "<boolean>",
									"disabled": true
								},
								{
									"key": "excludeProductSellingModels",
									"value": "<boolean>",
									"disabled": true
								},
								{
									"key": "excludeQuantityRule",
									"value": "<boolean>",
									"disabled": true
								},
								{
									"key": "excludeVariationInfo",
									"value": "<boolean>",
									"disabled": true
								},
								{
									"key": "fields",
									"value": "[]",
									"disabled": true
								},
								{
									"key": "mediaGroups",
									"value": "[]",
									"disabled": true
								}
							]
						},
						"description": "Fetch standard field data, custom field data, and enrichment data for a single Product, identified by the variable _productId_ that was set by the search products request."
					},
					"response": []
				}
			],
			"auth": {
				"type": "noauth"
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Cart",
			"item": [
				{
					"name": "Authenticated",
					"item": [
						{
							"name": "1. Clear Collection Variables",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
											"\r",
											"// Check for environment selection\r",
											"if(pm.environment.name === undefined) {\r",
											"    const msg = 'No Postman environment selected or set.';\r",
											"    pm.expect.fail(msg);\r",
											"}\r",
											"\r",
											"// Clean up the variables from the collection set throughout the various calls\r",
											"pm.collectionVariables.clear();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Tests...`);\r",
											"\r",
											"pm.test('Make sure collection variables are clean', () => {\r",
											"    pm.expect(JSON.parse(JSON.stringify(pm.collectionVariables.values)).map((v) => v.key + ': ' + v.value)).to.be.an('array').empty;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "postman-echo.com/get",
									"host": [
										"postman-echo",
										"com"
									],
									"path": [
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "2. Log in as System Administrator (SOAP)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Tests...`);\r",
											"\r",
											"pm.test('Status code is 200', () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Validate the access token is found in the body and save it to the variables', () => {\r",
											"    const result = xml2Json(pm.response.text())['soapenv:Envelope']['soapenv:Body'].loginResponse.result;\r",
											"    const url = result.serverUrl.split('/');\r",
											"\r",
											"    pm.expect(result.sessionId).to.exist;\r",
											"    pm.expect(result.sessionId).to.be.a.string;\r",
											"\r",
											"    pm.collectionVariables.set('_token', result.sessionId);\r",
											"    pm.collectionVariables.set('_instanceUrl', url[0] + '//' + url[2]);\r",
											"    pm.collectionVariables.set('_userId', result.userId);\r",
											"    pm.collectionVariables.set('_orgId', result.userInfo.organizationId);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											"\r",
											"// Expected strings in environment variables\r",
											"['orgLoginUrl','apiVersion'].forEach(esiev => {\r",
											"   if(!pm.environment.has(esiev)) {\r",
											"        const msg = 'Expected Postman environment variable not found: ' + esiev;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "text/xml; charset=UTF-8",
										"type": "text"
									},
									{
										"key": "SOAPAction",
										"value": "login",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "text/xml",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\r\n<env:Envelope xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"\r\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n    xmlns:n1=\"urn:partner.soap.sforce.com\"\r\n    xmlns:env=\"http://schemas.xmlsoap.org/soap/envelope/\">\r\n    <env:Body>\r\n        <n1:login>\r\n            <n1:username><![CDATA[{{orgAdminUsername}}]]></n1:username>\r\n            <n1:password><![CDATA[{{orgAdminPassword}}]]></n1:password>\r\n        </n1:login>\r\n    </env:Body>\r\n</env:Envelope>"
								},
								"url": {
									"raw": "{{orgLoginUrl}}/services/Soap/u/{{apiVersion}}",
									"host": [
										"{{orgLoginUrl}}"
									],
									"path": [
										"services",
										"Soap",
										"u",
										"{{apiVersion}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "3. Set WebStoreId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Tests...`);\r",
											"\r",
											"pm.test('Status code is 200', () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Response is valid and has a JSON body', () => {\r",
											"     pm.response.to.be.success;\r",
											"     pm.response.to.be.withBody;\r",
											"     pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test('Validate the response and saves the WebStore Id in the collection variables', () => {\r",
											"    const data = pm.response.json();\r",
											"    pm.expect(data.records).to.exist;\r",
											"    pm.expect(data.records).to.be.an('array');\r",
											"    pm.expect(data.records.length).to.eql(1);\r",
											"    const webStore = data.records[0];\r",
											"    pm.expect(webStore.Id).to.exist;\r",
											"    pm.expect(webStore.Id).to.be.an('string');\r",
											"    pm.collectionVariables.set('_webStoreId', webStore.Id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											"\r",
											"// Expected strings in environment variables\r",
											"['orgLoginUrl','apiVersion', 'webStoreName'].forEach(esiev => {\r",
											"    if(!pm.environment.has(esiev)) {\r",
											"        const msg = 'Expected Postman environment variable not found: ' + esiev;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
											"});\r",
											"\r",
											"// Expected strings in collection variables\r",
											"['_instanceUrl'].forEach(esicv => {\r",
											"    if(!pm.collectionVariables.has(esicv)) {\r",
											"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{_instanceUrl}}/services/data/v{{apiVersion}}/query/?q=SELECT+Id,+Name+FROM+WebStore+WHERE+Name+=+'{{webStoreName}}'",
									"host": [
										"{{_instanceUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"query",
										""
									],
									"query": [
										{
											"key": "q",
											"value": "SELECT+Id,+Name+FROM+WebStore+WHERE+Name+=+'{{webStoreName}}'"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "4. Set Account Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Tests...`);\r",
											"\r",
											"pm.test('Status code is 200', () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Response is valid and has a JSON body', () => {\r",
											"     pm.response.to.be.success;\r",
											"     pm.response.to.be.withBody;\r",
											"     pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test('Validate the response and saves the WebStore Id in the collection variables', () => {\r",
											"    const data = pm.response.json();\r",
											"    pm.expect(data.records).to.exist;\r",
											"    pm.expect(data.records).to.be.an('array');\r",
											"    pm.expect(data.records.length).to.eql(1);\r",
											"    const account = data.records[0];\r",
											"    pm.expect(account.Id).to.exist;\r",
											"    pm.expect(account.Id).to.be.an('string');\r",
											"    pm.collectionVariables.set('_effectiveAccountId', account.Id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											"\r",
											"// Expected strings in environment variables\r",
											"['orgLoginUrl','apiVersion', 'webStoreName', 'buyerAccountName'].forEach(esiev => {\r",
											"    if(!pm.environment.has(esiev)) {\r",
											"        const msg = 'Expected Postman environment variable not found: ' + esiev;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
											"});\r",
											"\r",
											"// Expected strings in collection variables\r",
											"['_instanceUrl'].forEach(esicv => {\r",
											"    if(!pm.collectionVariables.has(esicv)) {\r",
											"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{_instanceUrl}}/services/data/v{{apiVersion}}/query/?q=SELECT+Id,+Name+FROM+Account+WHERE+Name+=+'{{buyerAccountName}}'",
									"host": [
										"{{_instanceUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"query",
										""
									],
									"query": [
										{
											"key": "q",
											"value": "SELECT+Id,+Name+FROM+Account+WHERE+Name+=+'{{buyerAccountName}}'"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "5. Set Product Ids",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Tests...`);\r",
											"\r",
											"pm.test('Status code is 200', () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Response is valid and has a JSON body', () => {\r",
											"     pm.response.to.be.success;\r",
											"     pm.response.to.be.withBody;\r",
											"     pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test('Validate the response and save the Product Ids in the collection variables', () => {\r",
											"    const data = pm.response.json();\r",
											"    pm.expect(data.records).to.exist;\r",
											"    pm.expect(data.records).to.be.an('array');\r",
											"    pm.expect(data.records.length).greaterThan(1);\r",
											"    \r",
											"    const productIds = [];\r",
											"    data.records.forEach(p => {\r",
											"        productIds.push(p.Id);\r",
											"    });\r",
											"    \r",
											"    console.log('# of Product Ids: ' + productIds.length + ' Details:\\r\\n' + productIds.join(',\\r\\n'));\r",
											"    pm.collectionVariables.set('_productIds', JSON.stringify(productIds));\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											"\r",
											"// Expected strings in environment variables\r",
											"['orgLoginUrl','apiVersion', 'webStoreName', 'buyerAccountName', 'productNamesCommaDelimited'].forEach(esiev => {\r",
											"    if(!pm.environment.has(esiev)) {\r",
											"        const msg = 'Expected Postman environment variable not found: ' + esiev;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
											"});\r",
											"\r",
											"// Expected strings in collection variables\r",
											"['_instanceUrl'].forEach(esicv => {\r",
											"    if(!pm.collectionVariables.has(esicv)) {\r",
											"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
											"});\r",
											"\r",
											"console.log('Parsing and assigning productNames...');\r",
											"const productNamesCommaDelimited = pm.environment.get('productNamesCommaDelimited');\r",
											"const productNamesArray = productNamesCommaDelimited.split(',');\r",
											"console.log('# of Product Names: ' + productNamesArray.length + ' Details:\\r\\n' + productNamesArray.join(',\\r\\n'));\r",
											"pm.collectionVariables.set('_productNames', '\\'' + productNamesArray.join('\\',\\'') + '\\'');"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{_instanceUrl}}/services/data/v{{apiVersion}}/query/?q=SELECT+Id,+Name+FROM+Product2+WHERE+Name+in(+{{_productNames}})",
									"host": [
										"{{_instanceUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"query",
										""
									],
									"query": [
										{
											"key": "q",
											"value": "SELECT+Id,+Name+FROM+Product2+WHERE+Name+in(+{{_productNames}})"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "6. Login as Buyer (SOAP)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Tests...`);",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//const responseJson = xml2Json(responseBody);",
											"//buyerSessionId=responseJson['soapenv:Envelope']['soapenv:Body']['loginResponse']['result']['sessionId']",
											"//const context = pm.environment.name ? pm.environment : pm.collectionVariables;",
											"//pm.collectionVariables.set('_token', buyerSessionId);",
											"",
											"pm.test('Validate the access token is found in the body and save it to a collection variable', () => {",
											"    ",
											"    //const responseJson = xml2Json(responseBody);",
											"    //buyerSessionId=responseJson['soapenv:Envelope']['soapenv:Body']['loginResponse']['result']['sessionId']",
											"    //const context = pm.environment.name ? pm.environment : pm.collectionVariables;",
											"    //context.set('_accessToken', buyerSessionId);",
											"    ",
											"    ",
											"    //const result = xml2Json(pm.response.text())['soapenv:Envelope']['soapenv:Body'].loginResponse.result;",
											"    const result = xml2Json(pm.response.text())['soapenv:Envelope']['soapenv:Body'].loginResponse.result;",
											"    const url = result.serverUrl.split('/');",
											"",
											"    pm.expect(result.sessionId).to.exist;",
											"    pm.expect(result.sessionId).to.be.a.string;",
											"",
											"    pm.collectionVariables.set('_token', result.sessionId);",
											"    pm.collectionVariables.set('_instanceUrl', url[0] + '//' + url[2]);",
											"    pm.collectionVariables.set('_userId', result.userId);",
											"    pm.collectionVariables.set('_orgId', result.userInfo.organizationId);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											"\r",
											"// Expected strings in environment variables\r",
											"['orgLoginUrl','apiVersion'].forEach(esiev => {\r",
											"    if(!pm.environment.has(esiev)) {\r",
											"        const msg = 'Expected Postman environment variable not found: ' + esiev;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
											"});\r",
											"\r",
											"// Expected strings in collection variables\r",
											"['_orgId', '_webStoreId'].forEach(esicv => {\r",
											"    if(!pm.collectionVariables.has(esicv)) {\r",
											"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "text/xml; charset=UTF-8"
									},
									{
										"key": "SOAPAction",
										"value": "login"
									},
									{
										"key": "Accept",
										"value": "text/xml"
									},
									{
										"key": "Cookie",
										"value": "BrowserId=POhd6XTZEe2v6_8M7WG26g"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap:Envelope xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\" \nxmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://\nwww.w3.org/2001/XMLSchema\">\n    <soap:Header>\n        <LoginScopeHeader xmlns=\"urn:partner.soap.sforce.com\">\n            <organizationId>{{_orgId}}</organizationId>\n        </LoginScopeHeader>\n    </soap:Header>\n    <soap:Body>\n        <login xmlns=\"urn:partner.soap.sforce.com\">\n            <username><![CDATA[{{buyerUsername}}]]></username>\n            <password><![CDATA[{{buyerPassword}}]]></password>\n        </login>\n    </soap:Body>\n</soap:Envelope>"
								},
								"url": {
									"raw": "{{orgLoginUrl}}/services/Soap/u/{{apiVersion}}",
									"host": [
										"{{orgLoginUrl}}"
									],
									"path": [
										"services",
										"Soap",
										"u",
										"{{apiVersion}}"
									]
								},
								"description": "Authenticate the shopper through the variables _buyerUsername_ and _buyerPassword_. Generated session ID is saved in _accessToken for use in the other calls in the collection."
							},
							"response": []
						},
						{
							"name": "7. Search for Products",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Tests...`);",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test('Response is valid and has a JSON body', () => {",
											"    pm.response.to.be.success;",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test('Validate the response and save the product id to a collection variable', () => {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.productsPage).to.exist;",
											"    pm.expect(jsonData.productsPage).to.be.an('object');",
											"    pm.expect(jsonData.productsPage.products).to.exist;",
											"    pm.expect(jsonData.productsPage.products).to.be.an('array');",
											"    pm.expect(jsonData.productsPage.products[0]).to.exist;",
											"    pm.expect(jsonData.productsPage.products[0]).to.be.an('object');",
											"    pm.expect(jsonData.productsPage.products[0]).to.exist;",
											"    pm.expect(jsonData.productsPage.products[0].id).to.be.an('string');",
											"    pm.collectionVariables.set('_productId', jsonData.productsPage.products[0].id);",
											"});",
											"",
											"// Remove the productId from the collection looked up as Administrator in \"Set Product Ids\" to avoid adding more of the same in \"Add multiple Products to Cart\"",
											"const productIdFromSearch = pm.collectionVariables.get('_productId');",
											"const productIds = pm.collectionVariables.get('_productIds');",
											"const index = productIds.indexOf(productIdFromSearch);",
											"if (index > -1) { // only splice when element found",
											"  productIds.splice(index, 1); // remove only one item",
											"}",
											"pm.collectionVariables.set('_productIds', productIds);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											"\r",
											"// Expected strings in environment variables\r",
											"['orgHostMySalesforceFormat','apiVersion', 'productSearchTerm'].forEach(esiev => {\r",
											"    if(!pm.environment.has(esiev)) {\r",
											"        const msg = 'Expected Postman environment variable not found: ' + esiev;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
											"});\r",
											"\r",
											"// Expected strings in collection  variables\r",
											"['_webStoreId', '_token', '_orgId'].forEach(esicv => {\r",
											"    if(!pm.collectionVariables.has(esicv)) {\r",
											"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableUrlEncoding": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"searchTerm\": \"{{productSearchTerm}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{_instanceUrl}}/services/data/v{{apiVersion}}/commerce/webstores/{{_webStoreId}}/search/product-search",
									"host": [
										"{{_instanceUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"commerce",
										"webstores",
										"{{_webStoreId}}",
										"search",
										"product-search"
									]
								},
								"description": "Uses the variable _productSearchTerm_ to search for products in the webstore. Sets the first returned product in the variable _productId_."
							},
							"response": []
						},
						{
							"name": "8. Get Product Detail",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Tests...`);",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Response is valid and has a JSON body', () => {",
											"    pm.response.to.be.success;",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test('Validate the response', () => {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.defaultImage).to.exist;",
											"    pm.expect(jsonData.defaultImage).to.be.an('object').with.property('id').to.be.an('string');",
											"",
											"    pm.expect(jsonData.fields).to.exist;",
											"    pm.expect(jsonData.fields).to.be.an('object').with.property('Name').to.be.an('string');",
											"    pm.expect(jsonData.fields).to.be.an('object').with.property('Description').to.be.an('string');",
											"    pm.expect(jsonData.fields).to.be.an('object').with.property('LastModifiedDate').to.match(/\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}Z/);",
											"    ",
											"    pm.expect(jsonData.mediaGroups).to.exist;",
											"    pm.expect(jsonData.mediaGroups).to.be.an('array');",
											"    pm.expect(jsonData.mediaGroups[0]).to.be.an('object').with.property('id').to.be.an('string');",
											"    pm.expect(jsonData.mediaGroups[0].mediaItems[0]).to.be.an('object').with.property('url').to.be.an('string');",
											"    pm.expect(jsonData.mediaGroups[0].mediaItems[0]).to.be.an('object').with.property('mediaType').to.be.an('string');",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											"\r",
											"// Expected strings in environment variables\r",
											"['orgHostMySalesforceFormat','apiVersion'].forEach(esiev => {\r",
											"    if(!pm.environment.has(esiev)) {\r",
											"        const msg = 'Expected Postman environment variable not found: ' + esiev;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
											"});\r",
											"\r",
											"// Expected strings in collection variables\r",
											"['_webStoreId', '_productId', '_token'].forEach(esicv => {\r",
											"    if(!pm.collectionVariables.has(esicv)) {\r",
											"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{_instanceUrl}}/services/data/v{{apiVersion}}/commerce/webstores/{{_webStoreId}}/products/{{_productId}}",
									"host": [
										"{{_instanceUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"commerce",
										"webstores",
										"{{_webStoreId}}",
										"products",
										"{{_productId}}"
									],
									"query": [
										{
											"key": "effectiveAccountId",
											"value": "<string>",
											"disabled": true
										},
										{
											"key": "excludeAttributeSetInfo",
											"value": "<boolean>",
											"disabled": true
										},
										{
											"key": "excludeEntitlementDetails",
											"value": "<boolean>",
											"disabled": true
										},
										{
											"key": "excludeFields",
											"value": "<boolean>",
											"disabled": true
										},
										{
											"key": "excludeMedia",
											"value": "<boolean>",
											"disabled": true
										},
										{
											"key": "excludePrimaryProductCategory",
											"value": "<boolean>",
											"disabled": true
										},
										{
											"key": "excludeProductSellingModels",
											"value": "<boolean>",
											"disabled": true
										},
										{
											"key": "excludeQuantityRule",
											"value": "<boolean>",
											"disabled": true
										},
										{
											"key": "excludeVariationInfo",
											"value": "<boolean>",
											"disabled": true
										},
										{
											"key": "fields",
											"value": "[]",
											"disabled": true
										},
										{
											"key": "mediaGroups",
											"value": "[]",
											"disabled": true
										}
									]
								},
								"description": "Fetch standard field data, custom field data, and enrichment data for a single Product, identified by the variable _productId_ that was set by the search products request."
							},
							"response": []
						},
						{
							"name": "9. Get Active Cart",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											"\r",
											"pm.collectionVariables.set('_cartStateOrId', 'active');\r",
											"\r",
											"// Expected strings in environment variables\r",
											"['orgHostMySalesforceFormat','apiVersion'].forEach(esiev => {\r",
											"    if(!pm.environment.has(esiev)) {\r",
											"        const msg = 'Expected Postman environment variable not found: ' + esiev;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
											"});\r",
											"\r",
											"// Expected strings in collection variables\r",
											"['_webStoreId', '_productId', '_token', '_cartStateOrId'].forEach(esicv => {\r",
											"    if(!pm.collectionVariables.has(esicv)) {\r",
											"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Tests...`);\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Response is valid and has a JSON body', () => {\r",
											"    pm.response.to.be.success;\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test('Validate the response contains a cart Id and set the collection variables', () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.cartId).to.exist;\r",
											"    pm.expect(jsonData.cartId).to.be.an('string');\r",
											"    pm.collectionVariables.set('_cartStateOrId', jsonData.cartId);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{_instanceUrl}}/services/data/v{{apiVersion}}/commerce/webstores/{{_webStoreId}}/carts/active?effectiveAccountId={{_effectiveAccountId}}",
									"host": [
										"{{_instanceUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"commerce",
										"webstores",
										"{{_webStoreId}}",
										"carts",
										"active"
									],
									"query": [
										{
											"key": "effectiveAccountId",
											"value": "{{_effectiveAccountId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "10. Delete Active Cart (demonstration purposes)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											"\r",
											"// Expected strings in environment variables\r",
											"['apiVersion'].forEach(esiev => {\r",
											"    if(!pm.environment.has(esiev)) {\r",
											"        const msg = 'Expected Postman environment variable not found: ' + esiev;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
											"});\r",
											"\r",
											"// Expected strings in collection variables\r",
											"['_webStoreId', '_productId', '_token', '_cartStateOrId', '_instanceUrl', '_effectiveAccountId'].forEach(esicv => {\r",
											"    if(!pm.collectionVariables.has(esicv)) {\r",
											"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Tests...`);\r",
											"\r",
											"pm.test('Status code is 204 or 404', () => {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([204, 404]);\r",
											"});\r",
											"\r",
											"pm.collectionVariables.set('_cartStateOrId', undefined);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{_instanceUrl}}/services/data/v{{apiVersion}}/commerce/webstores/{{_webStoreId}}/carts/active?effectiveAccountId={{_effectiveAccountId}}",
									"host": [
										"{{_instanceUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"commerce",
										"webstores",
										"{{_webStoreId}}",
										"carts",
										"active"
									],
									"query": [
										{
											"key": "effectiveAccountId",
											"value": "{{_effectiveAccountId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "11. Create Cart (demonstration purposes)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											"\r",
											"// Expected strings in environment variables\r",
											"['orgHostMySalesforceFormat','apiVersion'].forEach(esiev => {\r",
											"    if(!pm.environment.has(esiev)) {\r",
											"        const msg = 'Expected Postman environment variable not found: ' + esiev;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
											"});\r",
											"\r",
											"// Expected strings in collection variables\r",
											"['_webStoreId', '_productId', '_token', '_instanceUrl'].forEach(esicv => {\r",
											"    if(!pm.collectionVariables.has(esicv)) {\r",
											"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Tests...`);\r",
											"\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test('Response is valid and has a JSON body', () => {\r",
											"    pm.response.to.be.success;\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test('Validate the response contains a cart Id and set the collection variables', () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const cartId = jsonData.cartId;\r",
											"    console.log('CART ID: ' + cartId);\r",
											"    pm.expect(jsonData.cartId).to.exist;\r",
											"    pm.expect(jsonData.cartId).to.be.an('string');\r",
											"    pm.collectionVariables.set('_cartStateOrId', jsonData.cartId);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"name\":\"Postman Cart\",\r\n   \"type\":\"Cart\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{_instanceUrl}}/services/data/v{{apiVersion}}/commerce/webstores/{{_webStoreId}}/carts",
									"host": [
										"{{_instanceUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"commerce",
										"webstores",
										"{{_webStoreId}}",
										"carts"
									]
								}
							},
							"response": []
						},
						{
							"name": "12. Delete Cart By Id (demonstration purposes)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											"\r",
											"// Expected strings in environment variables\r",
											"['apiVersion'].forEach(esiev => {\r",
											"    if(!pm.environment.has(esiev)) {\r",
											"        const msg = 'Expected Postman environment variable not found: ' + esiev;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
											"});\r",
											"\r",
											"// Expected strings in collection variables\r",
											"['_webStoreId', '_productId', '_token', '_cartStateOrId', '_instanceUrl', '_effectiveAccountId'].forEach(esicv => {\r",
											"    if(!pm.collectionVariables.has(esicv)) {\r",
											"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Tests...`);\r",
											"\r",
											"pm.test('Status code is 204 or 404', () => {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([204, 404]);\r",
											"});\r",
											"\r",
											"pm.collectionVariables.set('_cartStateOrId', undefined);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{_instanceUrl}}/services/data/v{{apiVersion}}/commerce/webstores/{{_webStoreId}}/carts/{{_cartStateOrId}}?effectiveAccountId={{_effectiveAccountId}}",
									"host": [
										"{{_instanceUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"commerce",
										"webstores",
										"{{_webStoreId}}",
										"carts",
										"{{_cartStateOrId}}"
									],
									"query": [
										{
											"key": "effectiveAccountId",
											"value": "{{_effectiveAccountId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "13. Create Cart (demonstration purposes)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											"\r",
											"// Expected strings in environment variables\r",
											"['orgHostMySalesforceFormat','apiVersion'].forEach(esiev => {\r",
											"    if(!pm.environment.has(esiev)) {\r",
											"        const msg = 'Expected Postman environment variable not found: ' + esiev;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
											"});\r",
											"\r",
											"// Expected strings in collection variables\r",
											"['_webStoreId', '_productId', '_token', '_instanceUrl'].forEach(esicv => {\r",
											"    if(!pm.collectionVariables.has(esicv)) {\r",
											"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Tests...`);\r",
											"\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test('Response is valid and has a JSON body', () => {\r",
											"    pm.response.to.be.success;\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test('Validate the response contains a cart Id and set the collection variables', () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.cartId).to.exist;\r",
											"    pm.expect(jsonData.cartId).to.be.an('string');\r",
											"    pm.collectionVariables.set('_cartStateOrId', jsonData.cartId);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Test Headless Cart\",\r\n    \"type\": \"Cart\",\r\n    \"effectiveAccountId\": \"{{_effectiveAccountId}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{_instanceUrl}}/services/data/v{{apiVersion}}/commerce/webstores/{{_webStoreId}}/carts",
									"host": [
										"{{_instanceUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"commerce",
										"webstores",
										"{{_webStoreId}}",
										"carts"
									]
								}
							},
							"response": []
						},
						{
							"name": "14. Add single Product to Cart",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											"\r",
											"// Expected strings in environment variables\r",
											"['orgHostMySalesforceFormat','apiVersion'].forEach(esiev => {\r",
											"    if(!pm.environment.has(esiev)) {\r",
											"        const msg = 'Expected Postman environment variable not found: ' + esiev;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
											"});\r",
											"\r",
											"// Expected strings in collection variables\r",
											"['_webStoreId', '_productId', '_token', '_instanceUrl', '_cartStateOrId', '_effectiveAccountId'].forEach(esicv => {\r",
											"    if(!pm.collectionVariables.has(esicv)) {\r",
											"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Tests...`);\r",
											"\r",
											"pm.test(\"Status code is 201 or 200\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([201, 200]);\r",
											"});\r",
											"\r",
											"pm.test('Response is valid and has a JSON body', () => {\r",
											"    pm.response.to.be.success;\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test('Validate the response', () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.cartItemId).to.exist;\r",
											"    pm.expect(jsonData.cartItemId).to.be.a.string;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"productId\": \"{{_productId}}\",\r\n   \"quantity\":\"1\",\r\n   \"type\":\"Product\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{_instanceUrl}}/services/data/v{{apiVersion}}/commerce/webstores/{{_webStoreId}}/carts/{{_cartStateOrId}}/cart-items?effectiveAccountId={{_effectiveAccountId}}",
									"host": [
										"{{_instanceUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"commerce",
										"webstores",
										"{{_webStoreId}}",
										"carts",
										"{{_cartStateOrId}}",
										"cart-items"
									],
									"query": [
										{
											"key": "effectiveAccountId",
											"value": "{{_effectiveAccountId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "15. Add multiple Products to Cart",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											"\r",
											"// Expected strings in environment variables\r",
											"['orgHostMySalesforceFormat','apiVersion','productNamesCommaDelimited', 'currencyIsoCode'].forEach(esiev => {\r",
											"    if(!pm.environment.has(esiev)) {\r",
											"        const msg = 'Expected Postman environment variable not found: ' + esiev;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
											"});\r",
											"\r",
											"// Expected strings in collection variables\r",
											"['_webStoreId', '_productId', '_token', '_instanceUrl', '_cartStateOrId', '_effectiveAccountId'].forEach(esicv => {\r",
											"    if(!pm.collectionVariables.has(esicv)) {\r",
											"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
											"});\r",
											"\r",
											"// Create the JSON Body for multiple objects\r",
											"const productIds = JSON.parse(pm.collectionVariables.get('_productIds'));\r",
											"let o = new Object();\r",
											"o.inputs = [];\r",
											"let qty = 2;\r",
											"let element;\r",
											"let richInput;\r",
											"\r",
											"productIds.forEach(pid => {\r",
											"    element = new Object();\r",
											"    richInput = new Object();\r",
											"    richInput.productId = pid;\r",
											"    richInput.quantity = qty * 3;\r",
											"    richInput.type = \"Product\";\r",
											"    element.richInput = richInput;\r",
											"    o.inputs.push(element);\r",
											"});\r",
											"\r",
											"pm.collectionVariables.set('_productIdsForAddMultipleJson', JSON.stringify(o));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Tests...`);\r",
											"\r",
											"pm.test(\"Status code is 201 or 200\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([201, 200]);\r",
											"});\r",
											"\r",
											"pm.test('Response is valid and has a JSON body', () => {\r",
											"    pm.response.to.be.success;\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"/*\r",
											"pm.test('Validate the response', () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.cartItemId).to.exist;\r",
											"    pm.expect(jsonData.cartItemId).to.be.a.string;\r",
											"    pm.collectionVariables.set('_cartStateOrId', jsonData.cartItemId);\r",
											"});\r",
											"*/"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{_productIdsForAddMultipleJson}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{_instanceUrl}}/services/data/v{{apiVersion}}/commerce/webstores/{{_webStoreId}}/carts/{{_cartStateOrId}}/cart-items/batch?effectiveAccountId={{_effectiveAccountId}}&currencyIsoCode={{currencyIsoCode}}",
									"host": [
										"{{_instanceUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"commerce",
										"webstores",
										"{{_webStoreId}}",
										"carts",
										"{{_cartStateOrId}}",
										"cart-items",
										"batch"
									],
									"query": [
										{
											"key": "effectiveAccountId",
											"value": "{{_effectiveAccountId}}"
										},
										{
											"key": "currencyIsoCode",
											"value": "{{currencyIsoCode}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "16. Get Cart Items",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Response is valid and has a JSON body', () => {\r",
											"     pm.response.to.be.success;\r",
											"     pm.response.to.be.withBody;\r",
											"     pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"\r",
											"pm.test('Validate enough items in cart to continue - need 3 or more', () => {\r",
											"    pm.expect(jsonData.cartItems).to.exist;\r",
											"    pm.expect(jsonData.cartItems).to.be.an('array').with.length.greaterThan(2);\r",
											"});\r",
											"\r",
											"const firstCartItem = jsonData.cartItems[0].cartItem;\r",
											"\r",
											"pm.test('Check that Cart has first item and set collection variable for Update operation', () =>{\r",
											"    pm.expect(firstCartItem).to.be.an('object').with.property('cartItemId').that.is.an('string');\r",
											"    pm.collectionVariables.set('_cartItemIdForQuantityUpdate', firstCartItem.cartItemId);\r",
											"});\r",
											"\r",
											"const secondCartItem = jsonData.cartItems[1].cartItem;\r",
											"\r",
											"pm.test('Check Cart has second item and set collection variable for Delete operation', () =>{\r",
											"    pm.expect(secondCartItem).to.be.an('object').with.property('cartItemId').that.is.an('string');\r",
											"    pm.collectionVariables.set('_cartItemIdForDelete', secondCartItem.cartItemId);\r",
											"});\r",
											"\r",
											"pm.test('Validate the items are in the same Cart', () => {\r",
											"    pm.expect(firstCartItem.cartId).equals(secondCartItem.cartId);\r",
											"});\r",
											"\r",
											"pm.test('Test that variables for Update and Delete operations were set', () => {\r",
											"    const cartItemIdForQuantityUpdate =  pm.collectionVariables.get('_cartItemIdForQuantityUpdate');\r",
											"    pm.expect(cartItemIdForQuantityUpdate).to.exist;\r",
											"    pm.expect(cartItemIdForQuantityUpdate).to.be.an('string').with.length.greaterThan(0);\r",
											"\r",
											"    const cartItemIdForDelete = pm.collectionVariables.get('_cartItemIdForDelete');\r",
											"    pm.expect(cartItemIdForDelete).to.exist;\r",
											"    pm.expect(cartItemIdForDelete).to.be.an('string').with.length.greaterThan(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											"\r",
											"// Expected strings in environment variables\r",
											"['orgHostMySalesforceFormat','apiVersion','productNamesCommaDelimited'].forEach(esiev => {\r",
											"    if(!pm.environment.has(esiev)) {\r",
											"        const msg = 'Expected Postman environment variable not found: ' + esiev;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
											"});\r",
											"\r",
											"// Expected strings in collection variables\r",
											"['_webStoreId', '_productId', '_token', '_instanceUrl', '_cartStateOrId', '_effectiveAccountId'].forEach(esicv => {\r",
											"    if(!pm.collectionVariables.has(esicv)) {\r",
											"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{_instanceUrl}}/services/data/v{{apiVersion}}/commerce/webstores/{{_webStoreId}}/carts/{{_cartStateOrId}}/cart-items?effectiveAccountId={{_effectiveAccountId}}",
									"host": [
										"{{_instanceUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"commerce",
										"webstores",
										"{{_webStoreId}}",
										"carts",
										"{{_cartStateOrId}}",
										"cart-items"
									],
									"query": [
										{
											"key": "effectiveAccountId",
											"value": "{{_effectiveAccountId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "17. Update Item Quantity",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											"\r",
											"// Expected strings in environment variables\r",
											"['orgHostMySalesforceFormat','apiVersion','productNamesCommaDelimited', 'currencyIsoCode'].forEach(esiev => {\r",
											"    if(!pm.environment.has(esiev)) {\r",
											"        const msg = 'Expected Postman environment variable not found: ' + esiev;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
											"});\r",
											"\r",
											"// Expected strings in collection variables\r",
											"['_webStoreId', '_productId', '_token', '_instanceUrl', '_cartStateOrId', '_effectiveAccountId', '_cartItemIdForQuantityUpdate'].forEach(esicv => {\r",
											"    if(!pm.collectionVariables.has(esicv)) {\r",
											"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"console.warn(pm.response.status);\r",
											"\r",
											"pm.test('Response is valid and has a JSON body', () => {\r",
											"     pm.response.to.be.withBody;\r",
											"     pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test('Validate the response and save collection variables', () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    \r",
											"    console.warn(jsonData);\r",
											"\r",
											"    //pm.expect(jsonData.cartItem).to.exist;\r",
											"    /*\r",
											"    pm.expect(jsonData.cartItem).to.be.an('object').with.property('cartItemId').that.is.an('string');\r",
											"    pm.expect(jsonData.cartItem).to.be.an('object').with.property('cartId').that.is.an('string');\r",
											"    pm.expect(jsonData.cartItem).to.be.an('object').with.property('quantity').that.is.an('number');\r",
											"    pm.expect(jsonData.cartItem).equals(5);\r",
											"    pm.expect(jsonData.type).equals('Product');\r",
											"    */\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_token}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"quantity\": \"5\"\r\n}"
								},
								"url": {
									"raw": "{{_instanceUrl}}/services/data/v{{apiVersion}}/commerce/webstores/{{_webStoreId}}/carts/{{_cartStateOrId}}/cart-items/{{_cartItemIdForQuantityUpdate}}?effectiveAccountId={{_effectiveAccountId}}&currencyIsoCode={{currencyIsoCode}}",
									"host": [
										"{{_instanceUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"commerce",
										"webstores",
										"{{_webStoreId}}",
										"carts",
										"{{_cartStateOrId}}",
										"cart-items",
										"{{_cartItemIdForQuantityUpdate}}"
									],
									"query": [
										{
											"key": "effectiveAccountId",
											"value": "{{_effectiveAccountId}}"
										},
										{
											"key": "currencyIsoCode",
											"value": "{{currencyIsoCode}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "18. Delete Cart Item - Draft",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 204 or 404', () => {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([204, 404]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											"\r",
											"// Expected strings in environment variables\r",
											"['orgHostMySalesforceFormat','apiVersion','productNamesCommaDelimited'].forEach(esiev => {\r",
											"    if(!pm.environment.has(esiev)) {\r",
											"        const msg = 'Expected Postman environment variable not found: ' + esiev;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
											"});\r",
											"\r",
											"// Expected strings in collection variables\r",
											"['_webStoreId', '_productId', '_token', '_instanceUrl', '_cartStateOrId', '_effectiveAccountId', '_cartItemIdForDelete'].forEach(esicv => {\r",
											"    if(!pm.collectionVariables.has(esicv)) {\r",
											"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{_instanceUrl}}/services/data/v{{apiVersion}}/commerce/webstores/{{_webStoreId}}/carts/{{_cartStateOrId}}/cart-items/{{_cartItemIdForRemoval}}?effectiveAccountId={{_effectiveAccountId}}",
									"host": [
										"{{_instanceUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"commerce",
										"webstores",
										"{{_webStoreId}}",
										"carts",
										"{{_cartStateOrId}}",
										"cart-items",
										"{{_cartItemIdForRemoval}}"
									],
									"query": [
										{
											"key": "effectiveAccountId",
											"value": "{{_effectiveAccountId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "19. Get Cart Items",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Response is valid and has a JSON body', () => {\r",
											"     pm.response.to.be.success;\r",
											"     pm.response.to.be.withBody;\r",
											"     pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test('Validate the response and save collection variables', () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.cartItems).to.exist;\r",
											"    pm.expect(jsonData.cartItems).to.be.an('array').with.length.greaterThan(0);\r",
											"    \r",
											"    const firstCartItem = jsonData.cartItems[0].cartItem;\r",
											"    pm.expect(firstCartItem).to.be.an('object').with.property('cartItemId').that.is.an('string');\r",
											"    \r",
											"    const secondCartItem = jsonData.cartItems[1].cartItem;\r",
											"    pm.expect(secondCartItem).to.be.an('object').with.property('cartItemId').that.is.an('string');\r",
											"    \r",
											"    pm.expect(firstCartItem.cartId).equals(secondCartItem.cartId);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											"\r",
											"// Expected strings in environment variables\r",
											"['orgHostMySalesforceFormat','apiVersion','productNamesCommaDelimited'].forEach(esiev => {\r",
											"    if(!pm.environment.has(esiev)) {\r",
											"        const msg = 'Expected Postman environment variable not found: ' + esiev;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
											"});\r",
											"\r",
											"// Expected strings in collection variables\r",
											"['_webStoreId', '_productId', '_token', '_instanceUrl', '_cartStateOrId', '_effectiveAccountId'].forEach(esicv => {\r",
											"    if(!pm.collectionVariables.has(esicv)) {\r",
											"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{_instanceUrl}}/services/data/v{{apiVersion}}/commerce/webstores/{{_webStoreId}}/carts/{{_cartStateOrId}}/cart-items?effectiveAccountId={{_effectiveAccountId}}",
									"host": [
										"{{_instanceUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"commerce",
										"webstores",
										"{{_webStoreId}}",
										"carts",
										"{{_cartStateOrId}}",
										"cart-items"
									],
									"query": [
										{
											"key": "effectiveAccountId",
											"value": "{{_effectiveAccountId}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Guest - DRAFT",
					"item": [
						{
							"name": "1. Clear Collection Variables",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName}  Pre-request Script...`);\r",
											"\r",
											"// Check for environment selection\r",
											"if(pm.environment.name === undefined) {\r",
											"    const msg = 'No Postman environment selected or set.';\r",
											"    pm.expect.fail(msg);\r",
											"}\r",
											"\r",
											"// Clean up the variables from the collection set throughout the various calls\r",
											"pm.collectionVariables.clear();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Tests...`);\r",
											"\r",
											"pm.test('Make sure collection variables are clean', () => {\r",
											"    pm.expect(JSON.parse(JSON.stringify(pm.collectionVariables.values)).map((v) => v.key + ': ' + v.value)).to.be.an('array').empty;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "postman-echo.com/get",
									"host": [
										"postman-echo",
										"com"
									],
									"path": [
										"get"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Deployment",
			"item": [
				{
					"name": "Payment",
					"item": [
						{
							"name": "Mock Payment Setup",
							"item": [
								{
									"name": "1. Clear Collection Variables",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"console.log('1. Clear Collection Variables Pre-request Script...');\r",
													"\r",
													"// Check for environment selection\r",
													"if(pm.environment.name === undefined) {\r",
													"    const msg = 'No Postman environment selected or set.';\r",
													"    pm.expect.fail(msg);\r",
													"}\r",
													"\r",
													"// Clean up the variables from the collection set throughout the various calls\r",
													"pm.collectionVariables.clear();"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"console.log('1. Clear Collection Variables Tests...');\r",
													"\r",
													"pm.test('Make sure collection variables are clean', () => {\r",
													"    pm.expect(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value)).to.be.an('array').empty;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "postman-echo.com/get",
											"host": [
												"postman-echo",
												"com"
											],
											"path": [
												"get"
											]
										}
									},
									"response": []
								},
								{
									"name": "2. Log in as System Administrator (SOAP)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"console.log('2. Log in as System Administrator Tests...');\r",
													"\r",
													"pm.test('Status code is 200', () => {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test('Validate the access token is found in the body and save it to the variables', () => {\r",
													"    const result = xml2Json(pm.response.text())['soapenv:Envelope']['soapenv:Body'].loginResponse.result;\r",
													"    const url = result.serverUrl.split('/');\r",
													"\r",
													"    pm.expect(result.sessionId).to.exist;\r",
													"    pm.expect(result.sessionId).to.be.a.string;\r",
													"\r",
													"    pm.collectionVariables.set('_token', result.sessionId);\r",
													"    pm.collectionVariables.set('_instanceUrl', url[0] + '//' + url[2]);\r",
													"    pm.collectionVariables.set('_userId', result.userId);\r",
													"    pm.collectionVariables.set('_orgId', result.userInfo.organizationId);\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"console.log('2. Log in as System Administrator Pre-request Script...');\r",
													"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
													"\r",
													"['orgLoginUrl','apiVersion'].forEach(esiev => {\r",
													"    if(!pm.environment.has(esiev)) {\r",
													"        const msg = 'Expected Postman environment variable not found: ' + esiev;\r",
													"        pm.expect.fail(msg);\r",
													"    }\r",
													"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
													"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "text/xml; charset=UTF-8",
												"type": "text"
											},
											{
												"key": "SOAPAction",
												"value": "login",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "text/xml",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\r\n<env:Envelope xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"\r\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n    xmlns:n1=\"urn:partner.soap.sforce.com\"\r\n    xmlns:env=\"http://schemas.xmlsoap.org/soap/envelope/\">\r\n    <env:Body>\r\n        <n1:login>\r\n            <n1:username><![CDATA[{{orgAdminUsername}}]]></n1:username>\r\n            <n1:password><![CDATA[{{orgAdminPassword}}]]></n1:password>\r\n        </n1:login>\r\n    </env:Body>\r\n</env:Envelope>"
										},
										"url": {
											"raw": "{{orgLoginUrl}}/services/Soap/u/{{apiVersion}}",
											"host": [
												"{{orgLoginUrl}}"
											],
											"path": [
												"services",
												"Soap",
												"u",
												"{{apiVersion}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "2. Create Collection Variables",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"console.log('2. Create Collection Variables Pre-request Script...');\r",
													"\r",
													"pm.collectionVariables.set('_namedCredentialLabel', 'Test_NC');\r",
													"pm.collectionVariables.set('_paymentGatewayProviderApexClassName', '');\r",
													"pm.collectionVariables.set('_namedCredentialDeveloperName', '');\r",
													"pm.collectionVariables.set('_paymentGatewayProviderDeveloperName', '');\r",
													"pm.collectionVariables.set('_paymentGatewayName', '');\r",
													"pm.collectionVariables.set('_paymentGatewayExternalReference', '');"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"console.log('2. Create Collection Variables Pre-request Script...');\r",
													"\r",
													"pm.test('Make sure collection variables are clean', () => {\r",
													"    pm.expect(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value)).to.be.an('array').not.empty;\r",
													"});\r",
													"\r",
													"['orgLoginUrl','apiVersion'].forEach(esiev => {\r",
													"    if(!pm.environment.has(esiev)) {\r",
													"        const msg = 'Expected Postman environment variable not found: ' + esiev;\r",
													"        pm.expect.fail(msg);\r",
													"    }\r",
													"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
													"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
													"});\r",
													"\r",
													"['_namedCredentialLabel', '_paymentGatewayProviderApexClassName', '_namedCredentialDeveloperName','_paymentGatewayProviderDeveloperName', '_paymentGatewayName','_paymentGatewayExternalReference'].forEach(esicv => {\r",
													"    if(!pm.collectionVariables.has(esicv)) {\r",
													"        const msg = 'Expected Postman environment variable not found: ' + esicv;\r",
													"        pm.expect.fail(msg);\r",
													"    }\r",
													"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
													"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "postman-echo.com/get",
											"host": [
												"postman-echo",
												"com"
											],
											"path": [
												"get"
											]
										}
									},
									"response": []
								},
								{
									"name": "3. Get Named Credentials",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"console.log('3. Deploy Named Credentials Pre-request Script...');\r",
													"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
													"\r",
													"['orgLoginUrl','apiVersion'].forEach(esiev => {\r",
													"    if(!pm.environment.has(esiev)) {\r",
													"        const msg = 'Expected Postman environment variable not found: ' + esiev;\r",
													"        pm.expect.fail(msg);\r",
													"    }\r",
													"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
													"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"console.log('3. Deploy Named Credentials Tests...');\r",
													"\r",
													"pm.test('Status code is 200', () => {\r",
													"    //pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test('Validate the access token is found in the body and save it to the variables', () => {\r",
													"    /*\r",
													"    const result = xml2Json(pm.response.text())['soapenv:Envelope']['soapenv:Body'].loginResponse.result;\r",
													"    const url = result.serverUrl.split('/');\r",
													"\r",
													"    pm.expect(result.sessionId).to.exist;\r",
													"    pm.expect(result.sessionId).to.be.a.string;\r",
													"\r",
													"    pm.collectionVariables.set('_token', result.sessionId);\r",
													"    pm.collectionVariables.set('_instanceUrl', url[0] + '//' + url[2]);\r",
													"    pm.collectionVariables.set('_userId', result.userId);\r",
													"    pm.collectionVariables.set('_orgId', result.userInfo.organizationId);\r",
													"    */\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "postman-echo.com/get",
											"host": [
												"postman-echo",
												"com"
											],
											"path": [
												"get"
											]
										}
									},
									"response": []
								},
								{
									"name": "4. Create Payment Gateway Provider",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"console.log('4. Create Payment Gateway Provider Tests...');",
													"",
													"pm.test('Status code is 200', () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test('Response is valid and has a JSON body', () => {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"pm.test('Validate result and save collection variables', () => {",
													"    let data = pm.response.json();",
													"    const paymentGatewayProvider = data.compositeResponse.find((result) => result.referenceId === 'paymentGatewayProvider');",
													"    pm.expect(paymentGatewayProvider).to.exist;",
													"    pm.expect(paymentGatewayProvider.body).to.exist;",
													"    pm.expect(paymentGatewayProvider.body.id).to.exist;",
													"    pm.expect(paymentGatewayProvider.body.id).to.be.a.string;",
													"    pm.collectionVariables.set('_paymentGatewayProviderId', paymentGatewayProvider.body.id);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"console.log('4. Create Payment Gateway Provider Pre-request Script...');\r",
													"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{_accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"allOrNone\": true,\n    \"compositeRequest\": [\n        {\n            \"method\": \"GET\",\n            \"url\": \"/services/data/v{{apiVersion}}/query/?q=SELECT+Id+FROM+ApexClass+WHERE+Name+=+'{{_paymentGatewayProviderApexClassName}}'\",\n            \"referenceId\": \"apexClass\"\n        },\n        {\n            \"method\": \"POST\",\n            \"url\": \"/services/data/v{{apiVersion}}/sobjects/PaymentGatewayProvider\",\n            \"referenceId\": \"paymentGatewayProvider\",\n            \"body\": {\n                \"ApexAdapterId\": \"@{apexClass.records[0].Id}\",\n                \"DeveloperName\": \"{{_paymentGatewayProviderDeveloperName}}\",\n                \"MasterLabel\": \"{{_paymentGatewayProviderDeveloperName}}\",\n                \"Language\": \"en_US\",\n                \"IdempotencySupported\": \"Yes\"\n            }\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{orgHostMySalesforceFormat}}/services/data/v{{apiVersion}}/composite",
											"host": [
												"{{orgHostMySalesforceFormat}}"
											],
											"path": [
												"services",
												"data",
												"v{{apiVersion}}",
												"composite"
											]
										}
									},
									"response": []
								},
								{
									"name": "5. Create Payment Gateway",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"console.log('5. Create Payment Gateway Tests...');",
													"",
													"pm.test('Status code is 200', () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test('Response is valid and has a JSON body', () => {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"const validateResults = (refId) => {",
													"    pm.test(`Validate ${refId}`, () => {",
													"        let data = pm.response.json();",
													"        const refResult = data.compositeResponse.find((result) => result.referenceId === refId);",
													"        pm.expect(refResult).to.exist;",
													"        pm.expect(refResult.body).to.exist;",
													"        pm.expect(refResult.body.records).to.exist;",
													"        pm.expect(refResult.body.records).to.be.an('array');",
													"        pm.expect(refResult.body.records.length).to.eql(1);",
													"        pm.expect(refResult.body.records[0].Id).to.exist;",
													"        pm.expect(refResult.body.records[0].Id).to.be.a.string;",
													"    });",
													"};",
													"",
													"validateResults('apexClass');",
													"validateResults('namedCredential');",
													"validateResults('paymentGatewayProvider');",
													"",
													"pm.test('Validate paymentGateway', () => {",
													"    let data = pm.response.json();",
													"    const paymentGateway = data.compositeResponse.find((result) => result.referenceId === 'paymentGateway');",
													"    pm.expect(paymentGateway).to.exist;",
													"    pm.expect(paymentGateway.httpStatusCode).to.eql(201);",
													"    pm.expect(paymentGateway.body.id).to.exist;",
													"    pm.expect(paymentGateway.body.id).to.be.a.string;",
													"    pm.expect(paymentGateway.body.success).to.exist;",
													"    pm.expect(paymentGateway.body.success).to.eql(true);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"console.log('5. Create Payment Gateway Provider Pre-request Script...');\r",
													"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{_accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"allOrNone\": true,\n    \"compositeRequest\": [\n        {\n            \"method\": \"GET\",\n            \"url\": \"/services/data/v{{apiVersion}}/query/?q=SELECT+Id+FROM+ApexClass+WHERE+Name+=+'{{_paymentGatewayProviderApexClassName}}'+LIMIT+1\",\n            \"referenceId\": \"apexClass\"\n        },\n        {\n            \"method\": \"GET\",\n            \"url\": \"/services/data/v{{apiVversion}}/query/?q=SELECT+Id+FROM+NamedCredential+WHERE+DeveloperName+=+'{{_namedCredentialDeveloperName}}'+LIMIT+1\",\n            \"referenceId\": \"namedCredential\"\n        },\n        {\n            \"method\": \"GET\",\n            \"url\": \"/services/data/v{{apiVersion}}/query/?q=SELECT+Id+FROM+PaymentGatewayProvider+WHERE+ApexAdapterId+=+'@{apexClass.records[0].Id}'+AND+DeveloperName+=+'{{_paymentGatewayProviderDeveloperName}}'+LIMIT+1\",\n            \"referenceId\": \"paymentGatewayProvider\"\n        },\n        {\n            \"method\": \"POST\",\n            \"url\": \"/services/data/v{{apiVersion}}/sobjects/PaymentGateway\",\n            \"referenceId\": \"paymentGateway\",\n            \"body\": {\n                \"PaymentGatewayProviderId\": \"@{paymentGatewayProvider.records[0].Id}\",\n                \"MerchantCredentialId\": \"@{namedCredential.records[0].Id}\",\n                \"Status\": \"Active\",\n                \"PaymentGatewayName\": \"{{_paymentGatewayName}}\",\n                \"ExternalReference\": \"{{_paymentGatewayExternalReference}}\"\n            }\n        }\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{orgHostMySalesforceFormat}}/services/data/v{{apiVersion}}/composite",
											"host": [
												"{{orgHostMySalesforceFormat}}"
											],
											"path": [
												"services",
												"data",
												"v{{apiVersion}}",
												"composite"
											]
										}
									},
									"response": []
								},
								{
									"name": "6. Query Payment Gateway",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"console.log('6. Query Payment Gateway Tests...');",
													"",
													"pm.test('Status code is 200', () => {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test('Response is valid and has a JSON body', () => {",
													"     pm.response.to.be.success;",
													"     pm.response.to.be.withBody;",
													"     pm.response.to.be.json;",
													"});",
													"",
													"const validateResults = (refId) => {",
													"    pm.test(`Validate ${refId}`, () => {",
													"        let data = pm.response.json();",
													"        const refResult = data.compositeResponse.find((result) => result.referenceId === refId);",
													"        pm.expect(refResult).to.exist;",
													"        pm.expect(refResult.body).to.exist;",
													"        pm.expect(refResult.body.records).to.exist;",
													"        pm.expect(refResult.body.records).to.be.an('array');",
													"        pm.expect(refResult.body.records.length).to.eql(1);",
													"        pm.expect(refResult.body.records[0].Id).to.exist;",
													"        pm.expect(refResult.body.records[0].Id).to.be.a.string;",
													"    });",
													"};",
													"",
													"validateResults('apexClass');",
													"validateResults('namedCredential');",
													"validateResults('paymentGatewayProvider');",
													"validateResults('paymentGateway');"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"console.log('6. Query Payment Gateway Provider Pre-request Script...');\r",
													"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{_accessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"allOrNone\": true,\n    \"compositeRequest\": [\n        {\n            \"method\": \"GET\",\n            \"url\": \"/services/data/v{{apiVersion}}/query/?q=SELECT+Id,+Name,+Status,+ApiVersion+FROM+ApexClass+WHERE+Name+=+'{{_paymentGatewayProviderApexClassName}}'+LIMIT+1\",\n            \"referenceId\": \"apexClass\"\n        },\n        {\n            \"method\": \"GET\",\n            \"url\": \"/services/data/v{{apiVersion}}/query/?q=SELECT+Id,+DeveloperName,+Endpoint+FROM+NamedCredential+WHERE+DeveloperName+=+'{{_namedCredentialDeveloperName}}'+LIMIT+1\",\n            \"referenceId\": \"namedCredential\"\n        },\n        {\n            \"method\": \"GET\",\n            \"url\": \"/services/data/v{{apiVersion}}/query/?q=SELECT+Id,+DeveloperName,+MasterLabel,+ApexAdapterId,+IdempotencySupported,+Language+FROM+PaymentGatewayProvider+WHERE+ApexAdapterId+=+'@{apexClass.records[0].Id}'+AND+DeveloperName+=+'{{_paymentGatewayProviderDeveloperName}}'+LIMIT+1\",\n            \"referenceId\": \"paymentGatewayProvider\"\n        },\n        {\n            \"method\": \"GET\",\n            \"url\": \"/services/data/v{{apiVersion}}/query/?q=SELECT+Id,ExternalReference+FROM+PaymentGateway+WHERE+PaymentGatewayProviderId+=+'@{paymentGatewayProvider.records[0].Id}'+AND+MerchantCredentialId+=+'@{namedCredential.records[0].Id}'+AND+PaymentGatewayName+=+'{{_paymentGatewayName}}'+AND+Status+='Active'+LIMIT+1\",\n            \"referenceId\": \"paymentGateway\"\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{orgHostMySalesforceFormat}}/services/data/v{{apiVersion}}/composite",
											"host": [
												"{{orgHostMySalesforceFormat}}"
											],
											"path": [
												"services",
												"data",
												"v{{apiVersion}}",
												"composite"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Stripe (not Salesforce Payments)",
							"item": [
								{
									"name": "1. Clear Collection Variables Copy",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"console.log('1. Clear Collection Variables Pre-request Script...');\r",
													"\r",
													"// Check for environment selection\r",
													"if(pm.environment.name === undefined) {\r",
													"    const msg = 'No Postman environment selected or set.';\r",
													"    pm.expect.fail(msg);\r",
													"}\r",
													"\r",
													"// Clean up the variables from the collection set throughout the various calls\r",
													"pm.collectionVariables.clear();"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"console.log('1. Clear Collection Variables Tests...');\r",
													"\r",
													"pm.test('Make sure collection variables are clean', () => {\r",
													"    pm.expect(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value)).to.be.an('array').empty;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "postman-echo.com/get",
											"host": [
												"postman-echo",
												"com"
											],
											"path": [
												"get"
											]
										}
									},
									"response": []
								},
								{
									"name": "1. Deploy Stripe Example Copy",
									"request": {
										"method": "GET",
										"header": []
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Register External Services",
					"item": [
						{
							"name": "1. Clear Collection Variables",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log('1. Clear Collection Variables Pre-request Script...');\r",
											"\r",
											"// Check for environment selection\r",
											"if(pm.environment.name === undefined) {\r",
											"    const msg = 'No Postman environment selected or set.';\r",
											"    pm.expect.fail(msg);\r",
											"}\r",
											"\r",
											"// Clean up the variables from the collection set throughout the various calls\r",
											"pm.collectionVariables.clear();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log('1. Clear Collection Variables Tests...');\r",
											"\r",
											"pm.test('Make sure collection variables are clean', () => {\r",
											"    pm.expect(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value)).to.be.an('array').empty;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "postman-echo.com/get",
									"host": [
										"postman-echo",
										"com"
									],
									"path": [
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "New Request",
							"request": {
								"method": "GET",
								"header": []
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Checkout",
			"item": [
				{
					"name": "Authenticated Happy Path - DRAFT",
					"item": [
						{
							"name": "1. Clear Collection Variables",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log('1. Clear Collection Variables Pre-request Script...');\r",
											"\r",
											"// Check for environment selection\r",
											"if(pm.environment.name === undefined) {\r",
											"    const msg = 'No Postman environment selected or set.';\r",
											"    pm.expect.fail(msg);\r",
											"}\r",
											"\r",
											"// Clean up the variables from the collection set throughout the various calls\r",
											"pm.collectionVariables.clear();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log('1. Clear Collection Variables Tests...');\r",
											"\r",
											"pm.test('Make sure collection variables are clean', () => {\r",
											"    pm.expect(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value)).to.be.an('array').empty;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "postman-echo.com/get",
									"host": [
										"postman-echo",
										"com"
									],
									"path": [
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "2. Log in as System Administrator (SOAP)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log('2. Log in as System Administrator Tests...');\r",
											"\r",
											"pm.test('Status code is 200', () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Validate the access token is found in the body and save it to the variables', () => {\r",
											"    const result = xml2Json(pm.response.text())['soapenv:Envelope']['soapenv:Body'].loginResponse.result;\r",
											"    const url = result.serverUrl.split('/');\r",
											"\r",
											"    pm.expect(result.sessionId).to.exist;\r",
											"    pm.expect(result.sessionId).to.be.a.string;\r",
											"\r",
											"    pm.collectionVariables.set('_token', result.sessionId);\r",
											"    pm.collectionVariables.set('_instanceUrl', url[0] + '//' + url[2]);\r",
											"    pm.collectionVariables.set('_userId', result.userId);\r",
											"    pm.collectionVariables.set('_orgId', result.userInfo.organizationId);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log('2. Log in as System Administrator Pre-request Script...');\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											"\r",
											"// Expected strings in environment variables\r",
											"['orgLoginUrl','apiVersion'].forEach(esiev => {\r",
											"    if(!pm.environment.has(esiev)) {\r",
											"        const msg = 'Expected Postman environment variable not found: ' + esiev;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "text/xml; charset=UTF-8",
										"type": "text"
									},
									{
										"key": "SOAPAction",
										"value": "login",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "text/xml",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\r\n<env:Envelope xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"\r\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n    xmlns:n1=\"urn:partner.soap.sforce.com\"\r\n    xmlns:env=\"http://schemas.xmlsoap.org/soap/envelope/\">\r\n    <env:Body>\r\n        <n1:login>\r\n            <n1:username><![CDATA[{{orgAdminUsername}}]]></n1:username>\r\n            <n1:password><![CDATA[{{orgAdminPassword}}]]></n1:password>\r\n        </n1:login>\r\n    </env:Body>\r\n</env:Envelope>"
								},
								"url": {
									"raw": "{{orgLoginUrl}}/services/Soap/u/{{apiVersion}}",
									"host": [
										"{{orgLoginUrl}}"
									],
									"path": [
										"services",
										"Soap",
										"u",
										"{{apiVersion}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "3. Set WebStoreId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log('3. Set WebStoreId Tests...');\r",
											"\r",
											"pm.test('Status code is 200', () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Response is valid and has a JSON body', () => {\r",
											"     pm.response.to.be.success;\r",
											"     pm.response.to.be.withBody;\r",
											"     pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test('Validate the response and saves the WebStore Id in the collection variables', () => {\r",
											"    const data = pm.response.json();\r",
											"    pm.expect(data.records).to.exist;\r",
											"    pm.expect(data.records).to.be.an('array');\r",
											"    pm.expect(data.records.length).to.eql(1);\r",
											"    const webStore = data.records[0];\r",
											"    pm.expect(webStore.Id).to.exist;\r",
											"    pm.expect(webStore.Id).to.be.an('string');\r",
											"    pm.collectionVariables.set('_webStoreId', webStore.Id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log('3. Set WebStoreId Pre-request Script...');\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											"\r",
											"// Expected strings in environment variables\r",
											"['orgLoginUrl','apiVersion', 'webStoreName'].forEach(esiev => {\r",
											"    if(!pm.environment.has(esiev)) {\r",
											"       const msg = 'Expected Postman environment variable not found: ' + esiev;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
											"});\r",
											"\r",
											"// Expected strings in collection variables\r",
											"['_instanceUrl'].forEach(esicv => {\r",
											"    if(pm.collectionVariables.get(esicv) === undefined) {\r",
											"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{_instanceUrl}}/services/data/v{{apiVersion}}/query/?q=SELECT+Id,+Name+FROM+WebStore+WHERE+Name+=+'{{webStoreName}}'",
									"host": [
										"{{_instanceUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"query",
										""
									],
									"query": [
										{
											"key": "q",
											"value": "SELECT+Id,+Name+FROM+WebStore+WHERE+Name+=+'{{webStoreName}}'"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "4. Login as Buyer (SOAP)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log('3. Login as Buyer (SOAP) Tests...');",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Validate the access token is found in the body and save it to a collection variable', () => {",
											"    ",
											"    const result = xml2Json(pm.response.text())['soapenv:Envelope']['soapenv:Body'].loginResponse.result;",
											"    const url = result.serverUrl.split('/');",
											"",
											"    pm.expect(result.sessionId).to.exist;",
											"    pm.expect(result.sessionId).to.be.a.string;",
											"",
											"    pm.collectionVariables.set('_token', result.sessionId);",
											"    pm.collectionVariables.set('_instanceUrl', url[0] + '//' + url[2]);",
											"    pm.collectionVariables.set('_userId', result.userId);",
											"    pm.collectionVariables.set('_orgId', result.userInfo.organizationId);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log('3. Login as Buyer (SOAP) Pre-request Script...');\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											"\r",
											"// Expected strings in environment variables\r",
											"['orgLoginUrl','apiVersion'].forEach(esiev => {\r",
											"    if(!pm.environment.has(esiev)) {\r",
											"        const msg = 'Expected Postman environment variable not found: ' + esiev;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
											"});\r",
											"\r",
											"// Expected strings in collection variables\r",
											"['_orgId', '_webStoreId'].forEach(esicv => {\r",
											"    if(pm.collectionVariables.get(esicv) === undefined) {\r",
											"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "text/xml; charset=UTF-8"
									},
									{
										"key": "SOAPAction",
										"value": "login"
									},
									{
										"key": "Accept",
										"value": "text/xml"
									},
									{
										"key": "Cookie",
										"value": "BrowserId=POhd6XTZEe2v6_8M7WG26g"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap:Envelope xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\" \nxmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://\nwww.w3.org/2001/XMLSchema\">\n    <soap:Header>\n        <LoginScopeHeader xmlns=\"urn:partner.soap.sforce.com\">\n            <organizationId>{{_orgId}}</organizationId>\n        </LoginScopeHeader>\n    </soap:Header>\n    <soap:Body>\n        <login xmlns=\"urn:partner.soap.sforce.com\">\n            <username><![CDATA[{{buyerUsername}}]]></username>\n            <password><![CDATA[{{buyerPassword}}]]></password>\n        </login>\n    </soap:Body>\n</soap:Envelope>"
								},
								"url": {
									"raw": "{{orgLoginUrl}}/services/Soap/u/{{apiVersion}}",
									"host": [
										"{{orgLoginUrl}}"
									],
									"path": [
										"services",
										"Soap",
										"u",
										"{{apiVersion}}"
									]
								},
								"description": "Authenticate the shopper through the variables _buyerUsername_ and _buyerPassword_. Generated session ID is saved in _accessToken for use in the other calls in the collection."
							},
							"response": []
						},
						{
							"name": "5. Search for Products Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log('5. Search for Products Tests...');",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test('Response is valid and has a JSON body', () => {",
											"    pm.response.to.be.success;",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test('Validate the response and save the product id to a collection variable', () => {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.productsPage).to.exist;",
											"    pm.expect(jsonData.productsPage).to.be.an('object');",
											"    pm.expect(jsonData.productsPage.products).to.exist;",
											"    pm.expect(jsonData.productsPage.products).to.be.an('array');",
											"    pm.expect(jsonData.productsPage.products[0]).to.exist;",
											"    pm.expect(jsonData.productsPage.products[0]).to.be.an('object');",
											"    pm.expect(jsonData.productsPage.products[0]).to.exist;",
											"    pm.expect(jsonData.productsPage.products[0].id).to.be.an('string');",
											"    pm.collectionVariables.set('_productId', jsonData.productsPage.products[0].id);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log('5. Search for Products Pre-request Script...');\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											"\r",
											"// Expected strings in environment variables\r",
											"['orgHostMySalesforceFormat','apiVersion', 'productSearchTerm'].forEach(esiev => {\r",
											"    if(!pm.environment.has(esiev)) {\r",
											"        const msg = 'Expected Postman environment variable not found: ' + esiev;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
											"});\r",
											"\r",
											"// Expected strings in collection variables\r",
											"['_webStoreId', '_token', '_orgId'].forEach(esicv => {\r",
											"    if(!pm.collectionVariables.has(esicv)) {\r",
											"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableUrlEncoding": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"searchTerm\": \"{{productSearchTerm}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{orgHostMySalesforceFormat}}/services/data/v{{apiVersion}}/commerce/webstores/{{_webStoreId}}/search/product-search",
									"host": [
										"{{orgHostMySalesforceFormat}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"commerce",
										"webstores",
										"{{_webStoreId}}",
										"search",
										"product-search"
									]
								},
								"description": "Uses the variable _productSearchTerm_ to search for products in the webstore. Sets the first returned product in the variable _productId_."
							},
							"response": []
						},
						{
							"name": "6. Get Product Detail",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log('6. Get Product Detail Tests...');",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Response is valid and has a JSON body', () => {",
											"    pm.response.to.be.success;",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test('Validate the response', () => {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.defaultImage).to.exist;",
											"    pm.expect(jsonData.defaultImage).to.be.an('object').with.property('id').to.be.an('string');",
											"",
											"    pm.expect(jsonData.fields).to.exist;",
											"    pm.expect(jsonData.fields).to.be.an('object').with.property('Name').to.be.an('string');",
											"    pm.expect(jsonData.fields).to.be.an('object').with.property('Description').to.be.an('string');",
											"    pm.expect(jsonData.fields).to.be.an('object').with.property('LastModifiedDate').to.match(/\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}Z/);",
											"    ",
											"    pm.expect(jsonData.mediaGroups).to.exist;",
											"    pm.expect(jsonData.mediaGroups).to.be.an('array');",
											"    pm.expect(jsonData.mediaGroups[0]).to.be.an('object').with.property('id').to.be.an('string');",
											"    pm.expect(jsonData.mediaGroups[0].mediaItems[0]).to.be.an('object').with.property('url').to.be.an('string');",
											"    pm.expect(jsonData.mediaGroups[0].mediaItems[0]).to.be.an('object').with.property('mediaType').to.be.an('string');",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log('6. Get Product Detail Pre-request Script...');\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											"\r",
											"// Expected strings in environment variables\r",
											"['orgHostMySalesforceFormat','apiVersion'].forEach(esiev => {\r",
											"    if(!pm.environment.has(esiev)) {\r",
											"        const msg = 'Expected Postman environment variable not found: ' + esiev;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
											"});\r",
											"\r",
											"// Expected strings in collection variables\r",
											"['_webStoreId', '_productId', '_token'].forEach(esicv => {\r",
											"    if(!pm.collectionVariables.has(esicv)) {\r",
											"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{orgHostMySalesforceFormat}}/services/data/v{{apiVersion}}/commerce/webstores/{{_webStoreId}}/products/{{_productId}}",
									"host": [
										"{{orgHostMySalesforceFormat}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"commerce",
										"webstores",
										"{{_webStoreId}}",
										"products",
										"{{_productId}}"
									],
									"query": [
										{
											"key": "effectiveAccountId",
											"value": "<string>",
											"disabled": true
										},
										{
											"key": "excludeAttributeSetInfo",
											"value": "<boolean>",
											"disabled": true
										},
										{
											"key": "excludeEntitlementDetails",
											"value": "<boolean>",
											"disabled": true
										},
										{
											"key": "excludeFields",
											"value": "<boolean>",
											"disabled": true
										},
										{
											"key": "excludeMedia",
											"value": "<boolean>",
											"disabled": true
										},
										{
											"key": "excludePrimaryProductCategory",
											"value": "<boolean>",
											"disabled": true
										},
										{
											"key": "excludeProductSellingModels",
											"value": "<boolean>",
											"disabled": true
										},
										{
											"key": "excludeQuantityRule",
											"value": "<boolean>",
											"disabled": true
										},
										{
											"key": "excludeVariationInfo",
											"value": "<boolean>",
											"disabled": true
										},
										{
											"key": "fields",
											"value": "[]",
											"disabled": true
										},
										{
											"key": "mediaGroups",
											"value": "[]",
											"disabled": true
										}
									]
								},
								"description": "Fetch standard field data, custom field data, and enrichment data for a single Product, identified by the variable _productId_ that was set by the search products request."
							},
							"response": []
						},
						{
							"name": "7. Get Active Cart",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log('7. Get Active Cart Pre-request Script...');\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											"\r",
											"pm.collectionVariables.set('_cartStateOrId', 'active');\r",
											"\r",
											"// Expected strings in environment variables\r",
											"['orgHostMySalesforceFormat','apiVersion'].forEach(esiev => {\r",
											"    if(!pm.environment.has(esiev)) {\r",
											"        const msg = 'Expected Postman environment variable not found: ' + esiev;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
											"});\r",
											"\r",
											"// Expected strings in collection variables\r",
											"['_webStoreId', '_productId', '_token', '_cartStateOrId'].forEach(esicv => {\r",
											"    if(!pm.collectionVariables.has(esicv)) {\r",
											"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log('7. Get Active Cart Tests...');\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Response is valid and has a JSON body', () => {\r",
											"    pm.response.to.be.success;\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test('Validate the response contains a cart Id and set the collection variables', () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.cartId).to.exist;\r",
											"    pm.expect(jsonData.cartId).to.be.an('string');\r",
											"    pm.collectionVariables.set('_cartStateOrId', jsonData.cartId);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{orgHostMySalesforceFormat}}/services/data/v{{apiVersion}}/commerce/webstores/{{_webStoreId}}/carts/{{_cartStateOrId}}",
									"host": [
										"{{orgHostMySalesforceFormat}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"commerce",
										"webstores",
										"{{_webStoreId}}",
										"carts",
										"{{_cartStateOrId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "8. Delete Cart (demonstration purposes) - Draft",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log('8. Delete Cart Pre-request Script...');\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											"\r",
											"// Expected strings in environment variables\r",
											"['orgHostMySalesforceFormat','apiVersion'].forEach(esiev => {\r",
											"    if(!pm.environment.has(esiev)) {\r",
											"        const msg = 'Expected Postman environment variable not found: ' + esiev;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
											"});\r",
											"\r",
											"// Expected strings in collection variables\r",
											"['_webStoreId', '_productId', '_token','_cartStateOrId'].forEach(esicv => {\r",
											"    if(!pm.collectionVariables.has(esicv)) {\r",
											"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log('8. Delete Cart Tests...');\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Response is valid and has a JSON body', () => {\r",
											"    pm.response.to.be.success;\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.collectionVariables.set('_cartId', undefined);\r",
											"\r",
											"/*\r",
											"pm.test('Validate the response', () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.defaultImage).to.exist;\r",
											"    pm.expect(jsonData.defaultImage).to.be.an('object').with.property('id').to.be.an('string');\r",
											"\r",
											"    pm.expect(jsonData.fields).to.exist;\r",
											"    pm.expect(jsonData.fields).to.be.an('object').with.property('Name').to.be.an('string');\r",
											"    pm.expect(jsonData.fields).to.be.an('object').with.property('Description').to.be.an('string');\r",
											"    pm.expect(jsonData.fields).to.be.an('object').with.property('LastModifiedDate').to.match(/\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}Z/);\r",
											"    \r",
											"    pm.expect(jsonData.mediaGroups).to.exist;\r",
											"    pm.expect(jsonData.mediaGroups).to.be.an('array');\r",
											"    pm.expect(jsonData.mediaGroups[0]).to.be.an('object').with.property('id').to.be.an('string');\r",
											"    pm.expect(jsonData.mediaGroups[0].mediaItems[0]).to.be.an('object').with.property('url').to.be.an('string');\r",
											"    pm.expect(jsonData.mediaGroups[0].mediaItems[0]).to.be.an('object').with.property('mediaType').to.be.an('string');\r",
											"});\r",
											"*/\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{orgHostMySalesforceFormat}}/services/data/v{{apiVersion}}/commerce/webstores/{{_webStoreId}}/carts/{{_cartStateOrId}}",
									"host": [
										"{{orgHostMySalesforceFormat}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"commerce",
										"webstores",
										"{{_webStoreId}}",
										"carts",
										"{{_cartStateOrId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "9. Create Cart (demonstration purposes) - Draft",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log('9. Create Cart Pre-request Script...');\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											"\r",
											"// Expected strings in environment variables\r",
											"['orgHostMySalesforceFormat','apiVersion'].forEach(esiev => {\r",
											"    if(!pm.environment.has(esiev)) {\r",
											"        const msg = 'Expected Postman environment variable not found: ' + esiev;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
											"});\r",
											"\r",
											"// Expected strings in collection variables\r",
											"['_webStoreId', '_token'].forEach(esicv => {\r",
											"    if(!pm.collectionVariables.has(esicv)) {\r",
											"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log('9. Create Cart Tests...');\r",
											"\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test('Response is valid and has a JSON body', () => {\r",
											"    pm.response.to.be.success;\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test('Validate the response contains a cart Id and set the collection variables', () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const cartId = jsonData.cartId;\r",
											"    console.log('CART ID: ' + cartId);\r",
											"    pm.expect(jsonData.cartId).to.exist;\r",
											"    pm.expect(jsonData.cartId).to.be.an('string');\r",
											"    pm.collectionVariables.set('_cartStateOrId', jsonData.cartId);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"name\":\"Postman Cart\",\r\n   \"type\":\"Cart\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{orgHostMySalesforceFormat}}/services/data/v{{apiVersion}}/commerce/webstores/{{_webStoreId}}/carts",
									"host": [
										"{{orgHostMySalesforceFormat}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"commerce",
										"webstores",
										"{{_webStoreId}}",
										"carts"
									]
								}
							},
							"response": []
						},
						{
							"name": "10. Add single Product to Cart",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log('10. Add single Product to Cart Pre-request Script...');\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											"\r",
											"// Expected strings in environment variables\r",
											"['orgHostMySalesforceFormat','apiVersion'].forEach(esiev => {\r",
											"    if(!pm.environment.has(esiev)) {\r",
											"        const msg = 'Expected Postman environment variable not found: ' + esiev;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
											"});\r",
											"\r",
											"// Expected strings in collection variables\r",
											"['_webStoreId', '_token', '_cartStateOrId'].forEach(esicv => {\r",
											"    if(!pm.collectionVariables.has(esicv)) {\r",
											"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log('10. Add single Product to Cart Tests...');\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Response is valid and has a JSON body', () => {\r",
											"    pm.response.to.be.success;\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test('Validate the response', () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.defaultImage).to.exist;\r",
											"    pm.expect(jsonData.defaultImage).to.be.an('object').with.property('id').to.be.an('string');\r",
											"\r",
											"    pm.expect(jsonData.fields).to.exist;\r",
											"    pm.expect(jsonData.fields).to.be.an('object').with.property('Name').to.be.an('string');\r",
											"    pm.expect(jsonData.fields).to.be.an('object').with.property('Description').to.be.an('string');\r",
											"    pm.expect(jsonData.fields).to.be.an('object').with.property('LastModifiedDate').to.match(/\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}Z/);\r",
											"    \r",
											"    pm.expect(jsonData.mediaGroups).to.exist;\r",
											"    pm.expect(jsonData.mediaGroups).to.be.an('array');\r",
											"    pm.expect(jsonData.mediaGroups[0]).to.be.an('object').with.property('id').to.be.an('string');\r",
											"    pm.expect(jsonData.mediaGroups[0].mediaItems[0]).to.be.an('object').with.property('url').to.be.an('string');\r",
											"    pm.expect(jsonData.mediaGroups[0].mediaItems[0]).to.be.an('object').with.property('mediaType').to.be.an('string');\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"productId\": \"{{_productId}}\",\r\n   \"quantity\":\"1\",\r\n   \"type\":\"Product\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{orgHostMySalesforceFormat}}/services/data/v{{apiVersion}}/commerce/webstores/{{_webstoreId}}/carts/{{_cartStateOrId}}/cart-items",
									"host": [
										"{{orgHostMySalesforceFormat}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"commerce",
										"webstores",
										"{{_webstoreId}}",
										"carts",
										"{{_cartStateOrId}}",
										"cart-items"
									]
								}
							},
							"response": []
						},
						{
							"name": "11. Start Checkout",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"let checkoutId = pm.response.json().checkoutId;",
											"const context = pm.environment.name ? pm.environment : pm.collectionVariables;",
											"context.set('_checkoutId', checkoutId);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log('10. Add single Product to Cart Pre-request Script...');\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											"\r",
											"// Expected strings in environment variables\r",
											"['orgHostMySalesforceFormat','apiVersion'].forEach(esiev => {\r",
											"    if(!pm.environment.has(esiev)) {\r",
											"        const msg = 'Expected Postman environment variable not found: ' + esiev;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
											"});\r",
											"\r",
											"// Expected strings in collection variables\r",
											"['_webStoreId', '_token', '_cartStateOrId'].forEach(esicv => {\r",
											"    if(!pm.collectionVariables.has(esicv)) {\r",
											"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"cartId\":\"{{_cartId}}\"}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{orgUrl}}/services/data/v{{apiVersion}}/commerce/webstores/{{webstoreId}}/checkouts/",
									"host": [
										"{{orgUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"commerce",
										"webstores",
										"{{webstoreId}}",
										"checkouts",
										""
									]
								},
								"description": "Starts a checkout for the cart identified by the variable __cartId_. Sets the checkout identifier in the variable __checkoutId_."
							},
							"response": []
						},
						{
							"name": "12. Get Shipping Addresses",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const responseJson = pm.response.json();",
											"const addressList = responseJson.items;",
											"const context = pm.environment.name ? pm.environment : pm.collectionVariables;",
											"context.set('_addressId', addressList[0].addressId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log('10. Add single Product to Cart Pre-request Script...');\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											"\r",
											"// Expected strings in environment variables\r",
											"['orgHostMySalesforceFormat','apiVersion'].forEach(esiev => {\r",
											"    if(!pm.environment.has(esiev)) {\r",
											"        const msg = 'Expected Postman environment variable not found: ' + esiev;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
											"});\r",
											"\r",
											"// Expected strings in collection variables\r",
											"['_webStoreId', '_token', '_cartStateOrId'].forEach(esicv => {\r",
											"    if(!pm.collectionVariables.has(esicv)) {\r",
											"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{orgUrl}}/services/data/v{{apiVersion}}/commerce/webstores/{{webstoreId}}/accounts/{{buyerAccountId}}/addresses?addressType=Shipping&sortOrder=CreatedDateDesc&excludeUnsupportedCountries=true",
									"host": [
										"{{orgUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"commerce",
										"webstores",
										"{{webstoreId}}",
										"accounts",
										"{{buyerAccountId}}",
										"addresses"
									],
									"query": [
										{
											"key": "addressType",
											"value": "Shipping"
										},
										{
											"key": "sortOrder",
											"value": "CreatedDateDesc"
										},
										{
											"key": "excludeUnsupportedCountries",
											"value": "true"
										}
									]
								},
								"description": "Returns all of the shipping addresses associated with the buyer account identified through the _buyerAccountId_ variable. Sets the __addressId_ variable to the last created shipping address for that buyer account."
							},
							"response": []
						},
						{
							"name": "13. Add Shipping Address (demonstration purposes)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"const responseJson = pm.response.json();",
											"const context = pm.environment.name ? pm.environment : pm.collectionVariables;",
											"context.set('_addressId', responseJson.addressId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log('10. Add single Product to Cart Pre-request Script...');\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											"\r",
											"// Expected strings in environment variables\r",
											"['orgHostMySalesforceFormat','apiVersion'].forEach(esiev => {\r",
											"    if(!pm.environment.has(esiev)) {\r",
											"        const msg = 'Expected Postman environment variable not found: ' + esiev;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
											"});\r",
											"\r",
											"// Expected strings in collection variables\r",
											"['_webStoreId', '_token', '_cartStateOrId'].forEach(esicv => {\r",
											"    if(!pm.collectionVariables.has(esicv)) {\r",
											"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"city\":\"Boston\",\n  \"country\":\"US\",\n  \"isDefault\":false,\n  \"name\":\"Home Address\",\n  \"postalCode\":\"01234\",\n  \"region\":\"MA\",\n  \"street\":\"1 Milk Street\",\n  \"addressType\": \"Shipping\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{orgUrl}}/services/data/v{{apiVersion}}/commerce/webstores/{{webstoreId}}/accounts/{{buyerAccountId}}/addresses",
									"host": [
										"{{orgUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"commerce",
										"webstores",
										"{{webstoreId}}",
										"accounts",
										"{{buyerAccountId}}",
										"addresses"
									]
								},
								"description": "Adds a shipping address associated with the buyer account (variable _buyerAccountId_) and stores the address identifier into the variable __addressId_."
							},
							"response": []
						},
						{
							"name": "14. Update Shipping Address (demonstration purposes)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"const responseJson = pm.response.json();",
											"const context = pm.environment.name ? pm.environment : pm.collectionVariables;",
											"context.set('_addressId', responseJson.addressId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log('10. Add single Product to Cart Pre-request Script...');\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											"\r",
											"// Expected strings in environment variables\r",
											"['orgHostMySalesforceFormat','apiVersion'].forEach(esiev => {\r",
											"    if(!pm.environment.has(esiev)) {\r",
											"        const msg = 'Expected Postman environment variable not found: ' + esiev;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
											"});\r",
											"\r",
											"// Expected strings in collection variables\r",
											"['_webStoreId', '_token', '_cartStateOrId'].forEach(esicv => {\r",
											"    if(!pm.collectionVariables.has(esicv)) {\r",
											"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"city\":\"Boston\",\n  \"country\":\"US\",\n  \"isDefault\":false,\n  \"name\":\"Home Address\",\n  \"postalCode\":\"01234\",\n  \"region\":\"MA\",\n  \"street\":\"123 Main Street\",\n  \"addressType\": \"Shipping\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{orgUrl}}/services/data/v{{apiVersion}}/commerce/webstores/{{webstoreId}}/accounts/{{buyerAccountId}}/addresses/:addressId",
									"host": [
										"{{orgUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"commerce",
										"webstores",
										"{{webstoreId}}",
										"accounts",
										"{{buyerAccountId}}",
										"addresses",
										":addressId"
									],
									"variable": [
										{
											"key": "addressId",
											"value": "{{_addressId}}"
										}
									]
								},
								"description": "Adds a shipping address associated with the buyer account (variable _buyerAccountId_) and stores the address identifier into the variable __addressId_."
							},
							"response": []
						},
						{
							"name": "15. Apply Shipping Address to Checkout",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log('10. Add single Product to Cart Pre-request Script...');\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											"\r",
											"// Expected strings in environment variables\r",
											"['orgHostMySalesforceFormat','apiVersion'].forEach(esiev => {\r",
											"    if(!pm.environment.has(esiev)) {\r",
											"        const msg = 'Expected Postman environment variable not found: ' + esiev;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
											"});\r",
											"\r",
											"// Expected strings in collection variables\r",
											"['_webStoreId', '_token', '_cartStateOrId'].forEach(esicv => {\r",
											"    if(!pm.collectionVariables.has(esicv)) {\r",
											"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"deliveryAddress\": {\n    \"id\": \"{{_addressId}}\"\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{orgUrl}}/services/data/v{{apiVersion}}/commerce/webstores/{{webstoreId}}/checkouts/:checkoutId",
									"host": [
										"{{orgUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"commerce",
										"webstores",
										"{{webstoreId}}",
										"checkouts",
										":checkoutId"
									],
									"variable": [
										{
											"key": "checkoutId",
											"value": "{{_checkoutId}}"
										}
									]
								},
								"description": "Sets the ship-to address associated with the checkout (variable _checkoutId) to the_ address found/created in a previous request (variable __addressId)_."
							},
							"response": []
						},
						{
							"name": "16. Get Checkout",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log('10. Add single Product to Cart Pre-request Script...');\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											"\r",
											"// Expected strings in environment variables\r",
											"['orgHostMySalesforceFormat','apiVersion'].forEach(esiev => {\r",
											"    if(!pm.environment.has(esiev)) {\r",
											"        const msg = 'Expected Postman environment variable not found: ' + esiev;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
											"});\r",
											"\r",
											"// Expected strings in collection variables\r",
											"['_webStoreId', '_token', '_cartStateOrId'].forEach(esicv => {\r",
											"    if(!pm.collectionVariables.has(esicv)) {\r",
											"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{orgUrl}}/services/data/v{{apiVersion}}/commerce/webstores/{{webstoreId}}/checkouts/:checkoutId",
									"host": [
										"{{orgUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"commerce",
										"webstores",
										"{{webstoreId}}",
										"checkouts",
										":checkoutId"
									],
									"variable": [
										{
											"key": "checkoutId",
											"value": "{{_checkoutId}}"
										}
									]
								},
								"description": "Retrieves the checkout (variable __checkoutId_)."
							},
							"response": []
						},
						{
							"name": "17. Create Payment",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"const responseJson = pm.response.json();",
											"let paymentToken = responseJson.token;",
											"const context = pm.environment.name ? pm.environment : pm.collectionVariables;",
											"context.set('_paymentToken', paymentToken);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log('10. Add single Product to Cart Pre-request Script...');\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											"\r",
											"// Expected strings in environment variables\r",
											"['orgHostMySalesforceFormat','apiVersion'].forEach(esiev => {\r",
											"    if(!pm.environment.has(esiev)) {\r",
											"        const msg = 'Expected Postman environment variable not found: ' + esiev;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
											"});\r",
											"\r",
											"// Expected strings in collection variables\r",
											"['_webStoreId', '_token', '_cartStateOrId'].forEach(esicv => {\r",
											"    if(!pm.collectionVariables.has(esicv)) {\r",
											"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"billingAddress\":{\n      \"name\":\"John Doe\",\n      \"street\":\"123 Acme Drive\",\n      \"city\":\"Los Angeles\",\n      \"country\":\"United States\",\n      \"postalCode\":\"90001\"\n   },\n  \"cardPaymentMethod\": {\n    \"cardHolderName\": \"John Doe Guest\",\n    \"cardNumber\": \"4242424242424242\",\n    \"expiryMonth\": 12,\n    \"expiryYear\": 2029,\n    \"cvv\": 111,\n    \"cardType\": \"Visa\"\n    }\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{orgUrl}}/services/data/v{{apiVersion}}/commerce/webstores/{{webstoreId}}/payments/token",
									"host": [
										"{{orgUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"commerce",
										"webstores",
										"{{webstoreId}}",
										"payments",
										"token"
									]
								},
								"description": "Perform a server-side payment and store the created payment token in the variable __paymentToken_.\n\nNote: The sample payment gateway included in the store creation simply returns a dummy token."
							},
							"response": []
						},
						{
							"name": "18. Apply Payment to Checkout",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log('10. Add single Product to Cart Pre-request Script...');\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											"\r",
											"// Expected strings in environment variables\r",
											"['orgHostMySalesforceFormat','apiVersion'].forEach(esiev => {\r",
											"    if(!pm.environment.has(esiev)) {\r",
											"        const msg = 'Expected Postman environment variable not found: ' + esiev;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
											"});\r",
											"\r",
											"// Expected strings in collection variables\r",
											"['_webStoreId', '_token', '_cartStateOrId'].forEach(esicv => {\r",
											"    if(!pm.collectionVariables.has(esicv)) {\r",
											"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"paymentToken\":\"{{_paymentToken}}\",\n   \"requestType\":\"Auth\",\n   \"billingAddress\":{\n      \"name\":\"John Doe\",\n      \"street\":\"123 Acme Drive\",\n      \"city\":\"Los Angeles\",\n      \"region\":\"California\",\n      \"country\":\"United States\",\n      \"postalCode\":\"90001\"\n   }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{orgUrl}}/services/data/v{{apiVersion}}/commerce/webstores/{{webstoreId}}/checkouts/:checkoutId/payments",
									"host": [
										"{{orgUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"commerce",
										"webstores",
										"{{webstoreId}}",
										"checkouts",
										":checkoutId",
										"payments"
									],
									"variable": [
										{
											"key": "checkoutId",
											"value": "{{_checkoutId}}"
										}
									]
								},
								"description": "Applies the payment token (variable __paymentToken_) to the checkout (variable __checkoutId_). Also sets the billing address.\n\nNote: No checking will be done for the validity of the billing address or token. This uses the sample SalesforceAdapter provided in the sample store."
							},
							"response": []
						},
						{
							"name": "19. Create Order",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log('10. Add single Product to Cart Pre-request Script...');\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											"\r",
											"// Expected strings in environment variables\r",
											"['orgHostMySalesforceFormat','apiVersion'].forEach(esiev => {\r",
											"    if(!pm.environment.has(esiev)) {\r",
											"        const msg = 'Expected Postman environment variable not found: ' + esiev;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
											"});\r",
											"\r",
											"// Expected strings in collection variables\r",
											"['_webStoreId', '_token', '_cartStateOrId'].forEach(esicv => {\r",
											"    if(!pm.collectionVariables.has(esicv)) {\r",
											"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{orgUrl}}/services/data/v{{apiVersion}}/commerce/webstores/{{webstoreId}}/checkouts/:_checkoutId/orders",
									"host": [
										"{{orgUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"commerce",
										"webstores",
										"{{webstoreId}}",
										"checkouts",
										":_checkoutId",
										"orders"
									],
									"variable": [
										{
											"key": "_checkoutId",
											"value": "{{_checkoutId}}"
										}
									]
								},
								"description": "Checkout Payments Action"
							},
							"response": []
						},
						{
							"name": "20. Get Order Summaries",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log('10. Add single Product to Cart Pre-request Script...');\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											"\r",
											"// Expected strings in environment variables\r",
											"['orgHostMySalesforceFormat','apiVersion'].forEach(esiev => {\r",
											"    if(!pm.environment.has(esiev)) {\r",
											"        const msg = 'Expected Postman environment variable not found: ' + esiev;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
											"});\r",
											"\r",
											"// Expected strings in collection variables\r",
											"['_webStoreId', '_token', '_cartStateOrId'].forEach(esicv => {\r",
											"    if(!pm.collectionVariables.has(esicv)) {\r",
											"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{orgUrl}}/services/data/v{{apiVersion}}/commerce/webstores/{{_webStoreId}}/order-summaries",
									"host": [
										"{{orgUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"commerce",
										"webstores",
										"{{_webStoreId}}",
										"order-summaries"
									]
								},
								"description": "Get all of the order summaries (i.e., placed orders) from the webstore."
							},
							"response": []
						}
					]
				},
				{
					"name": "Guest - DRAFT",
					"item": []
				},
				{
					"name": "Authenticated Cancel Checkout Happy Path - DRAFT",
					"item": [
						{
							"name": "1. Clear Collection Variables",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log('1. Clear Collection Variables Pre-request Script...');\r",
											"\r",
											"// Check for environment selection\r",
											"if(pm.environment.name === undefined) {\r",
											"    const msg = 'No Postman environment selected or set.';\r",
											"    pm.expect.fail(msg);\r",
											"}\r",
											"\r",
											"// Clean up the variables from the collection set throughout the various calls\r",
											"pm.collectionVariables.clear();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log('1. Clear Collection Variables Tests...');\r",
											"\r",
											"pm.test('Make sure collection variables are clean', () => {\r",
											"    pm.expect(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value)).to.be.an('array').empty;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "postman-echo.com/get",
									"host": [
										"postman-echo",
										"com"
									],
									"path": [
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "2. Log in as System Administrator (SOAP)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log('2. Log in as System Administrator Tests...');\r",
											"\r",
											"pm.test('Status code is 200', () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Validate the access token is found in the body and save it to the variables', () => {\r",
											"    const result = xml2Json(pm.response.text())['soapenv:Envelope']['soapenv:Body'].loginResponse.result;\r",
											"    const url = result.serverUrl.split('/');\r",
											"\r",
											"    pm.expect(result.sessionId).to.exist;\r",
											"    pm.expect(result.sessionId).to.be.a.string;\r",
											"\r",
											"    pm.collectionVariables.set('_token', result.sessionId);\r",
											"    pm.collectionVariables.set('_instanceUrl', url[0] + '//' + url[2]);\r",
											"    pm.collectionVariables.set('_userId', result.userId);\r",
											"    pm.collectionVariables.set('_orgId', result.userInfo.organizationId);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log('2. Log in as System Administrator Pre-request Script...');\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											"\r",
											"['orgLoginUrl','apiVersion'].forEach(esiev => {\r",
											"    if(!pm.environment.has(esiev)) {\r",
											"        const msg = 'Expected Postman environment variable not found: ' + esiev;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "text/xml; charset=UTF-8",
										"type": "text"
									},
									{
										"key": "SOAPAction",
										"value": "login",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "text/xml",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\r\n<env:Envelope xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"\r\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n    xmlns:n1=\"urn:partner.soap.sforce.com\"\r\n    xmlns:env=\"http://schemas.xmlsoap.org/soap/envelope/\">\r\n    <env:Body>\r\n        <n1:login>\r\n            <n1:username><![CDATA[{{orgAdminUsername}}]]></n1:username>\r\n            <n1:password><![CDATA[{{orgAdminPassword}}]]></n1:password>\r\n        </n1:login>\r\n    </env:Body>\r\n</env:Envelope>"
								},
								"url": {
									"raw": "{{orgLoginUrl}}/services/Soap/u/{{apiVersion}}",
									"host": [
										"{{orgLoginUrl}}"
									],
									"path": [
										"services",
										"Soap",
										"u",
										"{{apiVersion}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "3. Set WebStoreId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log('3. Set WebStoreId Tests...');\r",
											"\r",
											"pm.test('Status code is 200', () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Response is valid and has a JSON body', () => {\r",
											"     pm.response.to.be.success;\r",
											"     pm.response.to.be.withBody;\r",
											"     pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test('Validate the response and saves the WebStore Id in the collection variables', () => {\r",
											"    const data = pm.response.json();\r",
											"    pm.expect(data.records).to.exist;\r",
											"    pm.expect(data.records).to.be.an('array');\r",
											"    pm.expect(data.records.length).to.eql(1);\r",
											"    const webStore = data.records[0];\r",
											"    pm.expect(webStore.Id).to.exist;\r",
											"    pm.expect(webStore.Id).to.be.an('string');\r",
											"    pm.collectionVariables.set('_webStoreId', webStore.Id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log('3. Set WebStoreId Pre-request Script...');\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											"\r",
											"['orgLoginUrl','apiVersion', 'webStoreName'].forEach(esiev => {\r",
											"    if(!pm.environment.has(esiev)) {\r",
											"       const msg = 'Expected Postman environment variable not found: ' + esiev;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
											"});\r",
											"\r",
											"['_instanceUrl'].forEach(esicv => {\r",
											"    if(pm.collectionVariables.get(esicv) === undefined) {\r",
											"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{_instanceUrl}}/services/data/v{{apiVersion}}/query/?q=SELECT+Id,+Name+FROM+WebStore+WHERE+Name+=+'{{webStoreName}}'",
									"host": [
										"{{_instanceUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"query",
										""
									],
									"query": [
										{
											"key": "q",
											"value": "SELECT+Id,+Name+FROM+WebStore+WHERE+Name+=+'{{webStoreName}}'"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "4. Login as Buyer (SOAP)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log('3. Login as Buyer (SOAP) Tests...');",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Validate the access token is found in the body and save it to a collection variable', () => {",
											"    ",
											"    const result = xml2Json(pm.response.text())['soapenv:Envelope']['soapenv:Body'].loginResponse.result;",
											"    const url = result.serverUrl.split('/');",
											"",
											"    pm.expect(result.sessionId).to.exist;",
											"    pm.expect(result.sessionId).to.be.a.string;",
											"",
											"    pm.collectionVariables.set('_token', result.sessionId);",
											"    pm.collectionVariables.set('_instanceUrl', url[0] + '//' + url[2]);",
											"    pm.collectionVariables.set('_userId', result.userId);",
											"    pm.collectionVariables.set('_orgId', result.userInfo.organizationId);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log('3. Login as Buyer (SOAP) Pre-request Script...');\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											"\r",
											"['orgLoginUrl','apiVersion'].forEach(esiev => {\r",
											"    if(!pm.environment.has(esiev)) {\r",
											"        const msg = 'Expected Postman environment variable not found: ' + esiev;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
											"});\r",
											"\r",
											"['_orgId', '_webStoreId'].forEach(esicv => {\r",
											"    if(pm.collectionVariables.get(esicv) === undefined) {\r",
											"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "text/xml; charset=UTF-8"
									},
									{
										"key": "SOAPAction",
										"value": "login"
									},
									{
										"key": "Accept",
										"value": "text/xml"
									},
									{
										"key": "Cookie",
										"value": "BrowserId=POhd6XTZEe2v6_8M7WG26g"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap:Envelope xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\" \nxmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://\nwww.w3.org/2001/XMLSchema\">\n    <soap:Header>\n        <LoginScopeHeader xmlns=\"urn:partner.soap.sforce.com\">\n            <organizationId>{{_orgId}}</organizationId>\n        </LoginScopeHeader>\n    </soap:Header>\n    <soap:Body>\n        <login xmlns=\"urn:partner.soap.sforce.com\">\n            <username><![CDATA[{{buyerUsername}}]]></username>\n            <password><![CDATA[{{buyerPassword}}]]></password>\n        </login>\n    </soap:Body>\n</soap:Envelope>"
								},
								"url": {
									"raw": "{{orgLoginUrl}}/services/Soap/u/{{apiVersion}}",
									"host": [
										"{{orgLoginUrl}}"
									],
									"path": [
										"services",
										"Soap",
										"u",
										"{{apiVersion}}"
									]
								},
								"description": "Authenticate the shopper through the variables _buyerUsername_ and _buyerPassword_. Generated session ID is saved in _accessToken for use in the other calls in the collection."
							},
							"response": []
						},
						{
							"name": "5. Search for Products Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log('5. Search for Products Tests...');",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test('Response is valid and has a JSON body', () => {",
											"    pm.response.to.be.success;",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test('Validate the response and save the product id to a collection variable', () => {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.productsPage).to.exist;",
											"    pm.expect(jsonData.productsPage).to.be.an('object');",
											"    pm.expect(jsonData.productsPage.products).to.exist;",
											"    pm.expect(jsonData.productsPage.products).to.be.an('array');",
											"    pm.expect(jsonData.productsPage.products[0]).to.exist;",
											"    pm.expect(jsonData.productsPage.products[0]).to.be.an('object');",
											"    pm.expect(jsonData.productsPage.products[0]).to.exist;",
											"    pm.expect(jsonData.productsPage.products[0].id).to.be.an('string');",
											"    pm.collectionVariables.set('_productId', jsonData.productsPage.products[0].id);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log('5. Search for Products Pre-request Script...');\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											"\r",
											"['orgHostMySalesforceFormat','apiVersion', 'productSearchTerm'].forEach(esiev => {\r",
											"    if(!pm.environment.has(esiev)) {\r",
											"        const msg = 'Expected Postman environment variable not found: ' + esiev;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
											"});\r",
											"\r",
											"['_webStoreId', '_token', '_orgId'].forEach(esicv => {\r",
											"    if(!pm.collectionVariables.has(esicv)) {\r",
											"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableUrlEncoding": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"searchTerm\": \"{{productSearchTerm}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{orgHostMySalesforceFormat}}/services/data/v{{apiVersion}}/commerce/webstores/{{_webStoreId}}/search/product-search",
									"host": [
										"{{orgHostMySalesforceFormat}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"commerce",
										"webstores",
										"{{_webStoreId}}",
										"search",
										"product-search"
									]
								},
								"description": "Uses the variable _productSearchTerm_ to search for products in the webstore. Sets the first returned product in the variable _productId_."
							},
							"response": []
						},
						{
							"name": "6. Get Product Detail",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log('6. Get Product Detail Tests...');",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Response is valid and has a JSON body', () => {",
											"    pm.response.to.be.success;",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test('Validate the response', () => {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.defaultImage).to.exist;",
											"    pm.expect(jsonData.defaultImage).to.be.an('object').with.property('id').to.be.an('string');",
											"",
											"    pm.expect(jsonData.fields).to.exist;",
											"    pm.expect(jsonData.fields).to.be.an('object').with.property('Name').to.be.an('string');",
											"    pm.expect(jsonData.fields).to.be.an('object').with.property('Description').to.be.an('string');",
											"    pm.expect(jsonData.fields).to.be.an('object').with.property('LastModifiedDate').to.match(/\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}Z/);",
											"    ",
											"    pm.expect(jsonData.mediaGroups).to.exist;",
											"    pm.expect(jsonData.mediaGroups).to.be.an('array');",
											"    pm.expect(jsonData.mediaGroups[0]).to.be.an('object').with.property('id').to.be.an('string');",
											"    pm.expect(jsonData.mediaGroups[0].mediaItems[0]).to.be.an('object').with.property('url').to.be.an('string');",
											"    pm.expect(jsonData.mediaGroups[0].mediaItems[0]).to.be.an('object').with.property('mediaType').to.be.an('string');",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log('6. Get Product Detail Pre-request Script...');\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											"\r",
											"['orgHostMySalesforceFormat','apiVersion'].forEach(esiev => {\r",
											"    if(!pm.environment.has(esiev)) {\r",
											"        const msg = 'Expected Postman environment variable not found: ' + esiev;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
											"});\r",
											"\r",
											"['_webStoreId', '_productId', '_token'].forEach(esicv => {\r",
											"    if(!pm.collectionVariables.has(esicv)) {\r",
											"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{orgHostMySalesforceFormat}}/services/data/v{{apiVersion}}/commerce/webstores/{{_webStoreId}}/products/{{_productId}}",
									"host": [
										"{{orgHostMySalesforceFormat}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"commerce",
										"webstores",
										"{{_webStoreId}}",
										"products",
										"{{_productId}}"
									],
									"query": [
										{
											"key": "effectiveAccountId",
											"value": "<string>",
											"disabled": true
										},
										{
											"key": "excludeAttributeSetInfo",
											"value": "<boolean>",
											"disabled": true
										},
										{
											"key": "excludeEntitlementDetails",
											"value": "<boolean>",
											"disabled": true
										},
										{
											"key": "excludeFields",
											"value": "<boolean>",
											"disabled": true
										},
										{
											"key": "excludeMedia",
											"value": "<boolean>",
											"disabled": true
										},
										{
											"key": "excludePrimaryProductCategory",
											"value": "<boolean>",
											"disabled": true
										},
										{
											"key": "excludeProductSellingModels",
											"value": "<boolean>",
											"disabled": true
										},
										{
											"key": "excludeQuantityRule",
											"value": "<boolean>",
											"disabled": true
										},
										{
											"key": "excludeVariationInfo",
											"value": "<boolean>",
											"disabled": true
										},
										{
											"key": "fields",
											"value": "[]",
											"disabled": true
										},
										{
											"key": "mediaGroups",
											"value": "[]",
											"disabled": true
										}
									]
								},
								"description": "Fetch standard field data, custom field data, and enrichment data for a single Product, identified by the variable _productId_ that was set by the search products request."
							},
							"response": []
						},
						{
							"name": "7. Get Active Cart",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log('7. Get Active Cart Pre-request Script...');\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											"\r",
											"pm.collectionVariables.set('_cartStateOrId', 'active');\r",
											"\r",
											"const expectedStringsInEnvironmentVariables = ['orgHostMySalesforceFormat','apiVersion'];\r",
											"expectedStringsInEnvironmentVariables.forEach(esiev => {\r",
											"    if(!pm.environment.has(esiev)) {\r",
											"        const msg = 'Expected Postman environment variable not found: ' + esiev;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
											"});\r",
											"\r",
											"const expectedStringsInCollectionVariables = ['_webStoreId', '_productId', '_token', '_cartStateOrId'];\r",
											"expectedStringsInCollectionVariables.forEach(esicv => {\r",
											"    if(!pm.collectionVariables.has(esicv)) {\r",
											"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log('7. Get Active Cart Tests...');\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Response is valid and has a JSON body', () => {\r",
											"    pm.response.to.be.success;\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test('Validate the response contains a cart Id and set the collection variables', () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.cartId).to.exist;\r",
											"    pm.expect(jsonData.cartId).to.be.an('string');\r",
											"    pm.collectionVariables.set('_cartStateOrId', jsonData.cartId);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{orgHostMySalesforceFormat}}/services/data/v{{apiVersion}}/commerce/webstores/{{_webStoreId}}/carts/{{_cartStateOrId}}",
									"host": [
										"{{orgHostMySalesforceFormat}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"commerce",
										"webstores",
										"{{_webStoreId}}",
										"carts",
										"{{_cartStateOrId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "8. Delete Cart (demonstration purposes) - Draft",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log('8. Delete Cart Pre-request Script...');\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											"\r",
											"const expectedStringsInEnvironmentVariables = ['orgHostMySalesforceFormat','apiVersion'];\r",
											"expectedStringsInEnvironmentVariables.forEach(esiev => {\r",
											"    if(!pm.environment.has(esiev)) {\r",
											"        const msg = 'Expected Postman environment variable not found: ' + esiev;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
											"});\r",
											"\r",
											"//const expectedStringsInCollectionVariables = ['_webStoreId', '_productId', '_token', '_cartId'];\r",
											"const expectedStringsInCollectionVariables = ['_webStoreId', '_productId', '_token','_cartStateOrId'];\r",
											"expectedStringsInCollectionVariables.forEach(esicv => {\r",
											"    if(!pm.collectionVariables.has(esicv)) {\r",
											"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log('8. Delete Cart Tests...');\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Response is valid and has a JSON body', () => {\r",
											"    pm.response.to.be.success;\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.collectionVariables.set('_cartId', undefined);\r",
											"\r",
											"/*\r",
											"pm.test('Validate the response', () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.defaultImage).to.exist;\r",
											"    pm.expect(jsonData.defaultImage).to.be.an('object').with.property('id').to.be.an('string');\r",
											"\r",
											"    pm.expect(jsonData.fields).to.exist;\r",
											"    pm.expect(jsonData.fields).to.be.an('object').with.property('Name').to.be.an('string');\r",
											"    pm.expect(jsonData.fields).to.be.an('object').with.property('Description').to.be.an('string');\r",
											"    pm.expect(jsonData.fields).to.be.an('object').with.property('LastModifiedDate').to.match(/\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}Z/);\r",
											"    \r",
											"    pm.expect(jsonData.mediaGroups).to.exist;\r",
											"    pm.expect(jsonData.mediaGroups).to.be.an('array');\r",
											"    pm.expect(jsonData.mediaGroups[0]).to.be.an('object').with.property('id').to.be.an('string');\r",
											"    pm.expect(jsonData.mediaGroups[0].mediaItems[0]).to.be.an('object').with.property('url').to.be.an('string');\r",
											"    pm.expect(jsonData.mediaGroups[0].mediaItems[0]).to.be.an('object').with.property('mediaType').to.be.an('string');\r",
											"});\r",
											"*/\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{orgHostMySalesforceFormat}}/services/data/v{{apiVersion}}/commerce/webstores/{{_webStoreId}}/carts/{{_cartStateOrId}}",
									"host": [
										"{{orgHostMySalesforceFormat}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"commerce",
										"webstores",
										"{{_webStoreId}}",
										"carts",
										"{{_cartStateOrId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "9. Create Cart (demonstration purposes) - Draft",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log('9. Create Cart Pre-request Script...');\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											"\r",
											"const expectedStringsInEnvironmentVariables = ['orgHostMySalesforceFormat','apiVersion'];\r",
											"expectedStringsInEnvironmentVariables.forEach(esiev => {\r",
											"    if(!pm.environment.has(esiev)) {\r",
											"        const msg = 'Expected Postman environment variable not found: ' + esiev;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
											"});\r",
											"\r",
											"const expectedStringsInCollectionVariables = ['_webStoreId', '_token'];\r",
											"expectedStringsInCollectionVariables.forEach(esicv => {\r",
											"    if(!pm.collectionVariables.has(esicv)) {\r",
											"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log('9. Create Cart Tests...');\r",
											"\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test('Response is valid and has a JSON body', () => {\r",
											"    pm.response.to.be.success;\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test('Validate the response contains a cart Id and set the collection variables', () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const cartId = jsonData.cartId;\r",
											"    console.log('CART ID: ' + cartId);\r",
											"    pm.expect(jsonData.cartId).to.exist;\r",
											"    pm.expect(jsonData.cartId).to.be.an('string');\r",
											"    pm.collectionVariables.set('_cartStateOrId', jsonData.cartId);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"name\":\"Postman Cart\",\r\n   \"type\":\"Cart\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{orgHostMySalesforceFormat}}/services/data/v{{apiVersion}}/commerce/webstores/{{_webStoreId}}/carts",
									"host": [
										"{{orgHostMySalesforceFormat}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"commerce",
										"webstores",
										"{{_webStoreId}}",
										"carts"
									]
								}
							},
							"response": []
						},
						{
							"name": "10. Add single Product to Cart",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log('10. Add single Product to Cart Pre-request Script...');\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											"\r",
											"const expectedStringsInEnvironmentVariables = ['orgHostMySalesforceFormat','apiVersion'];\r",
											"expectedStringsInEnvironmentVariables.forEach(esiev => {\r",
											"    if(!pm.environment.has(esiev)) {\r",
											"        const msg = 'Expected Postman environment variable not found: ' + esiev;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
											"});\r",
											"\r",
											"const expectedStringsInCollectionVariables = ['_webStoreId', '_token', '_cartStateOrId'];\r",
											"expectedStringsInCollectionVariables.forEach(esicv => {\r",
											"    if(!pm.collectionVariables.has(esicv)) {\r",
											"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log('10. Add single Product to Cart Tests...');\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Response is valid and has a JSON body', () => {\r",
											"    pm.response.to.be.success;\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test('Validate the response', () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.defaultImage).to.exist;\r",
											"    pm.expect(jsonData.defaultImage).to.be.an('object').with.property('id').to.be.an('string');\r",
											"\r",
											"    pm.expect(jsonData.fields).to.exist;\r",
											"    pm.expect(jsonData.fields).to.be.an('object').with.property('Name').to.be.an('string');\r",
											"    pm.expect(jsonData.fields).to.be.an('object').with.property('Description').to.be.an('string');\r",
											"    pm.expect(jsonData.fields).to.be.an('object').with.property('LastModifiedDate').to.match(/\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}Z/);\r",
											"    \r",
											"    pm.expect(jsonData.mediaGroups).to.exist;\r",
											"    pm.expect(jsonData.mediaGroups).to.be.an('array');\r",
											"    pm.expect(jsonData.mediaGroups[0]).to.be.an('object').with.property('id').to.be.an('string');\r",
											"    pm.expect(jsonData.mediaGroups[0].mediaItems[0]).to.be.an('object').with.property('url').to.be.an('string');\r",
											"    pm.expect(jsonData.mediaGroups[0].mediaItems[0]).to.be.an('object').with.property('mediaType').to.be.an('string');\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"productId\": \"{{_productId}}\",\r\n   \"quantity\":\"1\",\r\n   \"type\":\"Product\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{orgHostMySalesforceFormat}}/services/data/v{{apiVersion}}/commerce/webstores/{{_webstoreId}}/carts/{{_cartStateOrId}}/cart-items",
									"host": [
										"{{orgHostMySalesforceFormat}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"commerce",
										"webstores",
										"{{_webstoreId}}",
										"carts",
										"{{_cartStateOrId}}",
										"cart-items"
									]
								}
							},
							"response": []
						},
						{
							"name": "11. Start Checkout",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"let checkoutId = pm.response.json().checkoutId;",
											"const context = pm.environment.name ? pm.environment : pm.collectionVariables;",
											"context.set('_checkoutId', checkoutId);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"cartId\":\"{{_cartId}}\"}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{orgUrl}}/services/data/v{{apiVersion}}/commerce/webstores/{{webstoreId}}/checkouts/",
									"host": [
										"{{orgUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"commerce",
										"webstores",
										"{{webstoreId}}",
										"checkouts",
										""
									]
								},
								"description": "Starts a checkout for the cart identified by the variable __cartId_. Sets the checkout identifier in the variable __checkoutId_."
							},
							"response": []
						},
						{
							"name": "12. Get Shipping Addresses",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const responseJson = pm.response.json();",
											"const addressList = responseJson.items;",
											"const context = pm.environment.name ? pm.environment : pm.collectionVariables;",
											"context.set('_addressId', addressList[0].addressId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{orgUrl}}/services/data/v{{apiVersion}}/commerce/webstores/{{webstoreId}}/accounts/{{buyerAccountId}}/addresses?addressType=Shipping&sortOrder=CreatedDateDesc&excludeUnsupportedCountries=true",
									"host": [
										"{{orgUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"commerce",
										"webstores",
										"{{webstoreId}}",
										"accounts",
										"{{buyerAccountId}}",
										"addresses"
									],
									"query": [
										{
											"key": "addressType",
											"value": "Shipping"
										},
										{
											"key": "sortOrder",
											"value": "CreatedDateDesc"
										},
										{
											"key": "excludeUnsupportedCountries",
											"value": "true"
										}
									]
								},
								"description": "Returns all of the shipping addresses associated with the buyer account identified through the _buyerAccountId_ variable. Sets the __addressId_ variable to the last created shipping address for that buyer account."
							},
							"response": []
						},
						{
							"name": "13. Add Shipping Address (demonstration purposes)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"const responseJson = pm.response.json();",
											"const context = pm.environment.name ? pm.environment : pm.collectionVariables;",
											"context.set('_addressId', responseJson.addressId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"city\":\"Boston\",\n  \"country\":\"US\",\n  \"isDefault\":false,\n  \"name\":\"Home Address\",\n  \"postalCode\":\"01234\",\n  \"region\":\"MA\",\n  \"street\":\"1 Milk Street\",\n  \"addressType\": \"Shipping\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{orgUrl}}/services/data/v{{apiVersion}}/commerce/webstores/{{webstoreId}}/accounts/{{buyerAccountId}}/addresses",
									"host": [
										"{{orgUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"commerce",
										"webstores",
										"{{webstoreId}}",
										"accounts",
										"{{buyerAccountId}}",
										"addresses"
									]
								},
								"description": "Adds a shipping address associated with the buyer account (variable _buyerAccountId_) and stores the address identifier into the variable __addressId_."
							},
							"response": []
						},
						{
							"name": "14. Update Shipping Address (demonstration purposes)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"const responseJson = pm.response.json();",
											"const context = pm.environment.name ? pm.environment : pm.collectionVariables;",
											"context.set('_addressId', responseJson.addressId);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"city\":\"Boston\",\n  \"country\":\"US\",\n  \"isDefault\":false,\n  \"name\":\"Home Address\",\n  \"postalCode\":\"01234\",\n  \"region\":\"MA\",\n  \"street\":\"123 Main Street\",\n  \"addressType\": \"Shipping\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{orgUrl}}/services/data/v{{apiVersion}}/commerce/webstores/{{webstoreId}}/accounts/{{buyerAccountId}}/addresses/:addressId",
									"host": [
										"{{orgUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"commerce",
										"webstores",
										"{{webstoreId}}",
										"accounts",
										"{{buyerAccountId}}",
										"addresses",
										":addressId"
									],
									"variable": [
										{
											"key": "addressId",
											"value": "{{_addressId}}"
										}
									]
								},
								"description": "Adds a shipping address associated with the buyer account (variable _buyerAccountId_) and stores the address identifier into the variable __addressId_."
							},
							"response": []
						},
						{
							"name": "15. Apply Shipping Address to Checkout",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"deliveryAddress\": {\n    \"id\": \"{{_addressId}}\"\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{orgUrl}}/services/data/v{{apiVersion}}/commerce/webstores/{{webstoreId}}/checkouts/:checkoutId",
									"host": [
										"{{orgUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"commerce",
										"webstores",
										"{{webstoreId}}",
										"checkouts",
										":checkoutId"
									],
									"variable": [
										{
											"key": "checkoutId",
											"value": "{{_checkoutId}}"
										}
									]
								},
								"description": "Sets the ship-to address associated with the checkout (variable _checkoutId) to the_ address found/created in a previous request (variable __addressId)_."
							},
							"response": []
						},
						{
							"name": "16. Get Checkout",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{orgUrl}}/services/data/v{{apiVersion}}/commerce/webstores/{{webstoreId}}/checkouts/:checkoutId",
									"host": [
										"{{orgUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"commerce",
										"webstores",
										"{{webstoreId}}",
										"checkouts",
										":checkoutId"
									],
									"variable": [
										{
											"key": "checkoutId",
											"value": "{{_checkoutId}}"
										}
									]
								},
								"description": "Retrieves the checkout (variable __checkoutId_)."
							},
							"response": []
						},
						{
							"name": "17. Create Payment",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"const responseJson = pm.response.json();",
											"let paymentToken = responseJson.token;",
											"const context = pm.environment.name ? pm.environment : pm.collectionVariables;",
											"context.set('_paymentToken', paymentToken);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"billingAddress\":{\n      \"name\":\"John Doe\",\n      \"street\":\"123 Acme Drive\",\n      \"city\":\"Los Angeles\",\n      \"country\":\"United States\",\n      \"postalCode\":\"90001\"\n   },\n  \"cardPaymentMethod\": {\n    \"cardHolderName\": \"John Doe Guest\",\n    \"cardNumber\": \"4242424242424242\",\n    \"expiryMonth\": 12,\n    \"expiryYear\": 2029,\n    \"cvv\": 111,\n    \"cardType\": \"Visa\"\n    }\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{orgUrl}}/services/data/v{{apiVersion}}/commerce/webstores/{{webstoreId}}/payments/token",
									"host": [
										"{{orgUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"commerce",
										"webstores",
										"{{webstoreId}}",
										"payments",
										"token"
									]
								},
								"description": "Perform a server-side payment and store the created payment token in the variable __paymentToken_.\n\nNote: The sample payment gateway included in the store creation simply returns a dummy token."
							},
							"response": []
						},
						{
							"name": "18. Apply Payment to Checkout",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"paymentToken\":\"{{_paymentToken}}\",\n   \"requestType\":\"Auth\",\n   \"billingAddress\":{\n      \"name\":\"John Doe\",\n      \"street\":\"123 Acme Drive\",\n      \"city\":\"Los Angeles\",\n      \"region\":\"California\",\n      \"country\":\"United States\",\n      \"postalCode\":\"90001\"\n   }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{orgUrl}}/services/data/v{{apiVersion}}/commerce/webstores/{{webstoreId}}/checkouts/:checkoutId/payments",
									"host": [
										"{{orgUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"commerce",
										"webstores",
										"{{webstoreId}}",
										"checkouts",
										":checkoutId",
										"payments"
									],
									"variable": [
										{
											"key": "checkoutId",
											"value": "{{_checkoutId}}"
										}
									]
								},
								"description": "Applies the payment token (variable __paymentToken_) to the checkout (variable __checkoutId_). Also sets the billing address.\n\nNote: No checking will be done for the validity of the billing address or token. This uses the sample SalesforceAdapter provided in the sample store."
							},
							"response": []
						},
						{
							"name": "19. Create Order",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{orgUrl}}/services/data/v{{apiVersion}}/commerce/webstores/{{webstoreId}}/checkouts/:_checkoutId/orders",
									"host": [
										"{{orgUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"commerce",
										"webstores",
										"{{webstoreId}}",
										"checkouts",
										":_checkoutId",
										"orders"
									],
									"variable": [
										{
											"key": "_checkoutId",
											"value": "{{_checkoutId}}"
										}
									]
								},
								"description": "Checkout Payments Action"
							},
							"response": []
						},
						{
							"name": "20. Get Order Summaries",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{orgUrl}}/services/data/v{{apiVersion}}/commerce/webstores/{{webstoreId}}/order-summaries",
									"host": [
										"{{orgUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"commerce",
										"webstores",
										"{{webstoreId}}",
										"order-summaries"
									]
								},
								"description": "Get all of the order summaries (i.e., placed orders) from the webstore."
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "WebStore Pricing (Log in Flow) - DRAFT",
			"item": [
				{
					"name": "1. Clear Collection Variables",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log('Clear Collection Variables Pre-request Script...');\r",
									"\r",
									"// Check for environment selection\r",
									"if(pm.environment.name === undefined) {\r",
									"    const msg = 'No Postman environment selected or set.';\r",
									"    pm.expect.fail(msg);\r",
									"}\r",
									"\r",
									"// Clean up the variables from the collection set throughout the various calls\r",
									"pm.collectionVariables.clear();"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log('Clear Collection Variables Tests...');\r",
									"\r",
									"pm.test('Make sure collection variables are clean', () => {\r",
									"    pm.expect(JSON.parse(JSON.stringify(pm.collectionVariables.values)).map((v) => v.key + ': ' + v.value)).to.be.an('array').empty;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "postman-echo.com/get",
							"host": [
								"postman-echo",
								"com"
							],
							"path": [
								"get"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "WebStore Pricing (oAuth Flow) - DRAFT",
			"item": [
				{
					"name": "1. Clear Collection Variables",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log('Clear Collection Variables Pre-request Script...');\r",
									"\r",
									"// Check for environment selection\r",
									"if(pm.environment.name === undefined) {\r",
									"    const msg = 'No Postman environment selected or set.';\r",
									"    pm.expect.fail(msg);\r",
									"}\r",
									"\r",
									"// Clean up the variables from the collection set throughout the various calls\r",
									"pm.collectionVariables.clear();"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log('Clear Collection Variables Tests...');\r",
									"\r",
									"pm.test('Make sure collection variables are clean', () => {\r",
									"    pm.expect(JSON.parse(JSON.stringify(pm.collectionVariables.values)).map((v) => v.key + ': ' + v.value)).to.be.an('array').empty;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "postman-echo.com/get",
							"host": [
								"postman-echo",
								"com"
							],
							"path": [
								"get"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Search Operations",
			"item": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}