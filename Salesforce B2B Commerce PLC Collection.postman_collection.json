{
	"info": {
		"_postman_id": "07f3aa13-a950-48b5-9665-6549e8dd513d",
		"name": "Salesforce B2B Commerce PLC Collection",
		"description": "# Salesforce B2B Commerce Postman Setup for Partners\n\n_Created by Tom Zarr with key contributions from Sandra Golden and Jordane Bachelet_\n\n## Background and Use Case\n\nThis material is supplemental to the B2B Commerce Partner Learning Camp curricula. See the curricula and the contained courses for the complete setup procedure of a B2B Commerce standalone environment.\n\nThis postman collection contains API endpoints from various Salesforce Commerce domains, but the emphasis is on completing B2B Commerce checkouts and performing operational tasks related to that end through the Connect API and other flavors of API available on the Salesforce platform.\n\nUnlike many other Postman collections, this one is meant to be user friendly and have meaningful error messages when something is not set up correctly or there are issues in the request chains.\n\n## ⚠️ Disclaimers\n\n- This collection is provided as-is. It's not officially supported by Salesforce or covered by SLAs.\n- API documentation is not provided with the collection. Please refer to the official documentation.\n- The documentation for the majority of the endpoints in this collection can be found in the [B2B and D2C Commerce Resources](https://developer.salesforce.com/docs/atlas.en-us.chatterapi.meta/chatterapi/connect_resources_commerce.htm) of the Connect REST API Developer Guide.\n    \n\n## What this collection is and isn't\n\nThis collection is intended to be used for a B2B standalone setup. That isn't to say you can't use it with a Salesforce Org containing other commerce products, just that B2B is what's targeted.\n\n## Approach\n\n1. I've tried to stay \"close to the metal\" by using the Postman Scripting API directly. There are a few cases where this just isn't possible or realistic because responses are not true JSON or HTTP status codes are reported in the HTML body text, but those should be true exceptions and definitely not the rule.\n2. I wanted oAuth 2.0 to be easy so I could move things around. This is my approach and it's about the best I could come up with given the limitations of the tool: Have a dummy request where you set it once in that folder then everything following just uses Bearer Token. It works and better is the enemy of good enough.\n3. The request chains are long; This is by design. At the risk of being didactic, this is ultimately a _teaching tool_. When it comes to working with APIs I find more detail is better.\n4. Collection variables are calculated and presented before each request.\n5. Tests are applied following each response. If something isn't right I want you to know about it early so I assume little to nothing about a response being successful.\n    \n\n### This collection will eventually provide the following (some are a work in progress)\n\n1. Product Search (Log In Flow)\n2. Product Search (oAuth Flow)\n3. Cart / Authenticated\n4. Cart / Guest\n5. Deployment / Payment - WIP\n6. Deployment / Register External Services - WIP\n7. Checkout / Authenticated Happy Path\n8. Checkout / Guest Happy Path\n9. Cancel Checkout / Authenticated Happy Path\n10. Cancel Checkout / Guest Happy Path\n11. Pricing / Authenticated\n12. Pricing / Guest\n13. Get Inventory Availability (Log In Flow + Connect API)\n14. Get Inventory Availability (oAuth Flow + Connect API)\n15. Search Operations (indexing for now)\n    \n\n## Connected App Requirements\n\nBecause we're using APIs you'll need to set up a Connected App in your org since Connect APIs and other flavors of APIs like SOAP may be in play.\n\nBy way of example the Omnichannel Inventory Postman Collection used two Connected Apps (one for the Headless APIs and one for the Connect APIs)\n\n- Postman_OCI\n- Postman_OCI_ConnectApi\n    \n\nYou can see the [Omnichannel Inventory Postman Setup repository here](https://github.com/tzarrsf/omnichannel-inventory-postman-setup-with-example-files/)\n\nYou will need to obtain some values from your Connected App in order to establish connectivity (see: [Variables](https://./#Variables))\n\n## Authentication Approach\n\nAuthentication is generally handled in three ways:\n\n1. Logging in as an Administrator (often used at request chain outset for lookup operations to preserve reusability across orgs). See [Logging in as an Administrator or Buyer](https://./logging-in-as-an-administrator-or-buyer).\n2. Logging in as a 'known good' Buyer (aka Contact under Account with a User). Please note that all three must be set up and this is commonly _not_ going to be the case with a System Administrator account. See [Logging in as an Administrator or Buyer](https://./logging-in-as-an-administrator-or-buyer).\n3. Establishing oAuth 2.0 _once per folder_ and then having subsequent requests set to Bearer Token in the **Authorization** tab. See [oAuth 2.0 is set once per folder where needed](https://./#oauth-20-is-set-once-per-folder-where-needed).\n    \n\n### Logging in as an Administrator or Buyer\n\nThis is handled inline. Just supply the environment with the needed variables like these and the collection and scripting should take care of the rest:\n\n| Name | Description |\n| --- | --- |\n| `orgLoginUrl` | Either `https://login.salesforce.com` (production / trial) or `https://test.salesforce.com` (sandbox) |\n| `orgHost` | Protocol and host portion of the Salesforce org's URL Example: `https://yourusername-august.lightning.force.com` |\n| `orgAdminUsername` | The System Administrator username for the Salesforce org |\n| `orgAdminPassword` | The System Administrator password for the Salesforce org |\n| `orgAdminSecurityToken` | The security token for the Salesforce Org System Administrator User |\n\nIf you need to move this type of Administrator or Buyer authentication scheme around, just copy the request and paste it into another folder or location in the current folder. Copy and paste operations are supported in Postman.\n\n### oAuth 2.0 is set once per folder where needed\n\nPlease don't take on a \"do-it-yourself\" approach with the oAuth 2.0 setup. Why?\n\n1. Most importantly, you don't need to. This has all been completed using variables. There's no guesswork on which log in needs the token appended to the password, etc.\n2. There's scripting which checks if your token set up is correct to begin making requests.\n3. Tokens are passed in subsequent requests using **Bearer Token** authentication on the requests needing it. Just turn it on - done.\n4. This was done \"by design\" so you can easily add your own requests or copy them and move them around with little to no impact whenever oAuth 2.0 is needed.\n5. You can also find and copy the requests named something like **Set your oAuth 2.0 Token in Authorization tab** whenever you need to establish oAuth 2.0 before another request or add it to a folder.\n    \n\n#### Establishing oAuth 2.0 (First Time and Details)\n\n- Look for the request with a name like **Set your oAuth 2.0 Token in Authorization tab**\n- Please don't try to do a bunch of manual work on your token setup or get fancy here. Again, it's all filled in with variables already.\n    \n\nFollow these steps to establish and use your token. These or something very similar will be provided as an error in the **Console** if there's an oAuth error state:\n\n1. Click on the Request with a name like \"Set your oAuth 2.0 Token here in Authorization tab\"\n2. Click the \"Authorization\" tab\n3. Click the \"Get New Access Token\" button\n4. Click the \"Proceed\" button\n5. Click the \"Use Token\" button\n6. Optional - Use the delete button's dropdown option to remove expired tokens (it's best to remove all of them except the newest)\n7. Retry your request(s)\n    \n\n## Error Handling\n\nIt's my intent to trap every reasonably predictable error state and save anyone using this collection time. I welcome your feedback on that front. That said, I can't cover every single org configuration or set of data and this is where you come in as a partner. Below are some of the common cases I have tried to account for so the request chains can inform you when something's wrong or at least provide hints to help troubleshoot what you're seeing.\n\n### Clear Collection Variables\n\nIt's recommended you stick to the pattern of having this as the first step in your folder as it does a few things to ensure your request chain data is kept consistent:\n\n1. The **Pre-request** tab makes sure that your environment is selected and stops the chain if not (dead programs tell no lies):\n    \n\n```\n// Check for environment selection\nif(pm.environment.name === undefined) {\n    const msg = 'No Postman environment selected or set.';\n    pm.expect.fail(msg);\n}\n\n ```\n\n1. The **Pre-request** tab makes sure that it clears out the collection variables:\n    \n\n```\n// Clean up the variables from the collection set throughout the various calls\npm.collectionVariables.clear();\n\n ```\n\n1. The **Test** tab ensures the collection is indeed empty:\n    \n\n```\npm.test('Make sure collection variables are clean', () => {\n    pm.expect(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value)).to.be.an('array').empty;\n});\n\n ```\n\n### Request names are pulled in dynamically in both the Pre-request and Test code\n\nWhatever the request is named in the Postman user interface is reflected dynamically by these code snippets:\n\n`console.log(`${pm.info.requestName} Pre-request Script...`);`\n\n`console.log(`${pm.info.requestName} Tests...`);`\n\nIf you call your request \"Heinz 57\" you will see `Heinz 57 Pre-request Script...` or `Heinz 57 Tests...` in the console accordingly. You can drill into your request and response bodies as needed knowing what was passed to the endpoint.\n\n### Requests must meet Preconditions\n\nIf **environment** variables are expected for a request they are tested on the Pre-request script tab and if not found the test run should go to a hard fail state. Just look for the error (red text) in the Console.\n\n```\n// Expected strings in environment variables\n['host', 'tenantId', 'bearerToken'].forEach(esiev => {\n    if(!pm.environment.has(esiev)) {\n        const msg = `Expected Postman environment variable not found: '${esiev}' in environment: '${pm.environment.name}'.`;\n        pm.expect.fail(msg);\n    }\n    pm.expect(pm.environment.get(esiev)).to.exist;\n    pm.expect(pm.environment.get(esiev)).to.be.an('string');\n});\n\n ```\n\nIf **collection** variables are expected they are tested on the Pre-request script tab. Like the environment variables, the test run should go to a hard fail state and you should find a _meaningful_ error in the Console.\n\n```\n// Expected strings in collection variables\n['_webStoreId', '_token', '_orgId'].forEach(esicv => {\n    if(pm.collectionVariables.get(esicv) === undefined) {\n        const msg = 'Expected Postman collection variable not found: ' + esicv;\n        pm.expect.fail(msg);\n    }\n    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\n    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\n});\n\n ```\n\n### Collection variables are listed in each Pre-request\n\nThis code snippet allows you to see things _before_ each request is made in the **Pre-Request Script** tab:\n\n```\nconsole.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\n\n ```\n\nExample of collection variables being printed to the console in a Pre-request script:\n\n```\nCollection variables before:↵\n_instanceUrl: https://toms-org.my.salesforce.com↵\n_locationGroupIdentifiers: [\"LocationGroup01\"]↵\n_orgId: 00DHn0000YYYYYYYYY↵\n_productStockKeepingUnits: [\"PROSE\",\"B-C-COFMAC-001\",\"ESP-IOT-1\",\"ID-PEM\",\"PS-EL\",\"PS-INF\",\"TR-COFMAC-001\"]↵\n_token: 0xdeadbeef!0x8badfood!0xfeedfacecafebeefx.01123581321345589144233377610↵\n_userId: 005HnXXXXXXXXXXXXX\n\n ```\n\n## Variables\n\n> ⚠️ **Note**: You must set up your environment variables correctly for all of this to work. Collection variables are typically calculated and assigned between requests (in the **Test** tab script) and used in subsequent requests. The naming convention used in the collection is to prefix collection variable keys with an underscore like `_tomsVariableKey` while an environment variable should not contain an underscore. Example: `tomsVariableKey`. I would never recommend writing to environment variables at runtime. My approach is to keep these consistent across the collection and all folders across the collection and use them only when changing orgs, storefronts or users. \n  \n\nThese are some _bad_ examples. You shouldn't see calls like these in the collection and it's strongly recommended that you do not create them this way to avoid needless debugging:\n\n1. `pm.collectionVariables.set('myVariable', 'My new value');`\n2. `pm.collectionVariables.get('myVariable');`\n3. `pm.environment.set('_myVariable', 'My new value');`\n4. `pm.environment.get('_myVariable');`\n    \n\nThese are good examples as they adhere to the established naming convention and it's clear which dictionary we're using when the name is seen in the Console:\n\n1. `pm.collectionVariables.set('_myVariable', 'My new value');`\n2. `pm.collectionVariables.get('_myVariable');`\n3. `pm.environment.set('myVariable', 'My new value');`\n4. `pm.environment.get('myVariable');`\n    \n\nEvery coder has their preferences and principles. I don't like mixing sources like dictionaries for retrieving a value by key. A value with an underscore prefix in this naming convention should correspond to pm.collectionVariables and one without should come from pm.environment. I don't use a context stand-in object that allows pulling or pushing a value by key from either pm.collectionVariables or pm.environment at runtime. I believe strongly that a few coding principals such as singular definition and not coding by coincidence - even with tests, and especially with tests can save time. If those terms are not familiar I'd like to recommend the book \"The Pragmatic Programmer\" as it could replace many on your shelf or device.\n\n### Input values\n\n#### Some Environment variables are used for lookups to support reuse\n\nThese are some examples:\n\n1. webstoreName (resolves to a WebStore Id)\n2. buyerAccountName (resolves to an Account Id)\n    \n\n#### Some Environment variables can be used to provide comma delimited values\n\n1. productNamesCommaDelimited (resolves to a list of Product2 Ids)\n2. productStockKeepingUnitsCommaDelimited (used in OCI Postman collection)\n3. locationGroupIdentifiersCommaDelimited (used in OCI Postman collection)\n4. locationIdentifiersCommaDelimited (used in OCI Postman collection)\n    \n\n#### Some Environment variables can be used to provide a single string value\n\n1. productSearchTerm\n    \n\n## Standardized variables\n\n⚠️ **Note**: The naming convention found here is used across other Salesforce Commerce product Postman collections in the Partner Readiness space when possible to support reuse and collaboration.\n\nThis Postman collection relies on the following variables:\n\n| Name | Description | Location |\n| --- | --- | --- |\n| `orgLoginUrl` | Either `https://login.salesforce.com` (production/trial) or `https://test.salesforce.com` (sandbox) | User supplied |\n| `orgHost` | Protocol and host portion of the Salesforce org's URL | User supplied. Example: `https://yourusername-august.lightning.force.com` |\n| `orgAdminUsername` | The System Administrator username for the Salesforce org | User supplied |\n| `orgAdminPassword` | The System Administrator password for the Salesforce org | User supplied |\n| `orgAdminSecurityToken` | The security token for the Salesforce Org System Administrator User | Autogenerated |\n| `orgHostMySalesforceFormat` | The protocol and host portion of the Salesforce org's URL in 'my.salesforce.com' format. Useful for avoiding redirection problems and 'Invalid Session Id' errors post authentication | User supplied. Example: `https://yourusername-august.my.salesforce.com` |\n| `orgId` | The Salesforce.com Organization ID for the Salesforce org | Setup > Company Information |\n| `apiVersion` | The Salesforce API version (e.g. 58.0). | User supplied. Most recent value recommended. |\n| `connectedAppConsumerKey` | The Consumer Secret value for the Connected App in the Salesforce org. | Setup > App Manager > Connected App Record > View > Manage Consumer Details |\n| `connectedAppConsumerSecret` | The Consumer Secret value in the Connected App. | Setup > App Manager > Connected App Record > View > Manage Consumer Details |\n| `webstoreName` | Name of the webstore used to look up a corresponding Id | The value specified when the store / site was created such as 'B2B LWR Enhanced Store from TSO.' Can be found in the Commerce App under 'Stores.' |\n| `buyerUsername` | Registered B2B Buyer User's username. | User supplied. |\n| `buyerPassword` | Registered B2B Buyer User's password. | User supplied. |\n| `buyerAccountName` | Name of the Account used to look up the Account Id which is tied to the Buyer User. | User supplied. Example: `United Coffee Bean Corp` |\n| `productNamesCommaDelimited` | Comma-delimited list of product names which are resolved to Ids. | User supplied: Example `Testa Rossa Coffee Machine (Sample),Capricorn I Group Espresso Machine (Sample)` |\n| `productSearchTerm` | The search term to use for a Happy Path | User supplied: Example `Coffee` |\n| `currencyIsoCode` | The currency code for the cart. | User supplied: Example `USD` for United States Dollar |\n\nPlease consult the Partner Learning Camp B2B Commerce curriculum and course documentation for additional details.\n\nEnjoy the collection!\n\n- Tom Zarr ([tzarr@salesforce.com](https://mailto:tzarr@salesforce.com)) October, 2023",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "8399406"
	},
	"item": [
		{
			"name": "Product Search",
			"item": [
				{
					"name": "Basic Search (Buyer Login)",
					"item": [
						{
							"name": "1. Clear Collection Variables",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
											"\r",
											"// Check for environment selection\r",
											"if(pm.environment.name === undefined) {\r",
											"    const msg = 'No Postman environment selected or set.';\r",
											"    pm.expect.fail(msg);\r",
											"}\r",
											"\r",
											"// Clean up the variables from the collection set throughout the various calls\r",
											"pm.collectionVariables.clear();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Tests...`);\r",
											"\r",
											"pm.test('Make sure collection variables are clean', () => {\r",
											"    pm.expect(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value)).to.be.an('array').empty;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "postman-echo.com/get",
									"host": [
										"postman-echo",
										"com"
									],
									"path": [
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "2. Log in as System Administrator (SOAP)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const baseplateBanner = () => {\r",
											"    console.log(`${pm.info.requestName} Tests...`);\r",
											"    console.warn(`Code: ${pm.response.code} | Status: ${pm.response.status} | Response time: ${pm.response.responseTime} ms`);\r",
											"}\r",
											"\r",
											"baseplateBanner();\r",
											"\r",
											"pm.expect(pm.response.text().includes('INVALID_LOGIN'), 'INVALID_LOGIN found in response - Suggested fix: Check username, password and tokens in the Postman Environment').to.be.false;\r",
											"\r",
											"pm.expect(pm.response.text().includes('API_CURRENTLY_DISABLED'), 'API_CURRENTLY_DISABLED found in response - Suggested fix: Create a Permission Set like \\'Api Enabled\\' with the API Enabled checkbox active in System Permissions and apply it to the user').to.be.false;\r",
											"\r",
											"const expectedResponseCodes = [200];\r",
											"pm.expect(pm.response.code).to.be.oneOf(expectedResponseCodes, \"Response code not in expected range\");\r",
											"\r",
											"pm.test('Validate the access token is found in the body and save it to the variables', () => {\r",
											"    const result = xml2Json(pm.response.text())['soapenv:Envelope']['soapenv:Body'].loginResponse.result;\r",
											"    const url = result.serverUrl.split('/');\r",
											"\r",
											"    pm.expect(result.sessionId).to.exist;\r",
											"    pm.expect(result.sessionId).to.be.a.string;\r",
											"\r",
											"    pm.collectionVariables.set('_token', result.sessionId);\r",
											"    pm.collectionVariables.set('_instanceUrl', url[0] + '//' + url[2]);\r",
											"    pm.collectionVariables.set('_userId', result.userId);\r",
											"    pm.collectionVariables.set('_orgId', result.userInfo.organizationId);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const expectedStringsInEnvironmentVariables = ['orgLoginUrl','apiVersion','orgAdminUsername','orgAdminPassword','orgAdminSecurityToken'];\r",
											"const expectedStringsInCollectionVariables = [];\r",
											"\r",
											"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											"\r",
											"// Expected strings in environment variables\r",
											"for(const esiev of expectedStringsInEnvironmentVariables)\r",
											"{\r",
											"    if(!pm.environment.has(esiev))\r",
											"    {\r",
											"        const msg = `Expected Postman environment variable not found: '${esiev} in environment: '${pm.environment.name}'`;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"\r",
											"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
											"}\r",
											"\r",
											"// Expected strings in collection variables\r",
											"for(esicv of expectedStringsInCollectionVariables)\r",
											"{\r",
											"    if(!pm.collectionVariables.has(esicv))\r",
											"    {\r",
											"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    \r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "text/xml; charset=UTF-8",
										"type": "text"
									},
									{
										"key": "SOAPAction",
										"value": "login",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "text/xml",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\r\n<env:Envelope xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"\r\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n    xmlns:n1=\"urn:partner.soap.sforce.com\"\r\n    xmlns:env=\"http://schemas.xmlsoap.org/soap/envelope/\">\r\n    <env:Body>\r\n        <n1:login>\r\n            <n1:username><![CDATA[{{orgAdminUsername}}]]></n1:username>\r\n            <n1:password><![CDATA[{{orgAdminPassword}}]]></n1:password>\r\n        </n1:login>\r\n    </env:Body>\r\n</env:Envelope>"
								},
								"url": {
									"raw": "{{orgLoginUrl}}/services/Soap/u/{{apiVersion}}",
									"host": [
										"{{orgLoginUrl}}"
									],
									"path": [
										"services",
										"Soap",
										"u",
										"{{apiVersion}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "3. Look Up and Set WebStore Id (Query API)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const baseplateBanner = () => {\r",
											"    console.log(`${pm.info.requestName} Tests...`);\r",
											"    console.warn(`Code: ${pm.response.code} | Status: ${pm.response.status} | Response time: ${pm.response.responseTime} ms`);\r",
											"}\r",
											"\r",
											"baseplateBanner();\r",
											"\r",
											"const expectedResponseCodes = [200];\r",
											"pm.expect(pm.response.code).to.be.oneOf(expectedResponseCodes, \"Response code not in expected range\");\r",
											"\r",
											"pm.test('Response is valid and has a JSON body', () => {\r",
											"     pm.response.to.be.success;\r",
											"     pm.response.to.be.withBody;\r",
											"     pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test('Validate the response and saves the WebStore Id in the collection variables', () => {\r",
											"    const data = pm.response.json();\r",
											"    pm.expect(data.records).to.exist;\r",
											"    pm.expect(data.records).to.be.an('array');\r",
											"    pm.expect(data.records.length).to.eql(1);\r",
											"    const webStore = data.records[0];\r",
											"    pm.expect(webStore.Id).to.exist;\r",
											"    pm.expect(webStore.Id).to.be.an('string');\r",
											"    pm.collectionVariables.set('_webStoreId', webStore.Id);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const expectedStringsInEnvironmentVariables = ['orgLoginUrl','apiVersion', 'webStoreName'];\r",
											"const expectedStringsInCollectionVariables = ['_instanceUrl'];\r",
											"\r",
											"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											"\r",
											"// Expected strings in environment variables\r",
											"for(const esiev of expectedStringsInEnvironmentVariables)\r",
											"{\r",
											"    if(!pm.environment.has(esiev))\r",
											"    {\r",
											"        const msg = `Expected Postman environment variable not found: '${esiev} in environment: '${pm.environment.name}'`;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"\r",
											"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
											"}\r",
											"\r",
											"// Expected strings in collection variables\r",
											"for(const esicv of expectedStringsInCollectionVariables)\r",
											"{\r",
											"    if(pm.collectionVariables.get(esicv) === undefined)\r",
											"    {\r",
											"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{orgHostMySalesforceFormat}}/services/data/v{{apiVersion}}/query/?q=SELECT+Id,+Name+FROM+WebStore+WHERE+Name+=+'{{webStoreName}}'",
									"host": [
										"{{orgHostMySalesforceFormat}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"query",
										""
									],
									"query": [
										{
											"key": "q",
											"value": "SELECT+Id,+Name+FROM+WebStore+WHERE+Name+=+'{{webStoreName}}'"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "4. Log In as Buyer (SOAP)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const baseplateBanner = () => {",
											"    console.log(`${pm.info.requestName} Tests...`);",
											"    console.warn(`Code: ${pm.response.code} | Status: ${pm.response.status} | Response time: ${pm.response.responseTime} ms`);",
											"}",
											"",
											"baseplateBanner();",
											"",
											"pm.expect(pm.response.text().includes('INVALID_LOGIN'), 'INVALID_LOGIN found in response - Suggested fix: Check username, password and tokens in the Postman Environment').to.be.false;",
											"",
											"pm.expect(pm.response.text().includes('API_CURRENTLY_DISABLED'), 'API_CURRENTLY_DISABLED found in response - Suggested fix: Create a Permission Set like \\'Api Enabled\\' with the API Enabled checkbox active in System Permissions and apply it to the user').to.be.false;",
											"",
											"const expectedResponseCodes = [200];",
											"pm.expect(pm.response.code).to.be.oneOf(expectedResponseCodes, \"Response code not in expected range\");",
											"",
											"pm.test('Validate the access token is found in the body and save it to a collection variable', () => {",
											"    const result = xml2Json(pm.response.text())['soapenv:Envelope']['soapenv:Body'].loginResponse.result;",
											"    const url = result.serverUrl.split('/');",
											"",
											"    pm.expect(result.sessionId).to.exist;",
											"    pm.expect(result.sessionId).to.be.a.string;",
											"",
											"    pm.collectionVariables.set('_token', result.sessionId);",
											"    pm.collectionVariables.set('_instanceUrl', url[0] + '//' + url[2]);",
											"    pm.collectionVariables.set('_userId', result.userId);",
											"    pm.collectionVariables.set('_orgId', result.userInfo.organizationId);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											"\r",
											"// Expected strings in environment variables\r",
											"['orgLoginUrl','apiVersion'].forEach(esiev => {\r",
											"    if(!pm.environment.has(esiev)) {\r",
											"        const msg = `Expected Postman environment variable not found: '${esiev} in environment: '${pm.environment.name}'`;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
											"});\r",
											"\r",
											"// Expected strings in collection variables\r",
											"['_orgId', '_webStoreId'].forEach(esicv => {\r",
											"    if(pm.collectionVariables.get(esicv) === undefined) {\r",
											"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "text/xml; charset=UTF-8"
									},
									{
										"key": "SOAPAction",
										"value": "login"
									},
									{
										"key": "Accept",
										"value": "text/xml"
									},
									{
										"key": "Cookie",
										"value": "BrowserId=POhd6XTZEe2v6_8M7WG26g"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap:Envelope xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\" \nxmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://\nwww.w3.org/2001/XMLSchema\">\n    <soap:Header>\n        <LoginScopeHeader xmlns=\"urn:partner.soap.sforce.com\">\n            <organizationId>{{_orgId}}</organizationId>\n        </LoginScopeHeader>\n    </soap:Header>\n    <soap:Body>\n        <login xmlns=\"urn:partner.soap.sforce.com\">\n            <username><![CDATA[{{buyerUsername}}]]></username>\n            <password><![CDATA[{{buyerPassword}}]]></password>\n        </login>\n    </soap:Body>\n</soap:Envelope>"
								},
								"url": {
									"raw": "{{orgLoginUrl}}/services/Soap/u/{{apiVersion}}",
									"host": [
										"{{orgLoginUrl}}"
									],
									"path": [
										"services",
										"Soap",
										"u",
										"{{apiVersion}}"
									]
								},
								"description": "Authenticate the shopper through the variables _buyerUsername_ and _buyerPassword_. Generated session ID is saved in _accessToken for use in the other calls in the collection."
							},
							"response": []
						},
						{
							"name": "5. Search for Products (Connect API)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const buyerBanner = () => {",
											"    console.log(`${pm.info.requestName} Tests...`);",
											"    console.warn(`Code: ${pm.response.code} | Status: ${pm.response.status} | Response time: ${pm.response.responseTime} ms | Buyer: ${pm.environment.get('buyerUsername')} | Account: ${pm.environment.get('buyerAccountName')}`);",
											"",
											"}",
											"",
											"buyerBanner();",
											"",
											"const expectedResponseCodes = [201];",
											"pm.expect(pm.response.code).to.be.oneOf(expectedResponseCodes, \"Response code not in expected range\");",
											"",
											"pm.test('Response is valid and has a JSON body', () => {",
											"    pm.response.to.be.success;",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test('Validate the response and save the product id to a collection variable', () => {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.productsPage).to.exist;",
											"    pm.expect(jsonData.productsPage).to.be.an('object');",
											"    pm.expect(jsonData.productsPage.products).to.exist;",
											"    pm.expect(jsonData.productsPage.products).to.be.an('array');",
											"    pm.expect(jsonData.productsPage.products[0]).to.exist;",
											"    pm.expect(jsonData.productsPage.products[0]).to.be.an('object');",
											"    pm.expect(jsonData.productsPage.products[0]).to.exist;",
											"    pm.expect(jsonData.productsPage.products[0].id).to.be.an('string');",
											"    pm.collectionVariables.set('_productId', jsonData.productsPage.products[0].id);",
											"});",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const expectedStringsInEnvironmentVariables = ['orgHostMySalesforceFormat','apiVersion', 'productSearchTerm'];\r",
											"const expectedStringsInCollectionVariables = ['_webStoreId', '_token'];\r",
											"\r",
											"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											"console.log(`${pm.collectionVariables.get('_instanceUrl')} _instanceUrl from collection`);\r",
											"console.log(`${pm.environment.get('orgHostMySalesforceFormat')} orgHostMySalesforceFormat from environment`);\r",
											"\r",
											"for(const esiev of expectedStringsInEnvironmentVariables)\r",
											"{\r",
											"    if(!pm.environment.has(esiev)) {\r",
											"        const msg = `Expected Postman environment variable not found: '${esiev} in environment: '${pm.environment.name}'`;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
											"}\r",
											"\r",
											"// Expected strings in collection variables\r",
											"for(const esicv of expectedStringsInCollectionVariables)\r",
											"{\r",
											"    if(!pm.collectionVariables.has(esicv)) {\r",
											"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableUrlEncoding": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"searchTerm\": \"{{productSearchTerm}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{orgHostMySalesforceFormat}}/services/data/v{{apiVersion}}/commerce/webstores/{{_webStoreId}}/search/product-search",
									"host": [
										"{{orgHostMySalesforceFormat}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"commerce",
										"webstores",
										"{{_webStoreId}}",
										"search",
										"product-search"
									]
								},
								"description": "Uses the variable _productSearchTerm_ to search for products in the webstore. Sets the first returned product in the variable _productId_."
							},
							"response": []
						},
						{
							"name": "6. Get Product Detail (Connect API)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const buyerBanner = () => {",
											"    console.log(`${pm.info.requestName} Tests...`);",
											"    console.warn(`Code: ${pm.response.code} | Status: ${pm.response.status} | Response time: ${pm.response.responseTime} ms | Buyer: ${pm.environment.get('buyerUsername')} | Account: ${pm.environment.get('buyerAccountName')}`);",
											"",
											"}",
											"",
											"buyerBanner();",
											"",
											"const expectedResponseCodes = [200];",
											"pm.expect(pm.response.code).to.be.oneOf(expectedResponseCodes, \"Response code not in expected range\");",
											"",
											"pm.test('Response is valid and has a JSON body', () => {",
											"    pm.response.to.be.success;",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test('Validate the response', () => {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.defaultImage).to.exist;",
											"    pm.expect(jsonData.defaultImage).to.be.an('object').with.property('id').to.be.an('string');",
											"",
											"    pm.expect(jsonData.fields).to.exist;",
											"    pm.expect(jsonData.fields).to.be.an('object').with.property('Name').to.be.an('string');",
											"    pm.expect(jsonData.fields).to.be.an('object').with.property('Description').to.be.an('string');",
											"    pm.expect(jsonData.fields).to.be.an('object').with.property('LastModifiedDate').to.match(/\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}Z/);",
											"    ",
											"    pm.expect(jsonData.mediaGroups).to.exist;",
											"    pm.expect(jsonData.mediaGroups).to.be.an('array');",
											"    pm.expect(jsonData.mediaGroups[0]).to.be.an('object').with.property('id').to.be.an('string');",
											"    pm.expect(jsonData.mediaGroups[0].mediaItems[0]).to.be.an('object').with.property('url').to.be.an('string');",
											"    pm.expect(jsonData.mediaGroups[0].mediaItems[0]).to.be.an('object').with.property('mediaType').to.be.an('string');",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const expectedStringsInEnvironmentVariables = ['orgHostMySalesforceFormat','apiVersion'];\r",
											"const expectedStringsInCollectionVariables = ['_webStoreId', '_productId', '_token'];\r",
											"\r",
											"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											"\r",
											"// Expected strings in environment variables\r",
											"for(const esiev of expectedStringsInEnvironmentVariables)\r",
											"{\r",
											"    if(!pm.environment.has(esiev))\r",
											"    {\r",
											"        const msg = `Expected Postman environment variable not found: '${esiev} in environment: '${pm.environment.name}'`;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"\r",
											"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
											"}\r",
											"\r",
											"// Expected strings in collection variables\r",
											"for(esicv of expectedStringsInCollectionVariables)\r",
											"{\r",
											"    if(!pm.collectionVariables.has(esicv))\r",
											"    {\r",
											"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    \r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{orgHostMySalesforceFormat}}/services/data/v{{apiVersion}}/commerce/webstores/{{_webStoreId}}/products/{{_productId}}",
									"host": [
										"{{orgHostMySalesforceFormat}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"commerce",
										"webstores",
										"{{_webStoreId}}",
										"products",
										"{{_productId}}"
									],
									"query": [
										{
											"key": "effectiveAccountId",
											"value": "<string>",
											"disabled": true
										},
										{
											"key": "excludeAttributeSetInfo",
											"value": "<boolean>",
											"disabled": true
										},
										{
											"key": "excludeEntitlementDetails",
											"value": "<boolean>",
											"disabled": true
										},
										{
											"key": "excludeFields",
											"value": "<boolean>",
											"disabled": true
										},
										{
											"key": "excludeMedia",
											"value": "<boolean>",
											"disabled": true
										},
										{
											"key": "excludePrimaryProductCategory",
											"value": "<boolean>",
											"disabled": true
										},
										{
											"key": "excludeProductSellingModels",
											"value": "<boolean>",
											"disabled": true
										},
										{
											"key": "excludeQuantityRule",
											"value": "<boolean>",
											"disabled": true
										},
										{
											"key": "excludeVariationInfo",
											"value": "<boolean>",
											"disabled": true
										},
										{
											"key": "fields",
											"value": "[]",
											"disabled": true
										},
										{
											"key": "mediaGroups",
											"value": "[]",
											"disabled": true
										}
									]
								},
								"description": "Fetch standard field data, custom field data, and enrichment data for a single Product, identified by the variable _productId_ that was set by the search products request."
							},
							"response": []
						}
					],
					"description": "Interactions with the [Commerce Webstore Product Search](https://developer.salesforce.com/docs/atlas.en-us.chatterapi.meta/chatterapi/connect_resources_commerce_webstore_product_search.htm) using the Buyer Login authentication flow.\n\n`/commerce/webstores/webstoreId/search/​product-search`",
					"auth": {
						"type": "noauth"
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Basic Search (oAuth 2.0)",
					"item": [
						{
							"name": "1. Clear Collection Variables",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											"\r",
											"// Check for environment selection\r",
											"if(pm.environment.name === undefined) {\r",
											"    const msg = 'No Postman environment selected or set.';\r",
											"    pm.expect.fail(msg);\r",
											"}\r",
											"\r",
											"// Clean up the variables from the collection set throughout the various calls\r",
											"pm.collectionVariables.clear();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Tests...`);\r",
											"\r",
											"pm.test('Make sure collection variables are clean', () => {\r",
											"    pm.expect(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value)).to.be.an('array').empty;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "postman-echo.com/get",
									"host": [
										"postman-echo",
										"com"
									],
									"path": [
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "2. Set your oAuth 2.0 Token in Authorization tab",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
											"console.log('Checking oAuth has been set up...');\r",
											"\r",
											"const checkOpenAuthToken = (request) => {\r",
											"    const isTokenMissing = request.auth === undefined\r",
											"    || request.auth.oauth2 === undefined\r",
											"    || !request.auth.oauth2.has('accessToken')\r",
											"    || request.auth.oauth2.get('accessToken') === undefined\r",
											"    || request.auth.oauth2.get('accessToken') === null\r",
											"    || request.auth.oauth2.get('accessToken').length === 0;\r",
											"\r",
											"    if(isTokenMissing) {\r",
											"        const msg = 'Steps to fix issue \"Expected oAuth 2.0 token not found\":\\r\\n' + \r",
											"        '1. Check in Setup -> OAuth and OpenID Connect Settings -> Allow OAuth Username-Password Flows: Enabled \\r\\n' +\r",
											"        '2. Click on the Request with a name like \"Set your oAuth 2.0 Token in Authorization tab\"\\r\\n' +\r",
											"        '3. Click the \"Authorization\" tab\\r\\n' + \r",
											"        '4. Click the \"Get New Access Token\" button\\r\\n' +\r",
											"        '5. Click the \"Proceed\" button\\r\\n' + \r",
											"        '6. Click the \"Use Token\" button\\r\\n' +\r",
											"        '7. Retry your request';\r",
											"        console.error(msg);\r",
											"        pm.expect.fail('Expected oAuth 2.0 token not found. See steps above for a fix.');\r",
											"    }\r",
											"    else\r",
											"    {\r",
											"        const tokenAgeInMinutes = Math.floor(Math.floor((new Date().getTime() - pm.request.auth.oauth2.get('timestamp')) / 1000) / 60);\r",
											"        console.warn(`Token age: ${tokenAgeInMinutes} minutes`);\r",
											"        pm.collectionVariables.set('_token', pm.request.auth.oauth2.get('accessToken'));\r",
											"    }\r",
											"};\r",
											"\r",
											"checkOpenAuthToken(pm.request);\r",
											"\r",
											"pm.test('oAuth 2.0 Assertions', () => {\r",
											"    pm.expect(pm.request.auth).to.exist;\r",
											"    pm.expect(pm.request.auth).to.be.an('object');\r",
											"    pm.expect(pm.request.auth.oauth2).to.exist;\r",
											"    pm.expect(pm.request.auth.oauth2).to.be.an('object');\r",
											"    pm.expect(pm.request.auth.oauth2.has('accessToken')).to.be.true;\r",
											"    pm.expect(pm.request.auth.oauth2.get('accessToken')).to.exist;\r",
											"    pm.expect(pm.request.auth.oauth2.get('accessToken')).to.be.an('string').with.length.greaterThan(0);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const baseplateBanner = () => {\r",
											"    console.log(`${pm.info.requestName} Tests...`);\r",
											"    console.warn(`Code: ${pm.response.code} | Status: ${pm.response.status} | Response time: ${pm.response.responseTime} ms`);\r",
											"}\r",
											"\r",
											"baseplateBanner();\r",
											"\r",
											"//console.warn(pm.request.getHeaders());\r",
											"//console.warn(pm.request.auth.response);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "password",
											"value": "{{orgAdminPassword}}{{orgAdminSecurityToken}}",
											"type": "string"
										},
										{
											"key": "grant_type",
											"value": "password_credentials",
											"type": "string"
										},
										{
											"key": "useBrowser",
											"value": false,
											"type": "boolean"
										},
										{
											"key": "scope",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessTokenUrl",
											"value": "{{orgLoginUrl}}/services/oauth2/token",
											"type": "string"
										},
										{
											"key": "client_authentication",
											"value": "body",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{orgAdminUsername}}",
											"type": "string"
										},
										{
											"key": "clientSecret",
											"value": "{{connectedAppConsumerSecret}}",
											"type": "string"
										},
										{
											"key": "clientId",
											"value": "{{connectedAppConsumerKey}}",
											"type": "string"
										},
										{
											"key": "tokenName",
											"value": "SF Token",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "postman-echo.com/get",
									"host": [
										"postman-echo",
										"com"
									],
									"path": [
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "3. Look Up and Set WebStore Id (Query API)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const baseplateBanner = () => {\r",
											"    console.log(`${pm.info.requestName} Tests...`);\r",
											"    console.warn(`Code: ${pm.response.code} | Status: ${pm.response.status} | Response time: ${pm.response.responseTime} ms`);\r",
											"}\r",
											"\r",
											"baseplateBanner();\r",
											"\r",
											"const expectedResponseCodes = [200];\r",
											"pm.expect(pm.response.code).to.be.oneOf(expectedResponseCodes, \"Response code not in expected range\");\r",
											"\r",
											"pm.test('Response is valid and has a JSON body', () => {\r",
											"     pm.response.to.be.success;\r",
											"     pm.response.to.be.withBody;\r",
											"     pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test('Validate the response and save the WebStore Id in the collection variables', () => {\r",
											"    const data = pm.response.json();\r",
											"    pm.expect(data.records).to.exist;\r",
											"    pm.expect(data.records).to.be.an('array');\r",
											"    pm.expect(data.records.length).to.eql(1);\r",
											"    const webStore = data.records[0];\r",
											"    pm.expect(webStore.Id).to.exist;\r",
											"    pm.expect(webStore.Id).to.be.an('string');\r",
											"    pm.collectionVariables.set('_webStoreId', webStore.Id);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const expectedStringsInEnvironmentVariables = ['orgLoginUrl','apiVersion', 'webStoreName'];\r",
											"const expectedStringsInCollectionVariables = [];\r",
											"\r",
											"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											"\r",
											"// Expected strings in environment variables\r",
											"for(const esiev of expectedStringsInEnvironmentVariables)\r",
											"{\r",
											"\r",
											"    if(!pm.environment.has(esiev))\r",
											"    {\r",
											"        const msg = `Expected Postman environment variable not found: '${esiev} in environment: '${pm.environment.name}'`;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"\r",
											"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
											"}\r",
											"\r",
											"// Expected strings in collection variables\r",
											"for(const esicv of expectedStringsInCollectionVariables)\r",
											"{\r",
											"    if(pm.collectionVariables.get(esicv) === undefined)\r",
											"    {\r",
											"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{orgHostMySalesforceFormat}}/services/data/v{{apiVersion}}/query/?q=SELECT+Id,+Name+FROM+WebStore+WHERE+Name+=+'{{webStoreName}}'",
									"host": [
										"{{orgHostMySalesforceFormat}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"query",
										""
									],
									"query": [
										{
											"key": "q",
											"value": "SELECT+Id,+Name+FROM+WebStore+WHERE+Name+=+'{{webStoreName}}'"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "4. Search for Products (Connect API)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const buyerBanner = () => {",
											"    console.log(`${pm.info.requestName} Tests...`);",
											"    console.warn(`Code: ${pm.response.code} | Status: ${pm.response.status} | Response time: ${pm.response.responseTime} ms | Buyer: ${pm.environment.get('buyerUsername')} | Account: ${pm.environment.get('buyerAccountName')}`);",
											"",
											"}",
											"",
											"buyerBanner();",
											"",
											"const validateSession = (jsonData) => {",
											"    if(jsonData[0] !== undefined && jsonData[0].message !== undefined && jsonData[0].errorCode !== undefined &&",
											"        (jsonData[0].message.toUpperCase() === 'SESSION EXPIRED OR INVALID' || jsonData[0].errorCode.toUpperCase() === 'INVALID_SESSION_ID')) {",
											"        const msg = 'Steps to fix issue \"Expected oAuth 2.0 token found but likely expired\":\\r\\n' + ",
											"        '1. Check in Setup -> OAuth and OpenID Connect Settings -> Allow OAuth Username-Password Flows: Enabled \\r\\n' +",
											"        '2. Click on the Request with a name like \"Set your oAuth 2.0 Token in Authorization tab\"\\r\\n' +",
											"        '3. Click the \"Authorization\" tab\\r\\n' + ",
											"        '4. Click the \"Get New Access Token\" button\\r\\n' +",
											"        '5. Click the \"Proceed\" button\\r\\n' + ",
											"        '6. Click the \"Use Token\" button\\r\\n' +",
											"        '7. Retry your request';",
											"        console.error(msg);",
											"        pm.expect.fail('oAuth 2.0 token found but likely expired. See steps above for a fix.');",
											"    }",
											"};",
											"",
											"const jsonData = pm.response.json();",
											"validateSession(jsonData);",
											"",
											"const expectedResponseCodes = [201];",
											"pm.expect(pm.response.code).to.be.oneOf(expectedResponseCodes, \"Response code not in expected range\");",
											"",
											"pm.test('Response is valid and has a JSON body', () => {",
											"    pm.response.to.be.success;",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test('Validate the response and save the product id to a collection variable', () => {",
											"    pm.expect(jsonData.productsPage).to.exist;",
											"    pm.expect(jsonData.productsPage).to.be.an('object');",
											"    pm.expect(jsonData.productsPage.products).to.exist;",
											"    pm.expect(jsonData.productsPage.products).to.be.an('array');",
											"    pm.expect(jsonData.productsPage.products[0]).to.exist;",
											"    pm.expect(jsonData.productsPage.products[0]).to.be.an('object');",
											"    pm.expect(jsonData.productsPage.products[0]).to.exist;",
											"    pm.expect(jsonData.productsPage.products[0].id).to.be.an('string');",
											"    pm.collectionVariables.set('_productId', jsonData.productsPage.products[0].id);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const expectedStringsInEnvironmentVariables = ['orgHostMySalesforceFormat','apiVersion', 'productSearchTerm'];\r",
											"const expectedStringsInCollectionVariables = ['_webStoreId', '_token']\r",
											"\r",
											"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											"\r",
											"// Expected strings in the environment\r",
											"for(const esiev of expectedStringsInEnvironmentVariables)\r",
											"{\r",
											"    if(!pm.environment.has(esiev))\r",
											"    {\r",
											"        const msg = `Expected Postman environment variable not found: '${esiev} in environment: '${pm.environment.name}'`;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"\r",
											"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
											"}\r",
											"\r",
											"// Expected strings in the collection variables\r",
											"for(const esicv of expectedStringsInCollectionVariables)\r",
											"{\r",
											"    if(pm.collectionVariables.get(esicv) === undefined) {\r",
											"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    \r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableUrlEncoding": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"searchTerm\": \"{{productSearchTerm}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{orgHostMySalesforceFormat}}/services/data/v{{apiVersion}}/commerce/webstores/{{_webStoreId}}/search/product-search",
									"host": [
										"{{orgHostMySalesforceFormat}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"commerce",
										"webstores",
										"{{_webStoreId}}",
										"search",
										"product-search"
									]
								},
								"description": "Uses the variable _productSearchTerm_ to search for products in the webstore. Sets the first returned product in the variable _productId_."
							},
							"response": []
						},
						{
							"name": "5. Get Product Detail (Connect API)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const buyerBanner = () => {",
											"    console.log(`${pm.info.requestName} Tests...`);",
											"    console.warn(`Code: ${pm.response.code} | Status: ${pm.response.status} | Response time: ${pm.response.responseTime} ms | Buyer: ${pm.environment.get('buyerUsername')} | Account: ${pm.environment.get('buyerAccountName')}`);",
											"",
											"}",
											"",
											"buyerBanner();",
											"",
											"const expectedResponseCodes = [200];",
											"pm.expect(pm.response.code).to.be.oneOf(expectedResponseCodes, \"Response code not in expected range\");",
											"",
											"pm.test('Response is valid and has a JSON body', () => {",
											"    pm.response.to.be.success;",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"const validateSession = (jsonData) => {",
											"    if(jsonData[0] !== undefined && jsonData[0].message !== undefined && jsonData[0].errorCode !== undefined &&",
											"        (jsonData[0].message.toUpperCase() === 'SESSION EXPIRED OR INVALID' || jsonData[0].errorCode.toUpperCase() === 'INVALID_SESSION_ID')) {",
											"        const msg = 'No Soup for you! Error 2: oAuth 2.0 token found but likely expired. Steps to fix the issue:\\r\\n' + ",
											"        '1. Click on the Request with a name like \"Set your oAuth 2.0 Token here in Authorization tab\"\\r\\n' +",
											"        '2. Click the \"Authorization\" tab\\r\\n' + ",
											"        '3. Click the \"Get New Access Token\" button\\r\\n' +",
											"        '4. Click the \"Proceed\" button\\r\\n' + ",
											"        '5. Click the \"Use Token\" button\\r\\n' +",
											"        '6. Optional - Use the delete button\\'s dropdown option to remove expired tokens\\r\\n' +",
											"        '7. Retry your request';",
											"        console.warn(msg);",
											"        console.error('No Soup for you! Error 2: oAuth 2.0 token found but likely expired. See steps above for a fix.');",
											"        pm.expect.fail('No Soup for you! Error 2: oAuth 2.0 token found but likely expired. See steps above for a fix.');",
											"    }",
											"};",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test('Session is valid', () => {",
											"    validateSession(jsonData);",
											"});",
											"",
											"pm.test('Validate the response', () => {",
											"    pm.expect(jsonData.defaultImage).to.exist;",
											"    pm.expect(jsonData.defaultImage).to.be.an('object').with.property('id').to.be.an('string');",
											"",
											"    pm.expect(jsonData.fields).to.exist;",
											"    pm.expect(jsonData.fields).to.be.an('object').with.property('Name').to.be.an('string');",
											"    pm.expect(jsonData.fields).to.be.an('object').with.property('Description').to.be.an('string');",
											"    pm.expect(jsonData.fields).to.be.an('object').with.property('LastModifiedDate').to.match(/\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}Z/);",
											"    ",
											"    pm.expect(jsonData.mediaGroups).to.exist;",
											"    pm.expect(jsonData.mediaGroups).to.be.an('array');",
											"    pm.expect(jsonData.mediaGroups[0]).to.be.an('object').with.property('id').to.be.an('string');",
											"    pm.expect(jsonData.mediaGroups[0].mediaItems[0]).to.be.an('object').with.property('url').to.be.an('string');",
											"    pm.expect(jsonData.mediaGroups[0].mediaItems[0]).to.be.an('object').with.property('mediaType').to.be.an('string');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const expectedStringsInEnvironmentVariables = ['orgHostMySalesforceFormat','apiVersion'];\r",
											"const expectedStringsInCollectionVariables = ['_webStoreId', '_productId', '_token'];\r",
											"\r",
											"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											"\r",
											"// Expected strings in the environment\r",
											"for(const esiev of expectedStringsInEnvironmentVariables)\r",
											"{\r",
											"    if(!pm.environment.has(esiev)) {\r",
											"        const msg = `Expected Postman environment variable not found: '${esiev} in environment: '${pm.environment.name}'`;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
											"}\r",
											"\r",
											"\r",
											"// Expected strings in the collection variables\r",
											"for(const esicv of expectedStringsInCollectionVariables)\r",
											"{\r",
											"    if(!pm.collectionVariables.has(esicv)) {\r",
											"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{orgHostMySalesforceFormat}}/services/data/v{{apiVersion}}/commerce/webstores/{{_webStoreId}}/products/{{_productId}}",
									"host": [
										"{{orgHostMySalesforceFormat}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"commerce",
										"webstores",
										"{{_webStoreId}}",
										"products",
										"{{_productId}}"
									],
									"query": [
										{
											"key": "effectiveAccountId",
											"value": "<string>",
											"disabled": true
										},
										{
											"key": "excludeAttributeSetInfo",
											"value": "<boolean>",
											"disabled": true
										},
										{
											"key": "excludeEntitlementDetails",
											"value": "<boolean>",
											"disabled": true
										},
										{
											"key": "excludeFields",
											"value": "<boolean>",
											"disabled": true
										},
										{
											"key": "excludeMedia",
											"value": "<boolean>",
											"disabled": true
										},
										{
											"key": "excludePrimaryProductCategory",
											"value": "<boolean>",
											"disabled": true
										},
										{
											"key": "excludeProductSellingModels",
											"value": "<boolean>",
											"disabled": true
										},
										{
											"key": "excludeQuantityRule",
											"value": "<boolean>",
											"disabled": true
										},
										{
											"key": "excludeVariationInfo",
											"value": "<boolean>",
											"disabled": true
										},
										{
											"key": "fields",
											"value": "[]",
											"disabled": true
										},
										{
											"key": "mediaGroups",
											"value": "[]",
											"disabled": true
										}
									]
								},
								"description": "Fetch standard field data, custom field data, and enrichment data for a single Product, identified by the variable _productId_ that was set by the search products request."
							},
							"response": []
						}
					],
					"description": "Interactions with the [Commerce Webstore Product Search](https://developer.salesforce.com/docs/atlas.en-us.chatterapi.meta/chatterapi/connect_resources_commerce_webstore_product_search.htm) using oAuth 2.0 flow\n\n`/commerce/webstores/webstoreId/search/​product-search`\n\n**oAuth 2.0 Token setup steps**\n\n1. Check in Setup -> OAuth and OpenID Connect Settings -> Allow OAuth Username-Password Flows: Enabled\n    \n2. Click on the Request with a name like \"Set your oAuth 2.0 Token in Authorization tab\"\n    \n3. Click the \"Authorization\" tab\n    \n4. Click the \"Get New Access Token\" button\n    \n5. Click the \"Proceed\" button\n    \n6. Click the \"Use Token\" button\n    \n7. Retry running the folder or requests",
					"auth": {
						"type": "noauth"
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			],
			"description": "Interactions with the [Commerce Webstore Product Search](https://developer.salesforce.com/docs/atlas.en-us.chatterapi.meta/chatterapi/connect_resources_commerce_webstore_product_search.htm)\n\n`/commerce/webstores/webstoreId/search/​product-search`"
		},
		{
			"name": "Product Categories",
			"item": [
				{
					"name": "Get Child Categories (Buyer Login)",
					"item": [
						{
							"name": "1. Clear Collection Variables",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
											"\r",
											"// Check for environment selection\r",
											"if(pm.environment.name === undefined) {\r",
											"    const msg = 'No Postman environment selected or set.';\r",
											"    pm.expect.fail(msg);\r",
											"}\r",
											"\r",
											"// Clean up the variables from the collection set throughout the various calls\r",
											"pm.collectionVariables.clear();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Tests...`);\r",
											"\r",
											"pm.test('Make sure collection variables are clean', () => {\r",
											"    pm.expect(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value)).to.be.an('array').empty;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "postman-echo.com/get",
									"host": [
										"postman-echo",
										"com"
									],
									"path": [
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "2. Log in as System Administrator (SOAP)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const baseplateBanner = () => {\r",
											"    console.log(`${pm.info.requestName} Tests...`);\r",
											"    console.warn(`Code: ${pm.response.code} | Status: ${pm.response.status} | Response time: ${pm.response.responseTime} ms`);\r",
											"}\r",
											"\r",
											"baseplateBanner();\r",
											"\r",
											"pm.expect(pm.response.text().includes('INVALID_LOGIN'), 'INVALID_LOGIN found in response - Suggested fix: Check username, password and tokens in the Postman Environment').to.be.false;\r",
											"\r",
											"pm.expect(pm.response.text().includes('API_CURRENTLY_DISABLED'), 'API_CURRENTLY_DISABLED found in response - Suggested fix: Create a Permission Set like \\'Api Enabled\\' with the API Enabled checkbox active in System Permissions and apply it to the user').to.be.false;\r",
											"\r",
											"const expectedResponseCodes = [200];\r",
											"pm.expect(pm.response.code).to.be.oneOf(expectedResponseCodes, \"Response code not in expected range\");\r",
											"\r",
											"pm.test('Validate the access token is found in the body and save it to the variables', () => {\r",
											"    const result = xml2Json(pm.response.text())['soapenv:Envelope']['soapenv:Body'].loginResponse.result;\r",
											"    const url = result.serverUrl.split('/');\r",
											"\r",
											"    pm.expect(result.sessionId).to.exist;\r",
											"    pm.expect(result.sessionId).to.be.a.string;\r",
											"\r",
											"    pm.collectionVariables.set('_token', result.sessionId);\r",
											"    pm.collectionVariables.set('_instanceUrl', url[0] + '//' + url[2]);\r",
											"    pm.collectionVariables.set('_userId', result.userId);\r",
											"    pm.collectionVariables.set('_orgId', result.userInfo.organizationId);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const expectedStringsInEnvironmentVariables = ['orgLoginUrl','apiVersion','orgAdminUsername','orgAdminPassword','orgAdminSecurityToken'];\r",
											"const expectedStringsInCollectionVariables = [];\r",
											"\r",
											"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											"\r",
											"// Expected strings in environment variables\r",
											"for(const esiev of expectedStringsInEnvironmentVariables)\r",
											"{\r",
											"    if(!pm.environment.has(esiev))\r",
											"    {\r",
											"        const msg = `Expected Postman environment variable not found: '${esiev} in environment: '${pm.environment.name}'`;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"\r",
											"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
											"}\r",
											"\r",
											"// Expected strings in collection variables\r",
											"for(esicv of expectedStringsInCollectionVariables)\r",
											"{\r",
											"    if(!pm.collectionVariables.has(esicv))\r",
											"    {\r",
											"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    \r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "text/xml; charset=UTF-8",
										"type": "text"
									},
									{
										"key": "SOAPAction",
										"value": "login",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "text/xml",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\r\n<env:Envelope xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"\r\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n    xmlns:n1=\"urn:partner.soap.sforce.com\"\r\n    xmlns:env=\"http://schemas.xmlsoap.org/soap/envelope/\">\r\n    <env:Body>\r\n        <n1:login>\r\n            <n1:username><![CDATA[{{orgAdminUsername}}]]></n1:username>\r\n            <n1:password><![CDATA[{{orgAdminPassword}}]]></n1:password>\r\n        </n1:login>\r\n    </env:Body>\r\n</env:Envelope>"
								},
								"url": {
									"raw": "{{orgLoginUrl}}/services/Soap/u/{{apiVersion}}",
									"host": [
										"{{orgLoginUrl}}"
									],
									"path": [
										"services",
										"Soap",
										"u",
										"{{apiVersion}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "3. Look Up and Set WebStore Id (Query API)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const baseplateBanner = () => {\r",
											"    console.log(`${pm.info.requestName} Tests...`);\r",
											"    console.warn(`Code: ${pm.response.code} | Status: ${pm.response.status} | Response time: ${pm.response.responseTime} ms`);\r",
											"}\r",
											"\r",
											"baseplateBanner();\r",
											"\r",
											"const expectedResponseCodes = [200];\r",
											"pm.expect(pm.response.code).to.be.oneOf(expectedResponseCodes, \"Response code not in expected range\");\r",
											"\r",
											"pm.test('Response is valid and has a JSON body', () => {\r",
											"     pm.response.to.be.success;\r",
											"     pm.response.to.be.withBody;\r",
											"     pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test('Validate the response and save the WebStore Id in the collection variables', () => {\r",
											"    const data = pm.response.json();\r",
											"    pm.expect(data.records).to.exist;\r",
											"    pm.expect(data.records).to.be.an('array');\r",
											"    pm.expect(data.records.length).to.eql(1);\r",
											"    const webStore = data.records[0];\r",
											"    pm.expect(webStore.Id).to.exist;\r",
											"    pm.expect(webStore.Id).to.be.an('string');\r",
											"    pm.collectionVariables.set('_webStoreId', webStore.Id);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const expectedStringsInEnvironmentVariables = ['orgLoginUrl','apiVersion', 'webStoreName'];\r",
											"const expectedStringsInCollectionVariables = ['_instanceUrl'];\r",
											"\r",
											"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											"\r",
											"// Expected strings in environment variables\r",
											"for(const esiev of expectedStringsInEnvironmentVariables)\r",
											"{\r",
											"\r",
											"    if(!pm.environment.has(esiev))\r",
											"    {\r",
											"        const msg = `Expected Postman environment variable not found: '${esiev} in environment: '${pm.environment.name}'`;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"\r",
											"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
											"}\r",
											"\r",
											"// Expected strings in collection variables\r",
											"for(const esicv of expectedStringsInCollectionVariables)\r",
											"{\r",
											"    if(pm.collectionVariables.get(esicv) === undefined)\r",
											"    {\r",
											"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{_instanceUrl}}/services/data/v{{apiVersion}}/query/?q=SELECT+Id,+Name+FROM+WebStore+WHERE+Name+=+'{{webStoreName}}'",
									"host": [
										"{{_instanceUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"query",
										""
									],
									"query": [
										{
											"key": "q",
											"value": "SELECT+Id,+Name+FROM+WebStore+WHERE+Name+=+'{{webStoreName}}'"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "4. Set ProductCatalog Id by Webstore Id (Query API)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const baseplateBanner = () => {\r",
											"    console.log(`${pm.info.requestName} Tests...`);\r",
											"    console.warn(`Code: ${pm.response.code} | Status: ${pm.response.status} | Response time: ${pm.response.responseTime} ms`);\r",
											"}\r",
											"\r",
											"baseplateBanner();\r",
											"\r",
											"const expectedResponseCodes = [200];\r",
											"pm.expect(pm.response.code).to.be.oneOf(expectedResponseCodes, \"Response code not in expected range\");\r",
											"\r",
											"pm.test('Response is valid and has a JSON body', () => {\r",
											"     pm.response.to.be.success;\r",
											"     pm.response.to.be.withBody;\r",
											"     pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test('Validate the response and save the ProductCatalog Id in the collection variables', () => {\r",
											"    const data = pm.response.json();\r",
											"    pm.expect(data.records).to.exist;\r",
											"    pm.expect(data.records).to.be.an('array');\r",
											"    pm.expect(data.records.length).to.eql(1);\r",
											"\r",
											"    const productCatalog = data.records[0];\r",
											"    pm.expect(productCatalog.ProductCatalogId).to.exist;\r",
											"    pm.expect(productCatalog.ProductCatalogId).to.be.an('string');\r",
											"    pm.collectionVariables.set('_productCatalogId', productCatalog.ProductCatalogId);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const expectedStringsInEnvironmentVariables = ['orgLoginUrl','apiVersion', 'webStoreName'];\r",
											"const expectedStringsInCollectionVariables = ['_instanceUrl'];\r",
											"\r",
											"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											"\r",
											"// Expected strings in environment variables\r",
											"for(const esiev of expectedStringsInEnvironmentVariables)\r",
											"{\r",
											"    if(!pm.environment.has(esiev))\r",
											"    {\r",
											"       const msg = `Expected Postman environment variable not found: '${esiev} in environment: '${pm.environment.name}'`;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    \r",
											"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
											"}\r",
											"\r",
											"// Expected strings in collection variables\r",
											"for(esicv of expectedStringsInCollectionVariables)\r",
											"{\r",
											"    if(pm.collectionVariables.get(esicv) === undefined)\r",
											"    {\r",
											"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{_instanceUrl}}/services/data/v{{apiVersion}}/query/?q=SELECT+ProductCatalogId,+SalesStoreId+FROM+WebStoreCatalog+WHERE+SalesStoreId+=+'{{_webStoreId}}'",
									"host": [
										"{{_instanceUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"query",
										""
									],
									"query": [
										{
											"key": "q",
											"value": "SELECT+ProductCatalogId,+SalesStoreId+FROM+WebStoreCatalog+WHERE+SalesStoreId+=+'{{_webStoreId}}'"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "5. Set Parent Category Id by Product Catalog Id (Query API)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const baseplateBanner = () => {\r",
											"    console.log(`${pm.info.requestName} Tests...`);\r",
											"    console.warn(`Code: ${pm.response.code} | Status: ${pm.response.status} | Response time: ${pm.response.responseTime} ms`);\r",
											"}\r",
											"\r",
											"baseplateBanner();\r",
											"\r",
											"const expectedResponseCodes = [200];\r",
											"pm.expect(pm.response.code).to.be.oneOf(expectedResponseCodes, \"Response code not in expected range\");\r",
											"\r",
											"pm.test('Response is valid and has a JSON body', () => {\r",
											"     pm.response.to.be.success;\r",
											"     pm.response.to.be.withBody;\r",
											"     pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test('Validate the response and save the WebStore Id in the collection variables', () => {\r",
											"    const data = pm.response.json();\r",
											"    pm.expect(data.records).to.exist;\r",
											"    pm.expect(data.records).to.be.an('array');\r",
											"    pm.expect(data.records.length).to.eql(1);\r",
											"    const parentCategory = data.records[0];\r",
											"    pm.expect(parentCategory.Id).to.exist;\r",
											"    pm.expect(parentCategory.Id).to.be.an('string');\r",
											"    pm.collectionVariables.set('_b2bWebStoreParentCategoryId', parentCategory.Id);\r",
											"});\r",
											"\r",
											"console.warn(pm.collectionVariables.get('_b2bWebStoreParentCategoryId'));"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const expectedStringsInEnvironmentVariables = ['orgLoginUrl','apiVersion', 'webStoreName', 'b2bWebStoreParentCategoryName'];\r",
											"const expectedStringsInCollectionVariables = ['_webStoreId', '_token', '_instanceUrl'];\r",
											"\r",
											"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											"\r",
											"// Expected strings in environment variables\r",
											"for(const esiev of expectedStringsInEnvironmentVariables)\r",
											"{\r",
											"    if(!pm.environment.has(esiev)) {\r",
											"       const msg = `Expected Postman environment variable not found: '${esiev} in environment: '${pm.environment.name}'`;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
											"}\r",
											"\r",
											"// Expected strings in collection variables\r",
											"for(esicv of expectedStringsInCollectionVariables)\r",
											"{\r",
											"    if(pm.collectionVariables.get(esicv) === undefined) {\r",
											"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{_instanceUrl}}/services/data/v{{apiVersion}}/query/?q=SELECT+Id,+Name+FROM+ProductCategory+WHERE+CatalogId='{{_productCatalogId}}'+and+Name+=+'{{b2bWebStoreParentCategoryName}}'",
									"host": [
										"{{_instanceUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"query",
										""
									],
									"query": [
										{
											"key": "q",
											"value": "SELECT+Id,+Name+FROM+ProductCategory+WHERE+CatalogId='{{_productCatalogId}}'+and+Name+=+'{{b2bWebStoreParentCategoryName}}'"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "6. Log in as Buyer (SOAP)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const baseplateBanner = () => {",
											"    console.log(`${pm.info.requestName} Tests...`);",
											"    console.warn(`Code: ${pm.response.code} | Status: ${pm.response.status} | Response time: ${pm.response.responseTime} ms`);",
											"}",
											"",
											"baseplateBanner();",
											"",
											"pm.expect(pm.response.text().includes('INVALID_LOGIN'), 'INVALID_LOGIN found in response - Suggested fix: Check username, password and tokens in the Postman Environment').to.be.false;",
											"",
											"pm.expect(pm.response.text().includes('API_CURRENTLY_DISABLED'), 'API_CURRENTLY_DISABLED found in response - Suggested fix: Create a Permission Set like \\'Api Enabled\\' with the API Enabled checkbox active in System Permissions and apply it to the user').to.be.false;",
											"",
											"const expectedResponseCodes = [200];",
											"pm.expect(pm.response.code).to.be.oneOf(expectedResponseCodes, \"Response code not in expected range\");",
											"",
											"pm.test('Validate the access token is found in the body and save it to a collection variable', () => {",
											"    const result = xml2Json(pm.response.text())['soapenv:Envelope']['soapenv:Body'].loginResponse.result;",
											"    const url = result.serverUrl.split('/');",
											"",
											"    pm.expect(result.sessionId).to.exist;",
											"    pm.expect(result.sessionId).to.be.a.string;",
											"",
											"    pm.collectionVariables.set('_token', result.sessionId);",
											"    pm.collectionVariables.set('_instanceUrl', url[0] + '//' + url[2]);",
											"    pm.collectionVariables.set('_userId', result.userId);",
											"    pm.collectionVariables.set('_orgId', result.userInfo.organizationId);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const expectedStringsInEnvironmentVariables = ['orgLoginUrl','apiVersion'];\r",
											"const expectedStringsInCollectionVariables = ['_orgId', '_webStoreId'];\r",
											"\r",
											"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											"\r",
											"// Expected strings in environment variables\r",
											"for(const esiev of expectedStringsInEnvironmentVariables)\r",
											"{\r",
											"    if(!pm.environment.has(esiev)) {\r",
											"        const msg = `Expected Postman environment variable not found: '${esiev} in environment: '${pm.environment.name}'`;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
											"}\r",
											"\r",
											"// Expected strings in collection variables\r",
											"for(esicv of expectedStringsInCollectionVariables)\r",
											"{\r",
											"    if(pm.collectionVariables.get(esicv) === undefined) {\r",
											"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "text/xml; charset=UTF-8"
									},
									{
										"key": "SOAPAction",
										"value": "login"
									},
									{
										"key": "Accept",
										"value": "text/xml"
									},
									{
										"key": "Cookie",
										"value": "BrowserId=POhd6XTZEe2v6_8M7WG26g"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap:Envelope xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\" \nxmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://\nwww.w3.org/2001/XMLSchema\">\n    <soap:Header>\n        <LoginScopeHeader xmlns=\"urn:partner.soap.sforce.com\">\n            <organizationId>{{_orgId}}</organizationId>\n        </LoginScopeHeader>\n    </soap:Header>\n    <soap:Body>\n        <login xmlns=\"urn:partner.soap.sforce.com\">\n            <username><![CDATA[{{buyerUsername}}]]></username>\n            <password><![CDATA[{{buyerPassword}}]]></password>\n        </login>\n    </soap:Body>\n</soap:Envelope>"
								},
								"url": {
									"raw": "{{orgLoginUrl}}/services/Soap/u/{{apiVersion}}",
									"host": [
										"{{orgLoginUrl}}"
									],
									"path": [
										"services",
										"Soap",
										"u",
										"{{apiVersion}}"
									]
								},
								"description": "Authenticate the shopper through the variables _buyerUsername_ and _buyerPassword_. Generated session ID is saved in _accessToken for use in the other calls in the collection."
							},
							"response": []
						},
						{
							"name": "7. Get Child Categories (Connect API)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const buyerBanner = () => {",
											"    console.log(`${pm.info.requestName} Tests...`);",
											"    console.warn(`Code: ${pm.response.code} | Status: ${pm.response.status} | Response time: ${pm.response.responseTime} ms | Buyer: ${pm.environment.get('buyerUsername')} | Account: ${pm.environment.get('buyerAccountName')}`);",
											"",
											"}",
											"",
											"buyerBanner();",
											"",
											"const expectedResponseCodes = [200];",
											"pm.expect(pm.response.code).to.be.oneOf(expectedResponseCodes, \"Response code not in expected range\");",
											"",
											"pm.test('Response is valid and has a JSON body', () => {",
											"    pm.response.to.be.success;",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"});",
											"",
											" const jsonData = pm.response.json();",
											"",
											"pm.test('Validate response object structure', () => {",
											"    pm.expect(jsonData.productCategories).to.exist;",
											"    pm.expect(jsonData.productCategories).to.be.an('array').with.lengthOf.at.least(1);",
											"    pm.expect(jsonData.productCategories[0]).to.exist;",
											"    pm.expect(jsonData.productCategories[0]).to.be.an('object');",
											"    pm.expect(jsonData.productCategories[0]).to.exist;",
											"    pm.expect(jsonData.productCategories[0].id).to.be.an('string');",
											"});",
											"",
											"const arrayEquals = function (a, b) {",
											"    return Array.isArray(a) &&",
											"        Array.isArray(b) &&",
											"        a.length === b.length &&",
											"        a.every((val, index) => val === b[index]);",
											"}",
											"",
											"pm.test('Validate that the actual and expected child categories match ', () => {",
											"    const expectedChildCategoryNames = pm.environment.get('b2bWebStoreExpectedChildCategoryNamesCommaDelimited').split(',');",
											"    const actualChildCategoryNames = jsonData.productCategories.map(element => element.fields.Name);",
											"    pm.expect(arrayEquals(expectedChildCategoryNames, actualChildCategoryNames));",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const expectedStringsInEnvironmentVariables = ['orgHostMySalesforceFormat','apiVersion', 'webStoreName', 'b2bWebStoreParentCategoryName', 'b2bWebStoreExpectedChildCategoryNamesCommaDelimited'];\r",
											"const expectedStringsInCollectionVariables = ['_webStoreId', '_token', '_orgId'];\r",
											"\r",
											"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											"\r",
											"console.log(`${pm.collectionVariables.get('_instanceUrl')} _instanceUrl from collection`);\r",
											"console.log(`${pm.environment.get('orgHostMySalesforceFormat')} orgHostMySalesforceFormat from environment`);\r",
											"\r",
											"// Expected strings in environment variables\r",
											"for(const esiev of expectedStringsInEnvironmentVariables)\r",
											"{\r",
											"    if(!pm.environment.has(esiev)) {\r",
											"        const msg = `Expected Postman environment variable not found: '${esiev} in environment: '${pm.environment.name}'`;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
											"}\r",
											"\r",
											"// Expected strings in collection variables\r",
											"for(esicv of expectedStringsInCollectionVariables)\r",
											"{\r",
											"    if(!pm.collectionVariables.has(esicv)) {\r",
											"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
											"}\r",
											"\r",
											"// Create the comma delimited list of the expected child categories in the response\r",
											"const b2bWebStoreExpectedChildCategoryNames = pm.environment.get('b2bWebStoreExpectedChildCategoryNamesCommaDelimited').split(',');\r",
											"pm.collectionVariables.set('_b2bWebStoreExpectedChildCategoryNames', b2bWebStoreExpectedChildCategoryNames);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true,
								"disableUrlEncoding": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"parentProductCategoryId\": \"{{_b2bWebStoreParentCategoryId}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{_instanceUrl}}/services/data/v{{apiVersion}}/commerce/webstores/{{_webStoreId}}/product-categories/children?parentProductCategoryId={{_b2bWebStoreParentCategoryId}}",
									"host": [
										"{{_instanceUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"commerce",
										"webstores",
										"{{_webStoreId}}",
										"product-categories",
										"children"
									],
									"query": [
										{
											"key": "parentProductCategoryId",
											"value": "{{_b2bWebStoreParentCategoryId}}"
										}
									]
								},
								"description": "Uses the variable _productSearchTerm_ to search for products in the webstore. Sets the first returned product in the variable _productId_."
							},
							"response": []
						}
					],
					"description": "Interactions with the the [Commerce Webstore Product Categories Children ](https://developer.salesforce.com/docs/atlas.en-us.chatterapi.meta/chatterapi/connect_resources_commerce_webstore_product_categories_children.htm) using System Administratore Login for Query APIs and the Buyer Login authentication flow.\n\n`/commerce/webstores/webstoreId/product-categories/children`"
				},
				{
					"name": "Get Child Categories (oAuth 2.0)",
					"item": [
						{
							"name": "1. Clear Collection Variables",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											"\r",
											"// Check for environment selection\r",
											"if(pm.environment.name === undefined) {\r",
											"    const msg = 'No Postman environment selected or set.';\r",
											"    pm.expect.fail(msg);\r",
											"}\r",
											"\r",
											"// Clean up the variables from the collection set throughout the various calls\r",
											"pm.collectionVariables.clear();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Tests...`);\r",
											"\r",
											"pm.test('Make sure collection variables are clean', () => {\r",
											"    pm.expect(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value)).to.be.an('array').empty;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "postman-echo.com/get",
									"host": [
										"postman-echo",
										"com"
									],
									"path": [
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "2. Log in as System Administrator (SOAP)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Tests...`);\r",
											"console.warn(`Code: ${pm.response.code} | Status: ${pm.response.status} | Response time: ${pm.response.responseTime} ms`);\r",
											"\r",
											"pm.expect(pm.response.text().includes('INVALID_LOGIN'), 'INVALID_LOGIN found in response - Suggested fix: Check username, password and tokens in the Postman Environment').to.be.false;\r",
											"\r",
											"pm.expect(pm.response.text().includes('API_CURRENTLY_DISABLED'), 'API_CURRENTLY_DISABLED found in response - Suggested fix: Create a Permission Set like \\'Api Enabled\\' with the API Enabled checkbox active in System Permissions and apply it to the user').to.be.false;\r",
											"\r",
											"const expectedResponseCodes = [200];\r",
											"pm.expect(pm.response.code).to.be.oneOf(expectedResponseCodes, \"Response code not in expected range\");\r",
											"\r",
											"pm.test('Validate the access token is found in the body and save it to the variables', () => {\r",
											"    const result = xml2Json(pm.response.text())['soapenv:Envelope']['soapenv:Body'].loginResponse.result;\r",
											"    const url = result.serverUrl.split('/');\r",
											"\r",
											"    pm.expect(result.sessionId).to.exist;\r",
											"    pm.expect(result.sessionId).to.be.a.string;\r",
											"\r",
											"    pm.collectionVariables.set('_token', result.sessionId);\r",
											"    pm.collectionVariables.set('_instanceUrl', url[0] + '//' + url[2]);\r",
											"    pm.collectionVariables.set('_userId', result.userId);\r",
											"    pm.collectionVariables.set('_orgId', result.userInfo.organizationId);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const expectedStringsInEnvironmentVariables = ['orgLoginUrl','apiVersion','orgAdminUsername','orgAdminPassword','orgAdminSecurityToken'];\r",
											"const expectedStringsInCollectionVariables = [];\r",
											"\r",
											"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											"\r",
											"// Expected strings in environment variables\r",
											"for(const esiev of expectedStringsInEnvironmentVariables)\r",
											"{\r",
											"    if(!pm.environment.has(esiev))\r",
											"    {\r",
											"        const msg = `Expected Postman environment variable not found: '${esiev} in environment: '${pm.environment.name}'`;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"\r",
											"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
											"}\r",
											"\r",
											"// Expected strings in collection variables\r",
											"for(esicv of expectedStringsInCollectionVariables)\r",
											"{\r",
											"    if(!pm.collectionVariables.has(esicv))\r",
											"    {\r",
											"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    \r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "text/xml; charset=UTF-8",
										"type": "text"
									},
									{
										"key": "SOAPAction",
										"value": "login",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "text/xml",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\r\n<env:Envelope xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"\r\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n    xmlns:n1=\"urn:partner.soap.sforce.com\"\r\n    xmlns:env=\"http://schemas.xmlsoap.org/soap/envelope/\">\r\n    <env:Body>\r\n        <n1:login>\r\n            <n1:username><![CDATA[{{orgAdminUsername}}]]></n1:username>\r\n            <n1:password><![CDATA[{{orgAdminPassword}}]]></n1:password>\r\n        </n1:login>\r\n    </env:Body>\r\n</env:Envelope>"
								},
								"url": {
									"raw": "{{orgLoginUrl}}/services/Soap/u/{{apiVersion}}",
									"host": [
										"{{orgLoginUrl}}"
									],
									"path": [
										"services",
										"Soap",
										"u",
										"{{apiVersion}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "3. Look Up and Set WebStore Id (Query API)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const baseplateBanner = () => {\r",
											"    console.log(`${pm.info.requestName} Tests...`);\r",
											"    console.warn(`Code: ${pm.response.code} | Status: ${pm.response.status} | Response time: ${pm.response.responseTime} ms`);\r",
											"}\r",
											"\r",
											"baseplateBanner();\r",
											"\r",
											"const expectedResponseCodes = [200];\r",
											"pm.expect(pm.response.code).to.be.oneOf(expectedResponseCodes, \"Response code not in expected range\");\r",
											"\r",
											"pm.test('Response is valid and has a JSON body', () => {\r",
											"     pm.response.to.be.success;\r",
											"     pm.response.to.be.withBody;\r",
											"     pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test('Validate the response and save the WebStore Id in the collection variables', () => {\r",
											"    const data = pm.response.json();\r",
											"    pm.expect(data.records).to.exist;\r",
											"    pm.expect(data.records).to.be.an('array');\r",
											"    pm.expect(data.records.length).to.eql(1);\r",
											"    const webStore = data.records[0];\r",
											"    pm.expect(webStore.Id).to.exist;\r",
											"    pm.expect(webStore.Id).to.be.an('string');\r",
											"    pm.collectionVariables.set('_webStoreId', webStore.Id);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const expectedStringsInEnvironmentVariables = ['orgLoginUrl','apiVersion', 'webStoreName'];\r",
											"const expectedStringsInCollectionVariables = [];\r",
											"\r",
											"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											"\r",
											"// Expected strings in environment variables\r",
											"for(const esiev of expectedStringsInEnvironmentVariables)\r",
											"{\r",
											"\r",
											"    if(!pm.environment.has(esiev))\r",
											"    {\r",
											"        const msg = `Expected Postman environment variable not found: '${esiev} in environment: '${pm.environment.name}'`;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"\r",
											"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
											"}\r",
											"\r",
											"// Expected strings in collection variables\r",
											"for(esicv of expectedStringsInCollectionVariables)\r",
											"{\r",
											"    if(!pm.collectionVariables.has(esicv))\r",
											"    {\r",
											"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{orgHostMySalesforceFormat}}/services/data/v{{apiVersion}}/query/?q=SELECT+Id,+Name+FROM+WebStore+WHERE+Name+=+'{{webStoreName}}'",
									"host": [
										"{{orgHostMySalesforceFormat}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"query",
										""
									],
									"query": [
										{
											"key": "q",
											"value": "SELECT+Id,+Name+FROM+WebStore+WHERE+Name+=+'{{webStoreName}}'"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "4. Set ProductCatalog Id by Webstore Id (Query API)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const baseplateBanner = () => {\r",
											"    console.log(`${pm.info.requestName} Tests...`);\r",
											"    console.warn(`Code: ${pm.response.code} | Status: ${pm.response.status} | Response time: ${pm.response.responseTime} ms`);\r",
											"}\r",
											"\r",
											"baseplateBanner();\r",
											"\r",
											"const expectedResponseCodes = [200];\r",
											"pm.expect(pm.response.code).to.be.oneOf(expectedResponseCodes, \"Response code not in expected range\");\r",
											"\r",
											"pm.test('Response is valid and has a JSON body', () => {\r",
											"     pm.response.to.be.success;\r",
											"     pm.response.to.be.withBody;\r",
											"     pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test('Validate the response and save the ProductCatalog Id in the collection variables', () => {\r",
											"    const data = pm.response.json();\r",
											"    pm.expect(data.records).to.exist;\r",
											"    pm.expect(data.records).to.be.an('array');\r",
											"    pm.expect(data.records.length).to.eql(1);\r",
											"\r",
											"    const productCatalog = data.records[0];\r",
											"    pm.expect(productCatalog.ProductCatalogId).to.exist;\r",
											"    pm.expect(productCatalog.ProductCatalogId).to.be.an('string');\r",
											"    pm.collectionVariables.set('_productCatalogId', productCatalog.ProductCatalogId);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const expectedStringsInEnvironmentVariables = ['orgLoginUrl','apiVersion', 'webStoreName'];\r",
											"const expectedStringsInCollectionVariables = ['_instanceUrl'];\r",
											"\r",
											"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											"\r",
											"// Expected strings in environment variables\r",
											"for(const esiev of expectedStringsInEnvironmentVariables)\r",
											"{\r",
											"    if(!pm.environment.has(esiev))\r",
											"    {\r",
											"       const msg = `Expected Postman environment variable not found: '${esiev} in environment: '${pm.environment.name}'`;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
											"}\r",
											"\r",
											"// Expected strings in collection variables\r",
											"for(esicv of expectedStringsInCollectionVariables)\r",
											"{\r",
											"    if(!pm.collectionVariables.has(esicv))\r",
											"    {\r",
											"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{_instanceUrl}}/services/data/v{{apiVersion}}/query/?q=SELECT+ProductCatalogId,+SalesStoreId+FROM+WebStoreCatalog+WHERE+SalesStoreId+=+'{{_webStoreId}}'",
									"host": [
										"{{_instanceUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"query",
										""
									],
									"query": [
										{
											"key": "q",
											"value": "SELECT+ProductCatalogId,+SalesStoreId+FROM+WebStoreCatalog+WHERE+SalesStoreId+=+'{{_webStoreId}}'"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "5. Set Parent Category Id by Product Catalog Id (Query API)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const baseplateBanner = () => {\r",
											"    console.log(`${pm.info.requestName} Tests...`);\r",
											"    console.warn(`Code: ${pm.response.code} | Status: ${pm.response.status} | Response time: ${pm.response.responseTime} ms`);\r",
											"}\r",
											"\r",
											"baseplateBanner();\r",
											"\r",
											"const expectedResponseCodes = [200];\r",
											"pm.expect(pm.response.code).to.be.oneOf(expectedResponseCodes, \"Response code not in expected range\");\r",
											"\r",
											"pm.test('Response is valid and has a JSON body', () => {\r",
											"     pm.response.to.be.success;\r",
											"     pm.response.to.be.withBody;\r",
											"     pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test('Validate the response and save the WebStore Id in the collection variables', () => {\r",
											"    const data = pm.response.json();\r",
											"    pm.expect(data.records).to.exist;\r",
											"    pm.expect(data.records).to.be.an('array');\r",
											"    pm.expect(data.records.length).to.eql(1);\r",
											"    const parentCategory = data.records[0];\r",
											"    pm.expect(parentCategory.Id).to.exist;\r",
											"    pm.expect(parentCategory.Id).to.be.an('string');\r",
											"    pm.collectionVariables.set('_b2bWebStoreParentCategoryId', parentCategory.Id);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"\r",
											"const expectedStringsInEnvironmentVariables = ['orgLoginUrl','apiVersion', 'webStoreName', 'b2bWebStoreParentCategoryName'];\r",
											"const expectedStringsInCollectionVariables = ['_instanceUrl'];\r",
											"\r",
											"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											"\r",
											"// Expected strings in environment variables\r",
											"for(const esiev of expectedStringsInEnvironmentVariables)\r",
											"{\r",
											"    if(!pm.environment.has(esiev)) {\r",
											"       const msg = `Expected Postman environment variable not found: '${esiev} in environment: '${pm.environment.name}'`;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
											"}\r",
											"\r",
											"// Expected strings in collection variables\r",
											"for(esicv of expectedStringsInCollectionVariables)\r",
											"{\r",
											"    if(!pm.collectionVariables.has(esicv))\r",
											"    {\r",
											"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{_instanceUrl}}/services/data/v{{apiVersion}}/query/?q=SELECT+Id,+Name+FROM+ProductCategory+WHERE+CatalogId='{{_productCatalogId}}'+and+Name+=+'{{b2bWebStoreParentCategoryName}}'",
									"host": [
										"{{_instanceUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"query",
										""
									],
									"query": [
										{
											"key": "q",
											"value": "SELECT+Id,+Name+FROM+ProductCategory+WHERE+CatalogId='{{_productCatalogId}}'+and+Name+=+'{{b2bWebStoreParentCategoryName}}'"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "6. Set your oAuth 2.0 Token in Authorization tab",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
											"console.log('Checking oAuth has been set up...');\r",
											"\r",
											"const checkOpenAuthToken = (request) => {\r",
											"    const isTokenMissing = request.auth === undefined\r",
											"    || request.auth.oauth2 === undefined\r",
											"    || !request.auth.oauth2.has('accessToken')\r",
											"    || request.auth.oauth2.get('accessToken') === undefined\r",
											"    || request.auth.oauth2.get('accessToken') === null\r",
											"    || request.auth.oauth2.get('accessToken').length === 0;\r",
											"\r",
											"    if(isTokenMissing) {\r",
											"        const msg = 'Steps to fix issue \"Expected oAuth 2.0 token not found\":\\r\\n' + \r",
											"        '1. Check in Setup -> OAuth and OpenID Connect Settings -> Allow OAuth Username-Password Flows: Enabled \\r\\n' +\r",
											"        '2. Click on the Request with a name like \"Set your oAuth 2.0 Token in Authorization tab\"\\r\\n' +\r",
											"        '3. Click the \"Authorization\" tab\\r\\n' + \r",
											"        '4. Click the \"Get New Access Token\" button\\r\\n' +\r",
											"        '5. Click the \"Proceed\" button\\r\\n' + \r",
											"        '6. Click the \"Use Token\" button\\r\\n' +\r",
											"        '7. Retry your request';\r",
											"        console.error(msg);\r",
											"        pm.expect.fail('Expected oAuth 2.0 token not found. See steps above for a fix.');\r",
											"    }\r",
											"    else\r",
											"    {\r",
											"        const tokenAgeInMinutes = Math.floor(Math.floor((new Date().getTime() - pm.request.auth.oauth2.get('timestamp')) / 1000) / 60);\r",
											"        console.warn(`Token age: ${tokenAgeInMinutes} minutes`);\r",
											"        pm.collectionVariables.set('_token', pm.request.auth.oauth2.get('accessToken'));\r",
											"    }\r",
											"};\r",
											"\r",
											"checkOpenAuthToken(pm.request);\r",
											"\r",
											"pm.test('oAuth 2.0 Assertions', () => {\r",
											"    pm.expect(pm.request.auth).to.exist;\r",
											"    pm.expect(pm.request.auth).to.be.an('object');\r",
											"    pm.expect(pm.request.auth.oauth2).to.exist;\r",
											"    pm.expect(pm.request.auth.oauth2).to.be.an('object');\r",
											"    pm.expect(pm.request.auth.oauth2.has('accessToken')).to.be.true;\r",
											"    pm.expect(pm.request.auth.oauth2.get('accessToken')).to.exist;\r",
											"    pm.expect(pm.request.auth.oauth2.get('accessToken')).to.be.an('string').with.length.greaterThan(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"const baseplateBanner = () => {\r",
											"    console.log(`${pm.info.requestName} Tests...`);\r",
											"    console.warn(`Code: ${pm.response.code} | Status: ${pm.response.status} | Response time: ${pm.response.responseTime} ms`);\r",
											"}\r",
											"\r",
											"baseplateBanner();"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "scope",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessTokenUrl",
											"value": "{{orgLoginUrl}}/services/oauth2/token",
											"type": "string"
										},
										{
											"key": "client_authentication",
											"value": "body",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{orgAdminPassword}}{{orgAdminSecurityToken}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{orgAdminUsername}}",
											"type": "string"
										},
										{
											"key": "clientSecret",
											"value": "{{connectedAppConsumerSecret}}",
											"type": "string"
										},
										{
											"key": "clientId",
											"value": "{{connectedAppConsumerKey}}",
											"type": "string"
										},
										{
											"key": "grant_type",
											"value": "password_credentials",
											"type": "string"
										},
										{
											"key": "tokenName",
											"value": "SF Token",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										},
										{
											"key": "useBrowser",
											"value": true,
											"type": "boolean"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "postman-echo.com/get",
									"host": [
										"postman-echo",
										"com"
									],
									"path": [
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "7. Get Child Categories (Connect API)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const buyerBanner = () => {",
											"    console.log(`${pm.info.requestName} Tests...`);",
											"    console.warn(`Code: ${pm.response.code} | Status: ${pm.response.status} | Response time: ${pm.response.responseTime} ms | Buyer: ${pm.environment.get('buyerUsername')} | Account: ${pm.environment.get('buyerAccountName')}`);",
											"",
											"}",
											"",
											"buyerBanner();",
											"",
											"const validateSession = (jsonData) => {",
											"    if(jsonData[0] !== undefined && jsonData[0].message !== undefined && jsonData[0].errorCode !== undefined &&",
											"        (jsonData[0].message.toUpperCase() === 'SESSION EXPIRED OR INVALID' || jsonData[0].errorCode.toUpperCase() === 'INVALID_SESSION_ID')) {",
											"        const msg = 'Steps to fix issue \"Expected oAuth 2.0 token found but likely expired\":\\r\\n' + ",
											"        '1. Check in Setup -> OAuth and OpenID Connect Settings -> Allow OAuth Username-Password Flows: Enabled \\r\\n' +",
											"        '2. Click on the Request with a name like \"Set your oAuth 2.0 Token in Authorization tab\"\\r\\n' +",
											"        '3. Click the \"Authorization\" tab\\r\\n' + ",
											"        '4. Click the \"Get New Access Token\" button\\r\\n' +",
											"        '5. Click the \"Proceed\" button\\r\\n' + ",
											"        '6. Click the \"Use Token\" button\\r\\n' +",
											"        '7. Retry your request';",
											"        console.error(msg);",
											"        pm.expect.fail('oAuth 2.0 token found but likely expired. See steps above for a fix.');",
											"    }",
											"};",
											"",
											"const jsonData = pm.response.json();",
											"validateSession(jsonData);",
											"",
											"const expectedResponseCodes = [200];",
											"pm.expect(pm.response.code).to.be.oneOf(expectedResponseCodes, \"Response code not in expected range\");",
											"",
											"pm.test('Response is valid and has a JSON body', () => {",
											"    pm.response.to.be.success;",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test('Validate response object structure', () => {",
											"    pm.expect(jsonData.productCategories).to.exist;",
											"    pm.expect(jsonData.productCategories).to.be.an('array').with.lengthOf.at.least(1);",
											"    pm.expect(jsonData.productCategories[0]).to.exist;",
											"    pm.expect(jsonData.productCategories[0]).to.be.an('object');",
											"    pm.expect(jsonData.productCategories[0]).to.exist;",
											"    pm.expect(jsonData.productCategories[0].id).to.be.an('string');",
											"});",
											"",
											"const arrayEquals = function (a, b) {",
											"    return Array.isArray(a) &&",
											"        Array.isArray(b) &&",
											"        a.length === b.length &&",
											"        a.every((val, index) => val === b[index]);",
											"}",
											"",
											"pm.test('Validate that the actual and expected child categories match ', () => {",
											"    const expectedChildCategoryNames = pm.environment.get('b2bWebStoreExpectedChildCategoryNamesCommaDelimited').split(',');",
											"    const actualChildCategoryNames = jsonData.productCategories.map(element => element.fields.Name);",
											"    pm.expect(arrayEquals(expectedChildCategoryNames, actualChildCategoryNames));",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const expectedStringsInEnvironmentVariables = ['orgHostMySalesforceFormat','apiVersion', 'webStoreName', 'b2bWebStoreParentCategoryName', 'b2bWebStoreExpectedChildCategoryNamesCommaDelimited'];\r",
											"const expectedStringsInCollectionVariables = ['_webStoreId', '_token', '_orgId'];\r",
											"\r",
											"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											"\r",
											"console.log(`${pm.collectionVariables.get('_instanceUrl')} _instanceUrl from collection`);\r",
											"console.log(`${pm.environment.get('orgHostMySalesforceFormat')} orgHostMySalesforceFormat from environment`);\r",
											"\r",
											"// Expected strings in environment variables\r",
											"for(const esiev of expectedStringsInEnvironmentVariables)\r",
											"{\r",
											"    if(!pm.environment.has(esiev))\r",
											"    {\r",
											"        const msg = `Expected Postman environment variable not found: '${esiev} in environment: '${pm.environment.name}'`;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"\r",
											"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
											"}\r",
											"\r",
											"// Expected strings in collection variables\r",
											"for(esicv of expectedStringsInCollectionVariables)\r",
											"{\r",
											"    if(!pm.collectionVariables.has(esicv)) {\r",
											"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
											"}\r",
											"\r",
											"// Create the comma delimited list of the expected child categories in the response\r",
											"const b2bWebStoreExpectedChildCategoryNames = pm.environment.get('b2bWebStoreExpectedChildCategoryNamesCommaDelimited').split(',');\r",
											"pm.collectionVariables.set('_b2bWebStoreExpectedChildCategoryNames', b2bWebStoreExpectedChildCategoryNames);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true,
								"disableUrlEncoding": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"parentProductCategoryId\": \"machines\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{_instanceUrl}}/services/data/v{{apiVersion}}/commerce/webstores/{{_webStoreId}}/product-categories/children?parentProductCategoryId={{_b2bWebStoreParentCategoryId}}",
									"host": [
										"{{_instanceUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"commerce",
										"webstores",
										"{{_webStoreId}}",
										"product-categories",
										"children"
									],
									"query": [
										{
											"key": "parentProductCategoryId",
											"value": "{{_b2bWebStoreParentCategoryId}}"
										}
									]
								},
								"description": "Uses the variable _productSearchTerm_ to search for products in the webstore. Sets the first returned product in the variable _productId_."
							},
							"response": []
						}
					],
					"description": "Interactions with the the [Commerce Webstore Product Categories Children ](https://developer.salesforce.com/docs/atlas.en-us.chatterapi.meta/chatterapi/connect_resources_commerce_webstore_product_categories_children.htm) using oAuth 2.0 for authentication.\n\n`/commerce/webstores/webstoreId/product-categories/children`\n\n**oAuth 2.0 Token setup steps**\n\n1. Check in Setup -> OAuth and OpenID Connect Settings -> Allow OAuth Username-Password Flows: Enabled\n    \n2. Click on the Request with a name like \"Set your oAuth 2.0 Token in Authorization tab\"\n    \n3. Click the \"Authorization\" tab\n    \n4. Click the \"Get New Access Token\" button\n    \n5. Click the \"Proceed\" button\n    \n6. Click the \"Use Token\" button\n    \n7. Retry running the folder"
				}
			],
			"description": "Interactions with the the [Commerce Webstore Product Categories Children](https://developer.salesforce.com/docs/atlas.en-us.chatterapi.meta/chatterapi/connect_resources_commerce_webstore_product_categories_children.htm)\n\n`/commerce/webstores/webstoreId/product-categories/children`"
		},
		{
			"name": "Product Pricing",
			"item": [
				{
					"name": "Get Pricing (Buyer Login)",
					"item": [
						{
							"name": "1. Clear Collection Variables",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
											"\r",
											"// Check for environment selection\r",
											"if(pm.environment.name === undefined) {\r",
											"    const msg = 'No Postman environment selected or set.';\r",
											"    pm.expect.fail(msg);\r",
											"}\r",
											"\r",
											"// Clean up the variables from the collection set throughout the various calls\r",
											"pm.collectionVariables.clear();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Tests...`);\r",
											"\r",
											"pm.test('Make sure collection variables are clean', () => {\r",
											"    pm.expect(JSON.parse(JSON.stringify(pm.collectionVariables.values)).map((v) => v.key + ': ' + v.value)).to.be.an('array').empty;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "postman-echo.com/get",
									"host": [
										"postman-echo",
										"com"
									],
									"path": [
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "2. Log in as System Administrator (SOAP)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Tests...`);\r",
											"console.warn(`Code: ${pm.response.code} | Status: ${pm.response.status} | Response time: ${pm.response.responseTime} ms`);\r",
											"\r",
											"pm.expect(pm.response.text().includes('INVALID_LOGIN'), 'INVALID_LOGIN found in response - Suggested fix: Check username, password and tokens in the Postman Environment').to.be.false;\r",
											"\r",
											"pm.expect(pm.response.text().includes('API_CURRENTLY_DISABLED'), 'API_CURRENTLY_DISABLED found in response - Suggested fix: Create a Permission Set like \\'Api Enabled\\' with the API Enabled checkbox active in System Permissions and apply it to the user').to.be.false;\r",
											"\r",
											"const expectedResponseCodes = [200];\r",
											"pm.expect(pm.response.code).to.be.oneOf(expectedResponseCodes, \"Response code not in expected range\");\r",
											"\r",
											"pm.test('Validate the access token is found in the body and save it to the variables', () => {\r",
											"    const result = xml2Json(pm.response.text())['soapenv:Envelope']['soapenv:Body'].loginResponse.result;\r",
											"    const url = result.serverUrl.split('/');\r",
											"\r",
											"    pm.expect(result.sessionId).to.exist;\r",
											"    pm.expect(result.sessionId).to.be.a.string;\r",
											"\r",
											"    pm.collectionVariables.set('_token', result.sessionId);\r",
											"    pm.collectionVariables.set('_instanceUrl', url[0] + '//' + url[2]);\r",
											"    pm.collectionVariables.set('_userId', result.userId);\r",
											"    pm.collectionVariables.set('_orgId', result.userInfo.organizationId);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const expectedStringsInEnvironmentVariables = ['orgLoginUrl','apiVersion','orgAdminUsername','orgAdminPassword','orgAdminSecurityToken'];\r",
											"const expectedStringsInCollectionVariables = [];\r",
											"\r",
											"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											"\r",
											"// Expected strings in environment variables\r",
											"for(const esiev of expectedStringsInEnvironmentVariables)\r",
											"{\r",
											"    if(!pm.environment.has(esiev))\r",
											"    {\r",
											"        const msg = `Expected Postman environment variable not found: '${esiev} in environment: '${pm.environment.name}'`;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"\r",
											"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
											"}\r",
											"\r",
											"// Expected strings in collection variables\r",
											"for(esicv of expectedStringsInCollectionVariables)\r",
											"{\r",
											"    if(!pm.collectionVariables.has(esicv))\r",
											"    {\r",
											"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    \r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "text/xml; charset=UTF-8",
										"type": "text"
									},
									{
										"key": "SOAPAction",
										"value": "login",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "text/xml",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\r\n<env:Envelope xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"\r\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n    xmlns:n1=\"urn:partner.soap.sforce.com\"\r\n    xmlns:env=\"http://schemas.xmlsoap.org/soap/envelope/\">\r\n    <env:Body>\r\n        <n1:login>\r\n            <n1:username><![CDATA[{{orgAdminUsername}}]]></n1:username>\r\n            <n1:password><![CDATA[{{orgAdminPassword}}]]></n1:password>\r\n        </n1:login>\r\n    </env:Body>\r\n</env:Envelope>"
								},
								"url": {
									"raw": "{{orgLoginUrl}}/services/Soap/u/{{apiVersion}}",
									"host": [
										"{{orgLoginUrl}}"
									],
									"path": [
										"services",
										"Soap",
										"u",
										"{{apiVersion}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "3. Look Up and Set WebStore Id (Query API)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Tests...`);\r",
											"console.warn(`Code: ${pm.response.code} | Status: ${pm.response.status} | Response time: ${pm.response.responseTime} ms`);\r",
											"const expectedResponseCodes = [200];\r",
											"pm.expect(pm.response.code).to.be.oneOf(expectedResponseCodes, \"Response code not in expected range\");\r",
											"\r",
											"pm.test('Response is valid and has a JSON body', () => {\r",
											"     pm.response.to.be.success;\r",
											"     pm.response.to.be.withBody;\r",
											"     pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test('Validate the response and saves the WebStore Id in the collection variables', () => {\r",
											"    const data = pm.response.json();\r",
											"    pm.expect(data.records).to.exist;\r",
											"    pm.expect(data.records).to.be.an('array');\r",
											"    pm.expect(data.records.length).to.eql(1);\r",
											"    const webStore = data.records[0];\r",
											"    pm.expect(webStore.Id).to.exist;\r",
											"    pm.expect(webStore.Id).to.be.an('string');\r",
											"    pm.collectionVariables.set('_webStoreId', webStore.Id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											"\r",
											"// Expected strings in environment variables\r",
											"['orgLoginUrl','apiVersion', 'webStoreName'].forEach(esiev => {\r",
											"    if(!pm.environment.has(esiev)) {\r",
											"        const msg = 'Expected Postman environment variable not found: ' + esiev;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
											"});\r",
											"\r",
											"// Expected strings in collection variables\r",
											"['_instanceUrl'].forEach(esicv => {\r",
											"    if(!pm.collectionVariables.has(esicv)) {\r",
											"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{_instanceUrl}}/services/data/v{{apiVersion}}/query/?q=SELECT+Id,+Name+FROM+WebStore+WHERE+Name+=+'{{webStoreName}}'",
									"host": [
										"{{_instanceUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"query",
										""
									],
									"query": [
										{
											"key": "q",
											"value": "SELECT+Id,+Name+FROM+WebStore+WHERE+Name+=+'{{webStoreName}}'"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "4. Set Effective Account Id (Query API)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Tests...`);\r",
											"console.warn(`Code: ${pm.response.code} | Status: ${pm.response.status} | Response time: ${pm.response.responseTime} ms`);\r",
											"const expectedResponseCodes = [200];\r",
											"pm.expect(pm.response.code).to.be.oneOf(expectedResponseCodes, \"Response code not in expected range\");\r",
											"\r",
											"pm.test('Response is valid and has a JSON body', () => {\r",
											"     pm.response.to.be.success;\r",
											"     pm.response.to.be.withBody;\r",
											"     pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test('Validate the response and saves the WebStore Id in the collection variables', () => {\r",
											"    const data = pm.response.json();\r",
											"    pm.expect(data.records).to.exist;\r",
											"    pm.expect(data.records).to.be.an('array');\r",
											"    pm.expect(data.records.length).to.eql(1);\r",
											"    const account = data.records[0];\r",
											"    pm.expect(account.Id).to.exist;\r",
											"    pm.expect(account.Id).to.be.an('string');\r",
											"    pm.collectionVariables.set('_effectiveAccountId', account.Id);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const expectedStringsInEnvironmentVariables = ['orgLoginUrl','apiVersion', 'webStoreName', 'buyerAccountName'];\r",
											"const expectedStringsInCollectionVariables = ['_instanceUrl']\r",
											"\r",
											"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											"\r",
											"// Expected strings in environment variables\r",
											"for(const esiev of expectedStringsInEnvironmentVariables)\r",
											"{\r",
											"    if(!pm.environment.has(esiev))\r",
											"    {\r",
											"        const msg = 'Expected Postman environment variable not found: ' + esiev;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"\r",
											"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
											"}\r",
											"\r",
											"// Expected strings in collection variables\r",
											"for(esicv of expectedStringsInCollectionVariables)\r",
											"{\r",
											"    if(!pm.collectionVariables.has(esicv)) {\r",
											"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{_instanceUrl}}/services/data/v{{apiVersion}}/query/?q=SELECT+Id,+Name+FROM+Account+WHERE+Name+=+'{{buyerAccountName}}'",
									"host": [
										"{{_instanceUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"query",
										""
									],
									"query": [
										{
											"key": "q",
											"value": "SELECT+Id,+Name+FROM+Account+WHERE+Name+=+'{{buyerAccountName}}'"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "5. Set Product Ids (Query API)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Code reference: SetProductIdsViaQueryAPI_PostResponse.js\r",
											"\r",
											"console.log(`${pm.info.requestName} Tests...`);\r",
											"console.warn(`Code: ${pm.response.code} | Status: ${pm.response.status} | Response time: ${pm.response.responseTime} ms`);\r",
											"const expectedResponseCodes = [200];\r",
											"pm.expect(pm.response.code).to.be.oneOf(expectedResponseCodes, \"Response code not in expected range\");\r",
											"\r",
											"pm.test('Response is valid and has a JSON body', () => {\r",
											"     pm.response.to.be.success;\r",
											"     pm.response.to.be.withBody;\r",
											"     pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test('Validate the response and save the Product Ids in the collection variables', () => {\r",
											"    const data = pm.response.json();\r",
											"    pm.expect(data.records).to.exist;\r",
											"    pm.expect(data.records).to.be.an('array');\r",
											"    pm.expect(data.records.length).greaterThan(1);\r",
											"\r",
											"    const productIds = [];\r",
											"\r",
											"    for(const p of data.records)\r",
											"    {\r",
											"        productIds.push(p.Id);\r",
											"    }\r",
											"\r",
											"    console.log('# of Product Ids: ' + productIds.length + ' Details:\\r\\n' + productIds.join(',\\r\\n'));\r",
											"    pm.collectionVariables.set('_productIds', JSON.stringify(productIds));\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Code reference: SetProductIdsViaQueryAPI_PreRequest.js\r",
											"\r",
											"const expectedStringsInEnvironmentVariables = ['orgLoginUrl','apiVersion', 'webStoreName', 'buyerAccountName', 'productNamesCommaDelimited'];\r",
											"const expectedStringsInCollectionVariables = ['_instanceUrl'];\r",
											"\r",
											"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											"\r",
											"// Expected strings in environment variables\r",
											"for(const esiev of expectedStringsInEnvironmentVariables)\r",
											"{\r",
											"    if(!pm.environment.has(esiev))\r",
											"    {\r",
											"        const msg = `Expected Postman environment variable not found: '${esiev} in environment: '${pm.environment.name}'`;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"\r",
											"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
											"}\r",
											"\r",
											"// Expected strings in collection variables\r",
											"for(esicv of expectedStringsInCollectionVariables)\r",
											"{\r",
											"    if(!pm.collectionVariables.has(esicv))\r",
											"    {\r",
											"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
											"}\r",
											"\r",
											"console.log('Parsing and assigning productNames...');\r",
											"const productNamesCommaDelimited = pm.environment.get('productNamesCommaDelimited');\r",
											"const productNamesArray = productNamesCommaDelimited.split(',');\r",
											"console.log('# of Product Names: ' + productNamesArray.length + ' Details:\\r\\n' + productNamesArray.join(',\\r\\n'));\r",
											"pm.collectionVariables.set('_productNames', '\\'' + productNamesArray.join('\\',\\'') + '\\'');"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{_instanceUrl}}/services/data/v{{apiVersion}}/query/?q=SELECT+Id,+Name+FROM+Product2+WHERE+Name+in(+{{_productNames}})",
									"host": [
										"{{_instanceUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"query",
										""
									],
									"query": [
										{
											"key": "q",
											"value": "SELECT+Id,+Name+FROM+Product2+WHERE+Name+in(+{{_productNames}})"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "6. Login as Buyer (SOAP)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Tests...`);",
											"console.warn(`Code: ${pm.response.code} | Status: ${pm.response.status} | Response time: ${pm.response.responseTime} ms`);",
											"",
											"pm.expect(pm.response.text().includes('INVALID_LOGIN'), 'INVALID_LOGIN found in response - Suggested fix: Check username, password and tokens in the Postman Environment').to.be.false;",
											"",
											"pm.expect(pm.response.text().includes('API_CURRENTLY_DISABLED'), 'API_CURRENTLY_DISABLED found in response - Suggested fix: Create a Permission Set like \\'Api Enabled\\' with the API Enabled checkbox active in System Permissions and apply it to the user').to.be.false;",
											"",
											"const expectedResponseCodes = [200];",
											"pm.expect(pm.response.code).to.be.oneOf(expectedResponseCodes, \"Response code not in expected range\");",
											"",
											"//const responseJson = xml2Json(responseBody);",
											"//buyerSessionId=responseJson['soapenv:Envelope']['soapenv:Body']['loginResponse']['result']['sessionId']",
											"//const context = pm.environment.name ? pm.environment : pm.collectionVariables;",
											"//pm.collectionVariables.set('_token', buyerSessionId);",
											"",
											"pm.test('Validate the access token is found in the body and save it to a collection variable', () => {",
											"    ",
											"    //const responseJson = xml2Json(responseBody);",
											"    //buyerSessionId=responseJson['soapenv:Envelope']['soapenv:Body']['loginResponse']['result']['sessionId']",
											"    //const context = pm.environment.name ? pm.environment : pm.collectionVariables;",
											"    //context.set('_accessToken', buyerSessionId);",
											"    ",
											"    ",
											"    //const result = xml2Json(pm.response.text())['soapenv:Envelope']['soapenv:Body'].loginResponse.result;",
											"    const result = xml2Json(pm.response.text())['soapenv:Envelope']['soapenv:Body'].loginResponse.result;",
											"    const url = result.serverUrl.split('/');",
											"",
											"    pm.expect(result.sessionId).to.exist;",
											"    pm.expect(result.sessionId).to.be.a.string;",
											"",
											"    pm.collectionVariables.set('_token', result.sessionId);",
											"    pm.collectionVariables.set('_instanceUrl', url[0] + '//' + url[2]);",
											"    pm.collectionVariables.set('_userId', result.userId);",
											"    pm.collectionVariables.set('_orgId', result.userInfo.organizationId);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											"\r",
											"// Expected strings in environment variables\r",
											"['orgLoginUrl','apiVersion'].forEach(esiev => {\r",
											"    if(!pm.environment.has(esiev)) {\r",
											"        const msg = 'Expected Postman environment variable not found: ' + esiev;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
											"});\r",
											"\r",
											"// Expected strings in collection variables\r",
											"['_orgId', '_webStoreId'].forEach(esicv => {\r",
											"    if(!pm.collectionVariables.has(esicv)) {\r",
											"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "text/xml; charset=UTF-8"
									},
									{
										"key": "SOAPAction",
										"value": "login"
									},
									{
										"key": "Accept",
										"value": "text/xml"
									},
									{
										"key": "Cookie",
										"value": "BrowserId=POhd6XTZEe2v6_8M7WG26g"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap:Envelope xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\" \nxmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://\nwww.w3.org/2001/XMLSchema\">\n    <soap:Header>\n        <LoginScopeHeader xmlns=\"urn:partner.soap.sforce.com\">\n            <organizationId>{{_orgId}}</organizationId>\n        </LoginScopeHeader>\n    </soap:Header>\n    <soap:Body>\n        <login xmlns=\"urn:partner.soap.sforce.com\">\n            <username><![CDATA[{{buyerUsername}}]]></username>\n            <password><![CDATA[{{buyerPassword}}]]></password>\n        </login>\n    </soap:Body>\n</soap:Envelope>"
								},
								"url": {
									"raw": "{{orgLoginUrl}}/services/Soap/u/{{apiVersion}}",
									"host": [
										"{{orgLoginUrl}}"
									],
									"path": [
										"services",
										"Soap",
										"u",
										"{{apiVersion}}"
									]
								},
								"description": "Authenticate the shopper through the variables _buyerUsername_ and _buyerPassword_. Generated session ID is saved in _accessToken for use in the other calls in the collection."
							},
							"response": []
						},
						{
							"name": "7. Search for Products (Connect API)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Tests...`);",
											"console.warn(`Code: ${pm.response.code} | Status: ${pm.response.status} | Response time: ${pm.response.responseTime} ms`);",
											"const expectedResponseCodes = [201];",
											"pm.expect(pm.response.code).to.be.oneOf(expectedResponseCodes, \"Response code not in expected range\");",
											"",
											"pm.test('Response is valid and has a JSON body', () => {",
											"    pm.response.to.be.success;",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test('Validate the response and save the product id to a collection variable', () => {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.productsPage).to.exist;",
											"    pm.expect(jsonData.productsPage).to.be.an('object');",
											"    pm.expect(jsonData.productsPage.products).to.exist;",
											"    pm.expect(jsonData.productsPage.products).to.be.an('array');",
											"    pm.expect(jsonData.productsPage.products[0]).to.exist;",
											"    pm.expect(jsonData.productsPage.products[0]).to.be.an('object');",
											"    pm.expect(jsonData.productsPage.products[0]).to.exist;",
											"    pm.expect(jsonData.productsPage.products[0].id).to.be.an('string');",
											"    pm.collectionVariables.set('_productId', jsonData.productsPage.products[0].id);",
											"});",
											"",
											"// Remove the productId from the collection looked up as Administrator in \"Set Product Ids\" to avoid adding more of the same in \"Add multiple Products to Cart\"",
											"const productIdFromSearch = pm.collectionVariables.get('_productId');",
											"const productIds = pm.collectionVariables.get('_productIds');",
											"const index = productIds.indexOf(productIdFromSearch);",
											"if (index > -1) { // only splice when element found",
											"  productIds.splice(index, 1); // remove only one item",
											"}",
											"pm.collectionVariables.set('_productIds', productIds);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											"\r",
											"// Expected strings in environment variables\r",
											"['orgHostMySalesforceFormat','apiVersion', 'productSearchTerm'].forEach(esiev => {\r",
											"    if(!pm.environment.has(esiev)) {\r",
											"        const msg = 'Expected Postman environment variable not found: ' + esiev;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
											"});\r",
											"\r",
											"// Expected strings in collection  variables\r",
											"['_instanceUrl', '_webStoreId', '_token', '_orgId'].forEach(esicv => {\r",
											"    if(!pm.collectionVariables.has(esicv)) {\r",
											"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableUrlEncoding": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"searchTerm\": \"{{productSearchTerm}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{_instanceUrl}}/services/data/v{{apiVersion}}/commerce/webstores/{{_webStoreId}}/search/product-search",
									"host": [
										"{{_instanceUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"commerce",
										"webstores",
										"{{_webStoreId}}",
										"search",
										"product-search"
									]
								},
								"description": "Uses the variable _productSearchTerm_ to search for products in the webstore. Sets the first returned product in the variable _productId_."
							},
							"response": []
						},
						{
							"name": "8. Get Product Pricing - Single (Connect API)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Tests...`);",
											"console.warn(`Code: ${pm.response.code} | Status: ${pm.response.status} | Response time: ${pm.response.responseTime} ms`);",
											"const expectedResponseCodes = [200];",
											"pm.expect(pm.response.code).to.be.oneOf(expectedResponseCodes, \"Response code not in expected range\");",
											"",
											"pm.test('Response is valid and has a JSON body', () => {",
											"    pm.response.to.be.success;",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test('Validate top level data', () => {",
											"    pm.expect(jsonData).to.be.an('object').with.property('currencyIsoCode').to.be.an('string').with.length.greaterThan(2);",
											"    pm.expect(jsonData).to.be.an('object').with.property('listPrice');",
											"    pm.expect(jsonData).to.be.an('object').with.property('pricebookEntryId').to.be.an('string').with.length.greaterThan(0);",
											"    pm.expect(jsonData).to.be.an('object').with.property('productPriceEntries').to.be.an('array').with.length.greaterThan(0);",
											"    pm.expect(jsonData).to.be.an('object').with.property('unitPrice')",
											"    pm.expect(parseFloat(jsonData.listPrice)).to.be.an('number').greaterThan(0);",
											"    pm.expect(parseFloat(jsonData.unitPrice)).to.be.an('number').greaterThan(0);",
											"    pm.expect(jsonData.currencyIsoCode).equals(pm.environment.get('currencyIsoCode'));",
											"});",
											"",
											"pm.test('Validate nested data', () => {",
											"    //console.warn(JSON.stringify(jsonData.productPriceEntries[0]));",
											"    pm.expect(jsonData.productPriceEntries[0]).to.be.an('object').with.property('listPrice');",
											"    pm.expect(jsonData.productPriceEntries[0]).to.be.an('object').with.property('pricebookEntryId').to.be.an('string').with.length.greaterThan(0);",
											"    pm.expect(jsonData.productPriceEntries[0].success).to.be.an('boolean').that.equals(true);",
											"    pm.expect(parseFloat(jsonData.productPriceEntries[0].listPrice)).to.be.an('number').greaterThan(0);",
											"    pm.expect(parseFloat(jsonData.productPriceEntries[0].unitPrice)).to.be.an('number').greaterThan(0);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const expectedStringsInEnvironmentVariables = ['orgHostMySalesforceFormat','apiVersion'];\r",
											"const expectedStringsInCollectionVariables = ['_instanceUrl', '_webStoreId', '_productId', '_token', '_effectiveAccountId'];\r",
											"\r",
											"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											"\r",
											"// Expected strings in environment variables\r",
											"for(const esiev of expectedStringsInEnvironmentVariables)\r",
											"{\r",
											"    if(!pm.environment.has(esiev))\r",
											"    {\r",
											"        const msg = `Expected Postman environment variable not found: '${esiev} in environment: '${pm.environment.name}'`;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"\r",
											"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
											"}\r",
											"\r",
											"// Expected strings in collection variables\r",
											"for(esicv of expectedStringsInCollectionVariables)\r",
											"{\r",
											"    if(!pm.collectionVariables.has(esicv))\r",
											"    {\r",
											"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{_instanceUrl}}/services/data/v{{apiVersion}}/commerce/webstores/{{_webStoreId}}/pricing/products/{{_productId}}?effectiveAccountId={{_effectiveAccountId}}",
									"host": [
										"{{_instanceUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"commerce",
										"webstores",
										"{{_webStoreId}}",
										"pricing",
										"products",
										"{{_productId}}"
									],
									"query": [
										{
											"key": "effectiveAccountId",
											"value": "{{_effectiveAccountId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "9. Get Product Pricing - Multiple (Connect API)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Tests...`);",
											"console.warn(`Code: ${pm.response.code} | Status: ${pm.response.status} | Response time: ${pm.response.responseTime} ms`);",
											"const expectedResponseCodes = [200];",
											"pm.expect(pm.response.code).to.be.oneOf(expectedResponseCodes, \"Response code not in expected range\");",
											"",
											"pm.test('Response is valid and has a JSON body', () => {",
											"    pm.response.to.be.success;",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test('Validate top level data', () => {",
											"    pm.expect(jsonData).to.be.an('object').with.property('currencyIsoCode').to.be.an('string').with.length.greaterThan(2);",
											"    pm.expect(jsonData.success).to.be.an('boolean').that.equals(true);",
											"    pm.expect(jsonData).to.be.an('object').with.property('pricingLineItemResults').to.be.an('array').with.length.greaterThan(1);",
											"    pm.expect(jsonData.currencyIsoCode).equals(pm.environment.get('currencyIsoCode'));",
											"});",
											"",
											"pm.test('Validate pricingLineItemResults', () => {",
											"    pm.expect(jsonData.pricingLineItemResults).to.be.an('array').with.length.greaterThan(1);",
											"",
											"    for(const plir of jsonData.pricingLineItemResults)",
											"    {",
											"        pm.expect(parseFloat(plir.listPrice)).to.be.an('number').greaterThan(0);",
											"        pm.expect(plir.pricebookEntryId).to.be.an('string').with.length.greaterThan(0);",
											"        pm.expect(plir.productId).to.be.an('string').with.length.greaterThan(0);",
											"        pm.expect(plir.success).to.be.an('boolean').that.equals(true);",
											"        pm.expect(parseFloat(plir.unitPrice)).to.be.an('number').greaterThan(0);",
											"    }",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const expectedStringsInEnvironmentVariables = ['orgHostMySalesforceFormat','apiVersion'];",
											"const expectedStringsInCollectionVariables = ['_instanceUrl', '_webStoreId', '_productId', '_productIds', '_token', '_effectiveAccountId'];",
											"",
											"console.log(`${pm.info.requestName} Pre-request Script...`);",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));",
											"",
											"// Expected strings in environment variables",
											"for(const esiev of expectedStringsInEnvironmentVariables)",
											"{",
											"    if(!pm.environment.has(esiev))",
											"    {",
											"        const msg = `Expected Postman environment variable not found: '${esiev} in environment: '${pm.environment.name}'`;",
											"        pm.expect.fail(msg);",
											"    }",
											"",
											"    pm.expect(pm.environment.get(esiev)).to.exist;",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');",
											"}",
											"",
											"// Expected strings in collection variables",
											"for(esicv of expectedStringsInCollectionVariables)",
											"{",
											"    if(!pm.collectionVariables.has(esicv))",
											"    {",
											"        const msg = 'Expected Postman collection variable not found: ' + esicv;",
											"        pm.expect.fail(msg);",
											"    }",
											"",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');",
											"}",
											"",
											"const productIds = JSON.parse(pm.collectionVariables.get('_productIds'));",
											"const productIdsJoined = productIds.join(',');",
											"pm.collectionVariables.set('_productIdsJoined', productIdsJoined);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{_instanceUrl}}/services/data/v{{apiVersion}}/commerce/webstores/{{_webStoreId}}/pricing/products?productIds={{_productIdsJoined}}&effectiveAccountId={{_effectiveAccountId}}",
									"host": [
										"{{_instanceUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"commerce",
										"webstores",
										"{{_webStoreId}}",
										"pricing",
										"products"
									],
									"query": [
										{
											"key": "productIds",
											"value": "{{_productIdsJoined}}"
										},
										{
											"key": "effectiveAccountId",
											"value": "{{_effectiveAccountId}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"description": "Interactions with the the [Commerce Webstore Pricing Products](https://developer.salesforce.com/docs/atlas.en-us.chatterapi.meta/chatterapi/connect_resources_commerce_webstore_pricing_products.htm) using the Buyer Login authentication flow.\n\n`/commerce/webstores/webstoreId/pricing/products/productId`"
				},
				{
					"name": "Get Pricing (oAuth 2.0)",
					"item": [
						{
							"name": "1. Clear Collection Variables",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
											"\r",
											"// Check for environment selection\r",
											"if(pm.environment.name === undefined) {\r",
											"    const msg = 'No Postman environment selected or set.';\r",
											"    pm.expect.fail(msg);\r",
											"}\r",
											"\r",
											"// Clean up the variables from the collection set throughout the various calls\r",
											"pm.collectionVariables.clear();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Tests...`);\r",
											"\r",
											"pm.test('Make sure collection variables are clean', () => {\r",
											"    pm.expect(JSON.parse(JSON.stringify(pm.collectionVariables.values)).map((v) => v.key + ': ' + v.value)).to.be.an('array').empty;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "postman-echo.com/get",
									"host": [
										"postman-echo",
										"com"
									],
									"path": [
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "2. Log in as System Administrator (SOAP)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Tests...`);\r",
											"console.warn(`Code: ${pm.response.code} | Status: ${pm.response.status} | Response time: ${pm.response.responseTime} ms`);\r",
											"\r",
											"pm.expect(pm.response.text().includes('INVALID_LOGIN'), 'INVALID_LOGIN found in response - Suggested fix: Check username, password and tokens in the Postman Environment').to.be.false;\r",
											"\r",
											"pm.expect(pm.response.text().includes('API_CURRENTLY_DISABLED'), 'API_CURRENTLY_DISABLED found in response - Suggested fix: Create a Permission Set like \\'Api Enabled\\' with the API Enabled checkbox active in System Permissions and apply it to the user').to.be.false;\r",
											"\r",
											"const expectedResponseCodes = [200];\r",
											"pm.expect(pm.response.code).to.be.oneOf(expectedResponseCodes, \"Response code not in expected range\");\r",
											"\r",
											"pm.test('Validate the access token is found in the body and save it to the variables', () => {\r",
											"    const result = xml2Json(pm.response.text())['soapenv:Envelope']['soapenv:Body'].loginResponse.result;\r",
											"    const url = result.serverUrl.split('/');\r",
											"\r",
											"    pm.expect(result.sessionId).to.exist;\r",
											"    pm.expect(result.sessionId).to.be.a.string;\r",
											"\r",
											"    pm.collectionVariables.set('_token', result.sessionId);\r",
											"    pm.collectionVariables.set('_instanceUrl', url[0] + '//' + url[2]);\r",
											"    pm.collectionVariables.set('_userId', result.userId);\r",
											"    pm.collectionVariables.set('_orgId', result.userInfo.organizationId);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const expectedStringsInEnvironmentVariables = ['orgLoginUrl','apiVersion','orgAdminUsername','orgAdminPassword','orgAdminSecurityToken'];\r",
											"const expectedStringsInCollectionVariables = [];\r",
											"\r",
											"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											"\r",
											"// Expected strings in environment variables\r",
											"for(const esiev of expectedStringsInEnvironmentVariables)\r",
											"{\r",
											"    if(!pm.environment.has(esiev))\r",
											"    {\r",
											"        const msg = `Expected Postman environment variable not found: '${esiev} in environment: '${pm.environment.name}'`;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"\r",
											"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
											"}\r",
											"\r",
											"// Expected strings in collection variables\r",
											"for(esicv of expectedStringsInCollectionVariables)\r",
											"{\r",
											"    if(!pm.collectionVariables.has(esicv))\r",
											"    {\r",
											"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    \r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "text/xml; charset=UTF-8",
										"type": "text"
									},
									{
										"key": "SOAPAction",
										"value": "login",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "text/xml",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\r\n<env:Envelope xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"\r\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n    xmlns:n1=\"urn:partner.soap.sforce.com\"\r\n    xmlns:env=\"http://schemas.xmlsoap.org/soap/envelope/\">\r\n    <env:Body>\r\n        <n1:login>\r\n            <n1:username><![CDATA[{{orgAdminUsername}}]]></n1:username>\r\n            <n1:password><![CDATA[{{orgAdminPassword}}]]></n1:password>\r\n        </n1:login>\r\n    </env:Body>\r\n</env:Envelope>"
								},
								"url": {
									"raw": "{{orgLoginUrl}}/services/Soap/u/{{apiVersion}}",
									"host": [
										"{{orgLoginUrl}}"
									],
									"path": [
										"services",
										"Soap",
										"u",
										"{{apiVersion}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "3. Look Up and Set WebStore Id (Query API)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Tests...`);\r",
											"console.warn(`Code: ${pm.response.code} | Status: ${pm.response.status} | Response time: ${pm.response.responseTime} ms`);\r",
											"const expectedResponseCodes = [200];\r",
											" pm.expect(pm.response.code).to.be.oneOf(expectedResponseCodes, \"Response code not in expected range\");\r",
											" \r",
											"\r",
											"pm.test('Response is valid and has a JSON body', () => {\r",
											"     pm.response.to.be.success;\r",
											"     pm.response.to.be.withBody;\r",
											"     pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test('Validate the response and saves the WebStore Id in the collection variables', () => {\r",
											"    const data = pm.response.json();\r",
											"    pm.expect(data.records).to.exist;\r",
											"    pm.expect(data.records).to.be.an('array');\r",
											"    pm.expect(data.records.length).to.eql(1);\r",
											"    const webStore = data.records[0];\r",
											"    pm.expect(webStore.Id).to.exist;\r",
											"    pm.expect(webStore.Id).to.be.an('string');\r",
											"    pm.collectionVariables.set('_webStoreId', webStore.Id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											"\r",
											"// Expected strings in environment variables\r",
											"['orgLoginUrl','apiVersion', 'webStoreName'].forEach(esiev => {\r",
											"    if(!pm.environment.has(esiev)) {\r",
											"        const msg = 'Expected Postman environment variable not found: ' + esiev;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
											"});\r",
											"\r",
											"// Expected strings in collection variables\r",
											"['_instanceUrl'].forEach(esicv => {\r",
											"    if(!pm.collectionVariables.has(esicv)) {\r",
											"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{_instanceUrl}}/services/data/v{{apiVersion}}/query/?q=SELECT+Id,+Name+FROM+WebStore+WHERE+Name+=+'{{webStoreName}}'",
									"host": [
										"{{_instanceUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"query",
										""
									],
									"query": [
										{
											"key": "q",
											"value": "SELECT+Id,+Name+FROM+WebStore+WHERE+Name+=+'{{webStoreName}}'"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "4. Set Effective Account Id (Query API)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Tests...`);\r",
											"console.warn(`Code: ${pm.response.code} | Status: ${pm.response.status} | Response time: ${pm.response.responseTime} ms`);\r",
											"const expectedResponseCodes = [200];\r",
											"pm.expect(pm.response.code).to.be.oneOf(expectedResponseCodes, \"Response code not in expected range\");\r",
											"\r",
											"pm.test('Response is valid and has a JSON body', () => {\r",
											"     pm.response.to.be.success;\r",
											"     pm.response.to.be.withBody;\r",
											"     pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test('Validate the response and saves the WebStore Id in the collection variables', () => {\r",
											"    const data = pm.response.json();\r",
											"    pm.expect(data.records).to.exist;\r",
											"    pm.expect(data.records).to.be.an('array');\r",
											"    pm.expect(data.records.length).to.eql(1);\r",
											"    const account = data.records[0];\r",
											"    pm.expect(account.Id).to.exist;\r",
											"    pm.expect(account.Id).to.be.an('string');\r",
											"    pm.collectionVariables.set('_effectiveAccountId', account.Id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											"\r",
											"// Expected strings in environment variables\r",
											"['orgLoginUrl','apiVersion', 'webStoreName', 'buyerAccountName'].forEach(esiev => {\r",
											"    if(!pm.environment.has(esiev)) {\r",
											"        const msg = 'Expected Postman environment variable not found: ' + esiev;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
											"});\r",
											"\r",
											"// Expected strings in collection variables\r",
											"['_instanceUrl'].forEach(esicv => {\r",
											"    if(!pm.collectionVariables.has(esicv)) {\r",
											"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{_instanceUrl}}/services/data/v{{apiVersion}}/query/?q=SELECT+Id,+Name+FROM+Account+WHERE+Name+=+'{{buyerAccountName}}'",
									"host": [
										"{{_instanceUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"query",
										""
									],
									"query": [
										{
											"key": "q",
											"value": "SELECT+Id,+Name+FROM+Account+WHERE+Name+=+'{{buyerAccountName}}'"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "5. Set Product Ids (Query API)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Tests...`);\r",
											"console.warn(`Code: ${pm.response.code} | Status: ${pm.response.status} | Response time: ${pm.response.responseTime} ms`);\r",
											"const expectedResponseCodes = [200];\r",
											"pm.expect(pm.response.code).to.be.oneOf(expectedResponseCodes, \"Response code not in expected range\");\r",
											"\r",
											"pm.test('Response is valid and has a JSON body', () => {\r",
											"     pm.response.to.be.success;\r",
											"     pm.response.to.be.withBody;\r",
											"     pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test('Validate the response and save the Product Ids in the collection variables', () => {\r",
											"    const data = pm.response.json();\r",
											"    pm.expect(data.records).to.exist;\r",
											"    pm.expect(data.records).to.be.an('array');\r",
											"    pm.expect(data.records.length).greaterThan(1);\r",
											"    \r",
											"    const productIds = [];\r",
											"    data.records.forEach(p => {\r",
											"        productIds.push(p.Id);\r",
											"    });\r",
											"    \r",
											"    console.log('# of Product Ids: ' + productIds.length + ' Details:\\r\\n' + productIds.join(',\\r\\n'));\r",
											"    pm.collectionVariables.set('_productIds', JSON.stringify(productIds));\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Code reference: SetProductIdsViaQueryAPI_PreRequest.js\r",
											"\r",
											"const expectedStringsInEnvironmentVariables = ['orgLoginUrl','apiVersion', 'webStoreName', 'buyerAccountName', 'productNamesCommaDelimited'];\r",
											"const expectedStringsInCollectionVariables = ['_instanceUrl'];\r",
											"\r",
											"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											"\r",
											"// Expected strings in environment variables\r",
											"for(const esiev of expectedStringsInEnvironmentVariables)\r",
											"{\r",
											"    if(!pm.environment.has(esiev))\r",
											"    {\r",
											"        const msg = `Expected Postman environment variable not found: '${esiev} in environment: '${pm.environment.name}'`;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"\r",
											"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
											"}\r",
											"\r",
											"// Expected strings in collection variables\r",
											"for(esicv of expectedStringsInCollectionVariables)\r",
											"{\r",
											"    if(!pm.collectionVariables.has(esicv))\r",
											"    {\r",
											"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
											"}\r",
											"\r",
											"console.log('Parsing and assigning productNames...');\r",
											"const productNamesCommaDelimited = pm.environment.get('productNamesCommaDelimited');\r",
											"const productNamesArray = productNamesCommaDelimited.split(',');\r",
											"console.log('# of Product Names: ' + productNamesArray.length + ' Details:\\r\\n' + productNamesArray.join(',\\r\\n'));\r",
											"pm.collectionVariables.set('_productNames', '\\'' + productNamesArray.join('\\',\\'') + '\\'');"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{_instanceUrl}}/services/data/v{{apiVersion}}/query/?q=SELECT+Id,+Name+FROM+Product2+WHERE+Name+in(+{{_productNames}})",
									"host": [
										"{{_instanceUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"query",
										""
									],
									"query": [
										{
											"key": "q",
											"value": "SELECT+Id,+Name+FROM+Product2+WHERE+Name+in(+{{_productNames}})"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "6. Set your oAuth 2.0 Token in Authorization tab",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
											"console.log('Checking oAuth has been set up...');\r",
											"\r",
											"const checkOpenAuthToken = (request) => {\r",
											"    const isTokenMissing = request.auth === undefined\r",
											"    || request.auth.oauth2 === undefined\r",
											"    || !request.auth.oauth2.has('accessToken')\r",
											"    || request.auth.oauth2.get('accessToken') === undefined\r",
											"    || request.auth.oauth2.get('accessToken') === null\r",
											"    || request.auth.oauth2.get('accessToken').length === 0;\r",
											"\r",
											"    if(isTokenMissing) {\r",
											"        const msg = 'Steps to fix issue \"Expected oAuth 2.0 token not found\":\\r\\n' + \r",
											"        '1. Check in Setup -> OAuth and OpenID Connect Settings -> Allow OAuth Username-Password Flows: Enabled \\r\\n' +\r",
											"        '2. Click on the Request with a name like \"Set your oAuth 2.0 Token in Authorization tab\"\\r\\n' +\r",
											"        '3. Click the \"Authorization\" tab\\r\\n' + \r",
											"        '4. Click the \"Get New Access Token\" button\\r\\n' +\r",
											"        '5. Click the \"Proceed\" button\\r\\n' + \r",
											"        '6. Click the \"Use Token\" button\\r\\n' +\r",
											"        '7. Retry your request';\r",
											"        console.error(msg);\r",
											"        pm.expect.fail('Expected oAuth 2.0 token not found. See steps above for a fix.');\r",
											"    }\r",
											"    else\r",
											"    {\r",
											"        const tokenAgeInMinutes = Math.floor(Math.floor((new Date().getTime() - pm.request.auth.oauth2.get('timestamp')) / 1000) / 60);\r",
											"        console.warn(`Token age: ${tokenAgeInMinutes} minutes`);\r",
											"        pm.collectionVariables.set('_token', pm.request.auth.oauth2.get('accessToken'));\r",
											"    }\r",
											"};\r",
											"\r",
											"checkOpenAuthToken(pm.request);\r",
											"\r",
											"pm.test('oAuth 2.0 Assertions', () => {\r",
											"    pm.expect(pm.request.auth).to.exist;\r",
											"    pm.expect(pm.request.auth).to.be.an('object');\r",
											"    pm.expect(pm.request.auth.oauth2).to.exist;\r",
											"    pm.expect(pm.request.auth.oauth2).to.be.an('object');\r",
											"    pm.expect(pm.request.auth.oauth2.has('accessToken')).to.be.true;\r",
											"    pm.expect(pm.request.auth.oauth2.get('accessToken')).to.exist;\r",
											"    pm.expect(pm.request.auth.oauth2.get('accessToken')).to.be.an('string').with.length.greaterThan(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Tests...`);\r",
											"console.warn(`Code: ${pm.response.code} | Status: ${pm.response.status} | Response time: ${pm.response.responseTime} ms`);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "client_authentication",
											"value": "body",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{orgAdminPassword}}{{orgAdminSecurityToken}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{orgAdminUsername}}",
											"type": "string"
										},
										{
											"key": "clientSecret",
											"value": "{{connectedAppConsumerSecret}}",
											"type": "string"
										},
										{
											"key": "clientId",
											"value": "{{connectedAppConsumerKey}}",
											"type": "string"
										},
										{
											"key": "accessTokenUrl",
											"value": "{{orgLoginUrl}}/services/oauth2/token",
											"type": "string"
										},
										{
											"key": "grant_type",
											"value": "password_credentials",
											"type": "string"
										},
										{
											"key": "tokenName",
											"value": "SF Token",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										},
										{
											"key": "useBrowser",
											"value": true,
											"type": "boolean"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "postman-echo.com/get",
									"host": [
										"postman-echo",
										"com"
									],
									"path": [
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "7. Search for Products (Connect API)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Tests...`);",
											"console.warn(`Code: ${pm.response.code} | Status: ${pm.response.status} | Response time: ${pm.response.responseTime} ms`);",
											"",
											"const validateSession = (jsonData) => {",
											"    if(jsonData[0] !== undefined && jsonData[0].message !== undefined && jsonData[0].errorCode !== undefined &&",
											"        (jsonData[0].message.toUpperCase() === 'SESSION EXPIRED OR INVALID' || jsonData[0].errorCode.toUpperCase() === 'INVALID_SESSION_ID')) {",
											"        const msg = 'Steps to fix issue \"Expected oAuth 2.0 token found but likely expired\":\\r\\n' + ",
											"        '1. Check in Setup -> OAuth and OpenID Connect Settings -> Allow OAuth Username-Password Flows: Enabled \\r\\n' +",
											"        '2. Click on the Request with a name like \"Set your oAuth 2.0 Token in Authorization tab\"\\r\\n' +",
											"        '3. Click the \"Authorization\" tab\\r\\n' + ",
											"        '4. Click the \"Get New Access Token\" button\\r\\n' +",
											"        '5. Click the \"Proceed\" button\\r\\n' + ",
											"        '6. Click the \"Use Token\" button\\r\\n' +",
											"        '7. Retry your request';",
											"        console.error(msg);",
											"        pm.expect.fail('oAuth 2.0 token found but likely expired. See steps above for a fix.');",
											"    }",
											"};",
											"",
											"const jsonData = pm.response.json();",
											"validateSession(jsonData);",
											"",
											"const expectedResponseCodes = [201];",
											"pm.expect(pm.response.code).to.be.oneOf(expectedResponseCodes, \"Response code not in expected range\");",
											" ",
											"pm.test('Response is valid and has a JSON body', () => {",
											"    pm.response.to.be.success;",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test('Validate the response and save the product id to a collection variable', () => {",
											"    pm.expect(jsonData.productsPage).to.exist;",
											"    pm.expect(jsonData.productsPage).to.be.an('object');",
											"    pm.expect(jsonData.productsPage.products).to.exist;",
											"    pm.expect(jsonData.productsPage.products).to.be.an('array');",
											"    pm.expect(jsonData.productsPage.products[0]).to.exist;",
											"    pm.expect(jsonData.productsPage.products[0]).to.be.an('object');",
											"    pm.expect(jsonData.productsPage.products[0]).to.exist;",
											"    pm.expect(jsonData.productsPage.products[0].id).to.be.an('string');",
											"    pm.collectionVariables.set('_productId', jsonData.productsPage.products[0].id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											"\r",
											"// Expected strings in environment variables\r",
											"['orgHostMySalesforceFormat','apiVersion', 'productSearchTerm'].forEach(esiev => {\r",
											"    if(!pm.environment.has(esiev)) {\r",
											"        const msg = 'Expected Postman environment variable not found: ' + esiev;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
											"});\r",
											"\r",
											"// Expected strings in collection  variables\r",
											"['_instanceUrl', '_webStoreId', '_token', '_orgId'].forEach(esicv => {\r",
											"    if(!pm.collectionVariables.has(esicv)) {\r",
											"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableUrlEncoding": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"searchTerm\": \"{{productSearchTerm}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{_instanceUrl}}/services/data/v{{apiVersion}}/commerce/webstores/{{_webStoreId}}/search/product-search",
									"host": [
										"{{_instanceUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"commerce",
										"webstores",
										"{{_webStoreId}}",
										"search",
										"product-search"
									]
								},
								"description": "Uses the variable _productSearchTerm_ to search for products in the webstore. Sets the first returned product in the variable _productId_."
							},
							"response": []
						},
						{
							"name": "8. Get Product Pricing - Single (Connect API)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Tests...`);",
											"console.warn(`Code: ${pm.response.code} | Status: ${pm.response.status} | Response time: ${pm.response.responseTime} ms`);",
											"",
											"const validateSession = (jsonData) => {",
											"    if(jsonData[0] !== undefined && jsonData[0].message !== undefined && jsonData[0].errorCode !== undefined &&",
											"        (jsonData[0].message.toUpperCase() === 'SESSION EXPIRED OR INVALID' || jsonData[0].errorCode.toUpperCase() === 'INVALID_SESSION_ID')) {",
											"        const msg = 'Steps to fix issue \"Expected oAuth 2.0 token found but likely expired\":\\r\\n' + ",
											"        '1. Check in Setup -> OAuth and OpenID Connect Settings -> Allow OAuth Username-Password Flows: Enabled \\r\\n' +",
											"        '2. Click on the Request with a name like \"Set your oAuth 2.0 Token in Authorization tab\"\\r\\n' +",
											"        '3. Click the \"Authorization\" tab\\r\\n' + ",
											"        '4. Click the \"Get New Access Token\" button\\r\\n' +",
											"        '5. Click the \"Proceed\" button\\r\\n' + ",
											"        '6. Click the \"Use Token\" button\\r\\n' +",
											"        '7. Retry your request';",
											"        console.error(msg);",
											"        pm.expect.fail('oAuth 2.0 token found but likely expired. See steps above for a fix.');",
											"    }",
											"};",
											"",
											"const jsonData = pm.response.json();",
											"validateSession(jsonData);",
											"",
											"const expectedResponseCodes = [200];",
											"pm.expect(pm.response.code).to.be.oneOf(expectedResponseCodes, \"Response code not in expected range\");",
											" ",
											"pm.test('Response is valid and has a JSON body', () => {",
											"    pm.response.to.be.success;",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test('Validate top level data', () => {",
											"    pm.expect(jsonData).to.be.an('object').with.property('currencyIsoCode').to.be.an('string').with.length.greaterThan(2);",
											"    pm.expect(jsonData).to.be.an('object').with.property('listPrice');",
											"    pm.expect(jsonData).to.be.an('object').with.property('pricebookEntryId').to.be.an('string').with.length.greaterThan(0);",
											"    pm.expect(jsonData).to.be.an('object').with.property('productPriceEntries').to.be.an('array').with.length.greaterThan(0);",
											"    pm.expect(jsonData).to.be.an('object').with.property('unitPrice')",
											"    pm.expect(parseFloat(jsonData.listPrice)).to.be.an('number').greaterThan(0);",
											"    pm.expect(parseFloat(jsonData.unitPrice)).to.be.an('number').greaterThan(0);",
											"    pm.expect(jsonData.currencyIsoCode).equals(pm.environment.get('currencyIsoCode'));",
											"});",
											"",
											"pm.test('Validate nested data', () => {",
											"    //console.warn(JSON.stringify(jsonData.productPriceEntries[0]));",
											"    pm.expect(jsonData.productPriceEntries[0]).to.be.an('object').with.property('listPrice');",
											"    pm.expect(jsonData.productPriceEntries[0]).to.be.an('object').with.property('pricebookEntryId').to.be.an('string').with.length.greaterThan(0);",
											"    pm.expect(jsonData.productPriceEntries[0].success).to.be.an('boolean').that.equals(true);",
											"    pm.expect(parseFloat(jsonData.productPriceEntries[0].listPrice)).to.be.an('number').greaterThan(0);",
											"    pm.expect(parseFloat(jsonData.productPriceEntries[0].unitPrice)).to.be.an('number').greaterThan(0);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const expectedStringsInEnvironmentVariables = ['orgHostMySalesforceFormat','apiVersion'];\r",
											"const expectedStringsInCollectionVariables = ['_instanceUrl', '_webStoreId', '_productId', '_token', '_effectiveAccountId'];\r",
											"\r",
											"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											"\r",
											"// Expected strings in environment variables\r",
											"for(const esiev of expectedStringsInEnvironmentVariables)\r",
											"{\r",
											"    if(!pm.environment.has(esiev))\r",
											"    {\r",
											"        const msg = `Expected Postman environment variable not found: '${esiev} in environment: '${pm.environment.name}'`;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"\r",
											"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
											"}\r",
											"\r",
											"// Expected strings in collection variables\r",
											"for(esicv of expectedStringsInCollectionVariables)\r",
											"{\r",
											"    if(!pm.collectionVariables.has(esicv))\r",
											"    {\r",
											"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{_instanceUrl}}/services/data/v{{apiVersion}}/commerce/webstores/{{_webStoreId}}/pricing/products/{{_productId}}?effectiveAccountId={{_effectiveAccountId}}",
									"host": [
										"{{_instanceUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"commerce",
										"webstores",
										"{{_webStoreId}}",
										"pricing",
										"products",
										"{{_productId}}"
									],
									"query": [
										{
											"key": "effectiveAccountId",
											"value": "{{_effectiveAccountId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "9. Get Product Pricing - Multiple (Connect API)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Tests...`);",
											"console.warn(`Code: ${pm.response.code} | Status: ${pm.response.status} | Response time: ${pm.response.responseTime} ms`);",
											"",
											"const validateSession = (jsonData) => {",
											"    if(jsonData[0] !== undefined && jsonData[0].message !== undefined && jsonData[0].errorCode !== undefined &&",
											"        (jsonData[0].message.toUpperCase() === 'SESSION EXPIRED OR INVALID' || jsonData[0].errorCode.toUpperCase() === 'INVALID_SESSION_ID')) {",
											"        const msg = 'Steps to fix issue \"Expected oAuth 2.0 token found but likely expired\":\\r\\n' + ",
											"        '1. Check in Setup -> OAuth and OpenID Connect Settings -> Allow OAuth Username-Password Flows: Enabled \\r\\n' +",
											"        '2. Click on the Request with a name like \"Set your oAuth 2.0 Token in Authorization tab\"\\r\\n' +",
											"        '3. Click the \"Authorization\" tab\\r\\n' + ",
											"        '4. Click the \"Get New Access Token\" button\\r\\n' +",
											"        '5. Click the \"Proceed\" button\\r\\n' + ",
											"        '6. Click the \"Use Token\" button\\r\\n' +",
											"        '7. Retry your request';",
											"        console.error(msg);",
											"        pm.expect.fail('oAuth 2.0 token found but likely expired. See steps above for a fix.');",
											"    }",
											"};",
											"",
											"const jsonData = pm.response.json();",
											"validateSession(jsonData);",
											"",
											"const expectedResponseCodes = [200];",
											"pm.expect(pm.response.code).to.be.oneOf(expectedResponseCodes, \"Response code not in expected range\");",
											" ",
											"pm.test('Response is valid and has a JSON body', () => {",
											"    pm.response.to.be.success;",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test('Validate top level data', () => {",
											"    pm.expect(jsonData).to.be.an('object').with.property('currencyIsoCode').to.be.an('string').with.length.greaterThan(2);",
											"    pm.expect(jsonData.success).to.be.an('boolean').that.equals(true);",
											"    pm.expect(jsonData).to.be.an('object').with.property('pricingLineItemResults').to.be.an('array').with.length.greaterThan(1);",
											"    pm.expect(jsonData.currencyIsoCode).equals(pm.environment.get('currencyIsoCode'));",
											"});",
											"",
											"pm.test('Validate pricingLineItemResults', () => {",
											"    pm.expect(jsonData.pricingLineItemResults).to.be.an('array').with.length.greaterThan(1);",
											"    ",
											"    jsonData.pricingLineItemResults.forEach(plir => {",
											"        pm.expect(parseFloat(plir.listPrice)).to.be.an('number').greaterThan(0);",
											"        pm.expect(plir.pricebookEntryId).to.be.an('string').with.length.greaterThan(0);",
											"        pm.expect(plir.productId).to.be.an('string').with.length.greaterThan(0);",
											"        pm.expect(plir.success).to.be.an('boolean').that.equals(true);",
											"        pm.expect(parseFloat(plir.unitPrice)).to.be.an('number').greaterThan(0);",
											"    });",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const expectedStringsInEnvironmentVariables = ['orgHostMySalesforceFormat','apiVersion'];",
											"const expectedStringsInCollectionVariables = ['_instanceUrl', '_webStoreId', '_productId', '_productIds', '_token', '_effectiveAccountId'];",
											"",
											"console.log(`${pm.info.requestName} Pre-request Script...`);",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));",
											"",
											"// Expected strings in environment variables",
											"for(const esiev of expectedStringsInEnvironmentVariables)",
											"{",
											"    if(!pm.environment.has(esiev))",
											"    {",
											"        const msg = `Expected Postman environment variable not found: '${esiev} in environment: '${pm.environment.name}'`;",
											"        pm.expect.fail(msg);",
											"    }",
											"",
											"    pm.expect(pm.environment.get(esiev)).to.exist;",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');",
											"}",
											"",
											"// Expected strings in collection variables",
											"for(esicv of expectedStringsInCollectionVariables)",
											"{",
											"    if(!pm.collectionVariables.has(esicv))",
											"    {",
											"        const msg = 'Expected Postman collection variable not found: ' + esicv;",
											"        pm.expect.fail(msg);",
											"    }",
											"",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');",
											"}",
											"",
											"const productIds = JSON.parse(pm.collectionVariables.get('_productIds'));",
											"const productIdsJoined = productIds.join(',');",
											"pm.collectionVariables.set('_productIdsJoined', productIdsJoined);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{_instanceUrl}}/services/data/v{{apiVersion}}/commerce/webstores/{{_webStoreId}}/pricing/products?productIds={{_productIdsJoined}}&effectiveAccountId={{_effectiveAccountId}}",
									"host": [
										"{{_instanceUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"commerce",
										"webstores",
										"{{_webStoreId}}",
										"pricing",
										"products"
									],
									"query": [
										{
											"key": "productIds",
											"value": "{{_productIdsJoined}}"
										},
										{
											"key": "effectiveAccountId",
											"value": "{{_effectiveAccountId}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"description": "Interactions with the the [Commerce Webstore Pricing Products](https://developer.salesforce.com/docs/atlas.en-us.chatterapi.meta/chatterapi/connect_resources_commerce_webstore_pricing_products.htm) using oAuth 2.0 for authentication.\n\n`/commerce/webstores/webstoreId/pricing/products/productId`\n\n**oAuth 2.0 Token setup steps**\n\n1. Check in Setup -> OAuth and OpenID Connect Settings -> Allow OAuth Username-Password Flows: Enabled\n2. Click on the Request with a name like \"Set your oAuth 2.0 Token in Authorization tab\"\n3. Click the \"Authorization\" tab\n4. Click the \"Get New Access Token\" button\n5. Click the \"Proceed\" button\n6. Click the \"Use Token\" button\n7. Retry your requestEndFragment"
				}
			]
		},
		{
			"name": "Cart",
			"item": [
				{
					"name": "Happy Path (Buyer Login)",
					"item": [
						{
							"name": "1. Clear Collection Variables",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
											"\r",
											"// Check for environment selection\r",
											"if(pm.environment.name === undefined) {\r",
											"    const msg = 'No Postman environment selected or set.';\r",
											"    pm.expect.fail(msg);\r",
											"}\r",
											"\r",
											"// Clean up the variables from the collection set throughout the various calls\r",
											"pm.collectionVariables.clear();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Tests...`);\r",
											"\r",
											"pm.test('Make sure collection variables are clean', () => {\r",
											"    pm.expect(JSON.parse(JSON.stringify(pm.collectionVariables.values)).map((v) => v.key + ': ' + v.value)).to.be.an('array').empty;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "postman-echo.com/get",
									"host": [
										"postman-echo",
										"com"
									],
									"path": [
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "2. Log in as System Administrator (SOAP)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Tests...`);\r",
											"console.warn(`Code: ${pm.response.code} | Status: ${pm.response.status} | Response time: ${pm.response.responseTime} ms`);\r",
											"\r",
											"pm.expect(pm.response.text().includes('INVALID_LOGIN'), 'INVALID_LOGIN found in response - Suggested fix: Check username, password and tokens in the Postman Environment').to.be.false;\r",
											"\r",
											"pm.expect(pm.response.text().includes('API_CURRENTLY_DISABLED'), 'API_CURRENTLY_DISABLED found in response - Suggested fix: Create a Permission Set like \\'Api Enabled\\' with the API Enabled checkbox active in System Permissions and apply it to the user').to.be.false;\r",
											"\r",
											"const expectedResponseCodes = [200];\r",
											"pm.expect(pm.response.code).to.be.oneOf(expectedResponseCodes, \"Response code not in expected range\");\r",
											" \r",
											"pm.test('Validate the access token is found in the body and save it to the variables', () => {\r",
											"    const result = xml2Json(pm.response.text())['soapenv:Envelope']['soapenv:Body'].loginResponse.result;\r",
											"    const url = result.serverUrl.split('/');\r",
											"\r",
											"    pm.expect(result.sessionId).to.exist;\r",
											"    pm.expect(result.sessionId).to.be.a.string;\r",
											"\r",
											"    pm.collectionVariables.set('_token', result.sessionId);\r",
											"    pm.collectionVariables.set('_instanceUrl', url[0] + '//' + url[2]);\r",
											"    pm.collectionVariables.set('_userId', result.userId);\r",
											"    pm.collectionVariables.set('_orgId', result.userInfo.organizationId);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const expectedStringsInEnvironmentVariables = ['orgLoginUrl','apiVersion','orgAdminUsername','orgAdminPassword','orgAdminSecurityToken'];\r",
											"const expectedStringsInCollectionVariables = [];\r",
											"\r",
											"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											"\r",
											"// Expected strings in environment variables\r",
											"for(const esiev of expectedStringsInEnvironmentVariables)\r",
											"{\r",
											"    if(!pm.environment.has(esiev))\r",
											"    {\r",
											"        const msg = `Expected Postman environment variable not found: '${esiev} in environment: '${pm.environment.name}'`;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"\r",
											"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
											"}\r",
											"\r",
											"// Expected strings in collection variables\r",
											"for(esicv of expectedStringsInCollectionVariables)\r",
											"{\r",
											"    if(!pm.collectionVariables.has(esicv))\r",
											"    {\r",
											"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    \r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "text/xml; charset=UTF-8",
										"type": "text"
									},
									{
										"key": "SOAPAction",
										"value": "login",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "text/xml",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\r\n<env:Envelope xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"\r\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n    xmlns:n1=\"urn:partner.soap.sforce.com\"\r\n    xmlns:env=\"http://schemas.xmlsoap.org/soap/envelope/\">\r\n    <env:Body>\r\n        <n1:login>\r\n            <n1:username><![CDATA[{{orgAdminUsername}}]]></n1:username>\r\n            <n1:password><![CDATA[{{orgAdminPassword}}]]></n1:password>\r\n        </n1:login>\r\n    </env:Body>\r\n</env:Envelope>"
								},
								"url": {
									"raw": "{{orgLoginUrl}}/services/Soap/u/{{apiVersion}}",
									"host": [
										"{{orgLoginUrl}}"
									],
									"path": [
										"services",
										"Soap",
										"u",
										"{{apiVersion}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "3. Set WebStore Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Tests...`);\r",
											"console.warn(`Code: ${pm.response.code} | Status: ${pm.response.status} | Response time: ${pm.response.responseTime} ms`);\r",
											"const expectedResponseCodes = [200];\r",
											"pm.expect(pm.response.code).to.be.oneOf(expectedResponseCodes, \"Response code not in expected range\");\r",
											"\r",
											"pm.test('Response is valid and has a JSON body', () => {\r",
											"     pm.response.to.be.success;\r",
											"     pm.response.to.be.withBody;\r",
											"     pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test('Validate the response and saves the WebStore Id in the collection variables', () => {\r",
											"    const data = pm.response.json();\r",
											"    pm.expect(data.records).to.exist;\r",
											"    pm.expect(data.records).to.be.an('array');\r",
											"    pm.expect(data.records.length).to.eql(1);\r",
											"    const webStore = data.records[0];\r",
											"    pm.expect(webStore.Id).to.exist;\r",
											"    pm.expect(webStore.Id).to.be.an('string');\r",
											"    pm.collectionVariables.set('_webStoreId', webStore.Id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											"\r",
											"// Expected strings in environment variables\r",
											"['orgLoginUrl','apiVersion', 'webStoreName'].forEach(esiev => {\r",
											"    if(!pm.environment.has(esiev)) {\r",
											"        const msg = 'Expected Postman environment variable not found: ' + esiev;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
											"});\r",
											"\r",
											"// Expected strings in collection variables\r",
											"['_instanceUrl'].forEach(esicv => {\r",
											"    if(!pm.collectionVariables.has(esicv)) {\r",
											"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{_instanceUrl}}/services/data/v{{apiVersion}}/query/?q=SELECT+Id,+Name+FROM+WebStore+WHERE+Name+=+'{{webStoreName}}'",
									"host": [
										"{{_instanceUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"query",
										""
									],
									"query": [
										{
											"key": "q",
											"value": "SELECT+Id,+Name+FROM+WebStore+WHERE+Name+=+'{{webStoreName}}'"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "4. Set Effective Account Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Tests...`);\r",
											"console.warn(`Code: ${pm.response.code} | Status: ${pm.response.status} | Response time: ${pm.response.responseTime} ms`);\r",
											"const expectedResponseCodes = [200];\r",
											"pm.expect(pm.response.code).to.be.oneOf(expectedResponseCodes, \"Response code not in expected range\");\r",
											"\r",
											"pm.test('Response is valid and has a JSON body', () => {\r",
											"     pm.response.to.be.success;\r",
											"     pm.response.to.be.withBody;\r",
											"     pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test('Validate the response and saves the WebStore Id in the collection variables', () => {\r",
											"    const data = pm.response.json();\r",
											"    pm.expect(data.records).to.exist;\r",
											"    pm.expect(data.records).to.be.an('array');\r",
											"    pm.expect(data.records.length).to.eql(1);\r",
											"    const account = data.records[0];\r",
											"    pm.expect(account.Id).to.exist;\r",
											"    pm.expect(account.Id).to.be.an('string');\r",
											"    pm.collectionVariables.set('_effectiveAccountId', account.Id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											"\r",
											"// Expected strings in environment variables\r",
											"['orgLoginUrl','apiVersion', 'webStoreName', 'buyerAccountName'].forEach(esiev => {\r",
											"    if(!pm.environment.has(esiev)) {\r",
											"        const msg = 'Expected Postman environment variable not found: ' + esiev;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
											"});\r",
											"\r",
											"// Expected strings in collection variables\r",
											"['_instanceUrl'].forEach(esicv => {\r",
											"    if(!pm.collectionVariables.has(esicv)) {\r",
											"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{_instanceUrl}}/services/data/v{{apiVersion}}/query/?q=SELECT+Id,+Name+FROM+Account+WHERE+Name+=+'{{buyerAccountName}}'",
									"host": [
										"{{_instanceUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"query",
										""
									],
									"query": [
										{
											"key": "q",
											"value": "SELECT+Id,+Name+FROM+Account+WHERE+Name+=+'{{buyerAccountName}}'"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "5. Set Product Ids",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Tests...`);\r",
											"console.warn(`Code: ${pm.response.code} | Status: ${pm.response.status} | Response time: ${pm.response.responseTime} ms`);\r",
											"const expectedResponseCodes = [200];\r",
											"pm.expect(pm.response.code).to.be.oneOf(expectedResponseCodes, \"Response code not in expected range\");\r",
											"\r",
											"pm.test('Response is valid and has a JSON body', () => {\r",
											"     pm.response.to.be.success;\r",
											"     pm.response.to.be.withBody;\r",
											"     pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test('Validate the response and save the Product Ids in the collection variables', () => {\r",
											"    const data = pm.response.json();\r",
											"    pm.expect(data.records).to.exist;\r",
											"    pm.expect(data.records).to.be.an('array');\r",
											"    pm.expect(data.records.length).greaterThan(1);\r",
											"    \r",
											"    const productIds = [];\r",
											"    data.records.forEach(p => {\r",
											"        productIds.push(p.Id);\r",
											"    });\r",
											"    \r",
											"    console.log('# of Product Ids: ' + productIds.length + ' Details:\\r\\n' + productIds.join(',\\r\\n'));\r",
											"    pm.collectionVariables.set('_productIds', JSON.stringify(productIds));\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											"\r",
											"// Expected strings in environment variables\r",
											"['orgLoginUrl','apiVersion', 'webStoreName', 'buyerAccountName', 'productNamesCommaDelimited'].forEach(esiev => {\r",
											"    if(!pm.environment.has(esiev)) {\r",
											"        const msg = 'Expected Postman environment variable not found: ' + esiev;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
											"});\r",
											"\r",
											"// Expected strings in collection variables\r",
											"['_instanceUrl'].forEach(esicv => {\r",
											"    if(!pm.collectionVariables.has(esicv)) {\r",
											"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
											"});\r",
											"\r",
											"console.log('Parsing and assigning productNames...');\r",
											"const productNamesCommaDelimited = pm.environment.get('productNamesCommaDelimited');\r",
											"const productNamesArray = productNamesCommaDelimited.split(',');\r",
											"console.log('# of Product Names: ' + productNamesArray.length + ' Details:\\r\\n' + productNamesArray.join(',\\r\\n'));\r",
											"pm.collectionVariables.set('_productNames', '\\'' + productNamesArray.join('\\',\\'') + '\\'');"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{_instanceUrl}}/services/data/v{{apiVersion}}/query/?q=SELECT+Id,+Name+FROM+Product2+WHERE+Name+in(+{{_productNames}})",
									"host": [
										"{{_instanceUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"query",
										""
									],
									"query": [
										{
											"key": "q",
											"value": "SELECT+Id,+Name+FROM+Product2+WHERE+Name+in(+{{_productNames}})"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "6. Login as Buyer (SOAP)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Tests...`);",
											"console.warn(`Code: ${pm.response.code} | Status: ${pm.response.status} | Response time: ${pm.response.responseTime} ms`);",
											"",
											"pm.expect(pm.response.text().includes('INVALID_LOGIN'), 'INVALID_LOGIN found in response - Suggested fix: Check username, password and tokens in the Postman Environment').to.be.false;",
											"",
											"pm.expect(pm.response.text().includes('API_CURRENTLY_DISABLED'), 'API_CURRENTLY_DISABLED found in response - Suggested fix: Create a Permission Set like \\'Api Enabled\\' with the API Enabled checkbox active in System Permissions and apply it to the user').to.be.false;",
											"",
											"const expectedResponseCodes = [200];",
											"pm.expect(pm.response.code).to.be.oneOf(expectedResponseCodes, \"Response code not in expected range\");",
											"",
											"//const responseJson = xml2Json(responseBody);",
											"//buyerSessionId=responseJson['soapenv:Envelope']['soapenv:Body']['loginResponse']['result']['sessionId']",
											"//const context = pm.environment.name ? pm.environment : pm.collectionVariables;",
											"//pm.collectionVariables.set('_token', buyerSessionId);",
											"",
											"pm.test('Validate the access token is found in the body and save it to a collection variable', () => {",
											"    const result = xml2Json(pm.response.text())['soapenv:Envelope']['soapenv:Body'].loginResponse.result;",
											"    const url = result.serverUrl.split('/');",
											"",
											"    pm.expect(result.sessionId).to.exist;",
											"    pm.expect(result.sessionId).to.be.a.string;",
											"",
											"    pm.collectionVariables.set('_token', result.sessionId);",
											"    pm.collectionVariables.set('_instanceUrl', url[0] + '//' + url[2]);",
											"    pm.collectionVariables.set('_userId', result.userId);",
											"    pm.collectionVariables.set('_orgId', result.userInfo.organizationId);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											"\r",
											"// Expected strings in environment variables\r",
											"['orgLoginUrl','apiVersion'].forEach(esiev => {\r",
											"    if(!pm.environment.has(esiev)) {\r",
											"        const msg = 'Expected Postman environment variable not found: ' + esiev;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
											"});\r",
											"\r",
											"// Expected strings in collection variables\r",
											"['_orgId', '_webStoreId'].forEach(esicv => {\r",
											"    if(!pm.collectionVariables.has(esicv)) {\r",
											"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "text/xml; charset=UTF-8"
									},
									{
										"key": "SOAPAction",
										"value": "login"
									},
									{
										"key": "Accept",
										"value": "text/xml"
									},
									{
										"key": "Cookie",
										"value": "BrowserId=POhd6XTZEe2v6_8M7WG26g"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap:Envelope xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\" \nxmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://\nwww.w3.org/2001/XMLSchema\">\n    <soap:Header>\n        <LoginScopeHeader xmlns=\"urn:partner.soap.sforce.com\">\n            <organizationId>{{_orgId}}</organizationId>\n        </LoginScopeHeader>\n    </soap:Header>\n    <soap:Body>\n        <login xmlns=\"urn:partner.soap.sforce.com\">\n            <username><![CDATA[{{buyerUsername}}]]></username>\n            <password><![CDATA[{{buyerPassword}}]]></password>\n        </login>\n    </soap:Body>\n</soap:Envelope>"
								},
								"url": {
									"raw": "{{orgLoginUrl}}/services/Soap/u/{{apiVersion}}",
									"host": [
										"{{orgLoginUrl}}"
									],
									"path": [
										"services",
										"Soap",
										"u",
										"{{apiVersion}}"
									]
								},
								"description": "Authenticate the shopper through the variables _buyerUsername_ and _buyerPassword_. Generated session ID is saved in _accessToken for use in the other calls in the collection."
							},
							"response": []
						},
						{
							"name": "7. Search for Products",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Tests...`);",
											"console.warn(`Code: ${pm.response.code} | Status: ${pm.response.status} | Response time: ${pm.response.responseTime} ms`);",
											"const expectedResponseCodes = [201];",
											"pm.expect(pm.response.code).to.be.oneOf(expectedResponseCodes, \"Response code not in expected range\");",
											"",
											"pm.test('Response is valid and has a JSON body', () => {",
											"    pm.response.to.be.success;",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test('Validate the response and save the product id to a collection variable', () => {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.productsPage).to.exist;",
											"    pm.expect(jsonData.productsPage).to.be.an('object');",
											"    pm.expect(jsonData.productsPage.products).to.exist;",
											"    pm.expect(jsonData.productsPage.products).to.be.an('array');",
											"    pm.expect(jsonData.productsPage.products[0]).to.exist;",
											"    pm.expect(jsonData.productsPage.products[0]).to.be.an('object');",
											"    pm.expect(jsonData.productsPage.products[0]).to.exist;",
											"    pm.expect(jsonData.productsPage.products[0].id).to.be.an('string');",
											"    pm.collectionVariables.set('_productId', jsonData.productsPage.products[0].id);",
											"});",
											"",
											"// Remove the productId from the collection looked up as Administrator in \"Set Product Ids\" to avoid adding more of the same in \"Add multiple Products to Cart\"",
											"const productIdFromSearch = pm.collectionVariables.get('_productId');",
											"const productIds = pm.collectionVariables.get('_productIds');",
											"const index = productIds.indexOf(productIdFromSearch);",
											"if (index > -1) { // only splice when element found",
											"  productIds.splice(index, 1); // remove only one item",
											"}",
											"pm.collectionVariables.set('_productIds', productIds);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											"\r",
											"// Expected strings in environment variables\r",
											"['orgHostMySalesforceFormat','apiVersion', 'productSearchTerm'].forEach(esiev => {\r",
											"    if(!pm.environment.has(esiev)) {\r",
											"        const msg = 'Expected Postman environment variable not found: ' + esiev;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
											"});\r",
											"\r",
											"// Expected strings in collection  variables\r",
											"['_instanceUrl', '_webStoreId', '_token', '_orgId'].forEach(esicv => {\r",
											"    if(!pm.collectionVariables.has(esicv)) {\r",
											"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableUrlEncoding": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"searchTerm\": \"{{productSearchTerm}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{_instanceUrl}}/services/data/v{{apiVersion}}/commerce/webstores/{{_webStoreId}}/search/product-search",
									"host": [
										"{{_instanceUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"commerce",
										"webstores",
										"{{_webStoreId}}",
										"search",
										"product-search"
									]
								},
								"description": "Uses the variable _productSearchTerm_ to search for products in the webstore. Sets the first returned product in the variable _productId_."
							},
							"response": []
						},
						{
							"name": "8. Get Product Detail",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Tests...`);",
											"console.warn(`Code: ${pm.response.code} | Status: ${pm.response.status} | Response time: ${pm.response.responseTime} ms`);",
											"const expectedResponseCodes = [200];",
											"pm.expect(pm.response.code).to.be.oneOf(expectedResponseCodes, \"Response code not in expected range\");",
											"",
											"pm.test('Response is valid and has a JSON body', () => {",
											"    pm.response.to.be.success;",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test('Validate the response', () => {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.defaultImage).to.exist;",
											"    pm.expect(jsonData.defaultImage).to.be.an('object').with.property('id').to.be.an('string');",
											"",
											"    pm.expect(jsonData.fields).to.exist;",
											"    pm.expect(jsonData.fields).to.be.an('object').with.property('Name').to.be.an('string');",
											"    pm.expect(jsonData.fields).to.be.an('object').with.property('Description').to.be.an('string');",
											"    pm.expect(jsonData.fields).to.be.an('object').with.property('LastModifiedDate').to.match(/\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}Z/);",
											"    ",
											"    pm.expect(jsonData.mediaGroups).to.exist;",
											"    pm.expect(jsonData.mediaGroups).to.be.an('array');",
											"    pm.expect(jsonData.mediaGroups[0]).to.be.an('object').with.property('id').to.be.an('string');",
											"    pm.expect(jsonData.mediaGroups[0].mediaItems[0]).to.be.an('object').with.property('url').to.be.an('string');",
											"    pm.expect(jsonData.mediaGroups[0].mediaItems[0]).to.be.an('object').with.property('mediaType').to.be.an('string');",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											"\r",
											"// Expected strings in environment variables\r",
											"['orgHostMySalesforceFormat','apiVersion'].forEach(esiev => {\r",
											"    if(!pm.environment.has(esiev)) {\r",
											"        const msg = 'Expected Postman environment variable not found: ' + esiev;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
											"});\r",
											"\r",
											"// Expected strings in collection variables\r",
											"['_instanceUrl', '_webStoreId', '_productId', '_token', '_effectiveAccountId'].forEach(esicv => {\r",
											"    if(!pm.collectionVariables.has(esicv)) {\r",
											"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{_instanceUrl}}/services/data/v{{apiVersion}}/commerce/webstores/{{_webStoreId}}/products/{{_productId}}",
									"host": [
										"{{_instanceUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"commerce",
										"webstores",
										"{{_webStoreId}}",
										"products",
										"{{_productId}}"
									],
									"query": [
										{
											"key": "effectiveAccountId",
											"value": "<string>",
											"disabled": true
										},
										{
											"key": "excludeAttributeSetInfo",
											"value": "<boolean>",
											"disabled": true
										},
										{
											"key": "excludeEntitlementDetails",
											"value": "<boolean>",
											"disabled": true
										},
										{
											"key": "excludeFields",
											"value": "<boolean>",
											"disabled": true
										},
										{
											"key": "excludeMedia",
											"value": "<boolean>",
											"disabled": true
										},
										{
											"key": "excludePrimaryProductCategory",
											"value": "<boolean>",
											"disabled": true
										},
										{
											"key": "excludeProductSellingModels",
											"value": "<boolean>",
											"disabled": true
										},
										{
											"key": "excludeQuantityRule",
											"value": "<boolean>",
											"disabled": true
										},
										{
											"key": "excludeVariationInfo",
											"value": "<boolean>",
											"disabled": true
										},
										{
											"key": "fields",
											"value": "[]",
											"disabled": true
										},
										{
											"key": "mediaGroups",
											"value": "[]",
											"disabled": true
										}
									]
								},
								"description": "Fetch standard field data, custom field data, and enrichment data for a single Product, identified by the variable _productId_ that was set by the search products request."
							},
							"response": []
						},
						{
							"name": "9. Get Active Cart",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											"\r",
											"pm.collectionVariables.set('_cartStateOrId', 'active');\r",
											"\r",
											"// Expected strings in environment variables\r",
											"['orgHostMySalesforceFormat','apiVersion'].forEach(esiev => {\r",
											"    if(!pm.environment.has(esiev)) {\r",
											"        const msg = 'Expected Postman environment variable not found: ' + esiev;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
											"});\r",
											"\r",
											"// Expected strings in collection variables\r",
											"['_instanceUrl', '_webStoreId', '_productId', '_token', '_effectiveAccountId', '_cartStateOrId'].forEach(esicv => {\r",
											"    if(!pm.collectionVariables.has(esicv)) {\r",
											"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Tests...`);\r",
											"console.warn(`Code: ${pm.response.code} | Status: ${pm.response.status} | Response time: ${pm.response.responseTime} ms`);\r",
											"\r",
											"if(pm.response.code === 400){\r",
											"    pm.expect.fail(\"Buyer cart not clean. Suggested fix: Log in to storefront, empty cart and run this folder again.\");\r",
											"}\r",
											"\r",
											"const expectedResponseCodes = [200];\r",
											"pm.expect(pm.response.code).to.be.oneOf(expectedResponseCodes, \"Response code not in expected range\");\r",
											"\r",
											"pm.test('Response is valid and has a JSON body', () => {\r",
											"    pm.response.to.be.success;\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test('Validate the response contains a cart Id and set the collection variables', () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.cartId).to.exist;\r",
											"    pm.expect(jsonData.cartId).to.be.an('string');\r",
											"    pm.collectionVariables.set('_cartStateOrId', jsonData.cartId);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{_instanceUrl}}/services/data/v{{apiVersion}}/commerce/webstores/{{_webStoreId}}/carts/{{_cartStateOrId}}?effectiveAccountId={{_effectiveAccountId}}",
									"host": [
										"{{_instanceUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"commerce",
										"webstores",
										"{{_webStoreId}}",
										"carts",
										"{{_cartStateOrId}}"
									],
									"query": [
										{
											"key": "effectiveAccountId",
											"value": "{{_effectiveAccountId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "10. Add single Product to Cart",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											"\r",
											"// Expected strings in environment variables\r",
											"['orgHostMySalesforceFormat','apiVersion'].forEach(esiev => {\r",
											"    if(!pm.environment.has(esiev)) {\r",
											"        const msg = 'Expected Postman environment variable not found: ' + esiev;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
											"});\r",
											"\r",
											"// Expected strings in collection variables\r",
											"['_webStoreId', '_productId', '_token', '_instanceUrl', '_cartStateOrId', '_effectiveAccountId'].forEach(esicv => {\r",
											"    if(!pm.collectionVariables.has(esicv)) {\r",
											"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Tests...`);\r",
											"console.warn(`Code: ${pm.response.code} | Status: ${pm.response.status} | Response time: ${pm.response.responseTime} ms`);\r",
											"const expectedResponseCodes = [202, 201, 200];\r",
											"pm.expect(pm.response.code).to.be.oneOf(expectedResponseCodes, \"Response code not in expected range\");\r",
											"\r",
											"pm.test('Response is valid and has a JSON body', () => {\r",
											"    pm.response.to.be.success;\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test('Validate the response', () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.cartItemId).to.exist;\r",
											"    pm.expect(jsonData.cartItemId).to.be.a.string;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"productId\": \"{{_productId}}\",\r\n   \"quantity\":\"1\",\r\n   \"type\":\"Product\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{_instanceUrl}}/services/data/v{{apiVersion}}/commerce/webstores/{{_webStoreId}}/carts/{{_cartStateOrId}}/cart-items?effectiveAccountId={{_effectiveAccountId}}",
									"host": [
										"{{_instanceUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"commerce",
										"webstores",
										"{{_webStoreId}}",
										"carts",
										"{{_cartStateOrId}}",
										"cart-items"
									],
									"query": [
										{
											"key": "effectiveAccountId",
											"value": "{{_effectiveAccountId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "11. Add multiple Products to Cart",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											"\r",
											"// Expected strings in environment variables\r",
											"['orgHostMySalesforceFormat','apiVersion','productNamesCommaDelimited', 'currencyIsoCode'].forEach(esiev => {\r",
											"    if(!pm.environment.has(esiev)) {\r",
											"        const msg = 'Expected Postman environment variable not found: ' + esiev;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
											"});\r",
											"\r",
											"// Expected strings in collection variables\r",
											"['_webStoreId', '_productId', '_token', '_instanceUrl', '_cartStateOrId', '_effectiveAccountId'].forEach(esicv => {\r",
											"    if(!pm.collectionVariables.has(esicv)) {\r",
											"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
											"});\r",
											"\r",
											"// Create the JSON Body for multiple objects\r",
											"const productIds = JSON.parse(pm.collectionVariables.get('_productIds'));\r",
											"let o = new Object();\r",
											"o.inputs = [];\r",
											"let qty = 2;\r",
											"let element;\r",
											"let richInput;\r",
											"\r",
											"productIds.forEach(pid => {\r",
											"    element = new Object();\r",
											"    richInput = new Object();\r",
											"    richInput.productId = pid;\r",
											"    richInput.quantity = qty * 3;\r",
											"    richInput.type = \"Product\";\r",
											"    element.richInput = richInput;\r",
											"    o.inputs.push(element);\r",
											"});\r",
											"\r",
											"pm.collectionVariables.set('_productIdsForAddMultipleJson', JSON.stringify(o));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Tests...`);\r",
											"console.warn(`Code: ${pm.response.code} | Status: ${pm.response.status} | Response time: ${pm.response.responseTime} ms`);\r",
											"const expectedResponseCodes = [202, 201, 200];\r",
											"pm.expect(pm.response.code).to.be.oneOf(expectedResponseCodes, \"Response code not in expected range\");\r",
											"\r",
											"pm.test('Response is valid and has a JSON body', () => {\r",
											"    pm.response.to.be.success;\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"/*\r",
											"pm.test('Validate the response', () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.cartItemId).to.exist;\r",
											"    pm.expect(jsonData.cartItemId).to.be.a.string;\r",
											"    pm.collectionVariables.set('_cartStateOrId', jsonData.cartItemId);\r",
											"});\r",
											"*/"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{_productIdsForAddMultipleJson}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{_instanceUrl}}/services/data/v{{apiVersion}}/commerce/webstores/{{_webStoreId}}/carts/{{_cartStateOrId}}/cart-items/batch?effectiveAccountId={{_effectiveAccountId}}&currencyIsoCode={{currencyIsoCode}}",
									"host": [
										"{{_instanceUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"commerce",
										"webstores",
										"{{_webStoreId}}",
										"carts",
										"{{_cartStateOrId}}",
										"cart-items",
										"batch"
									],
									"query": [
										{
											"key": "effectiveAccountId",
											"value": "{{_effectiveAccountId}}"
										},
										{
											"key": "currencyIsoCode",
											"value": "{{currencyIsoCode}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "12. Get Cart Items",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"console.log(`${pm.info.requestName} Tests...`);\r",
											"console.warn(`Code: ${pm.response.code} | Status: ${pm.response.status} | Response time: ${pm.response.responseTime} ms`);\r",
											"const expectedResponseCodes = [200];\r",
											"pm.expect(pm.response.code).to.be.oneOf(expectedResponseCodes, \"Response code not in expected range\");\r",
											"\r",
											"pm.test('Response is valid and has a JSON body', () => {\r",
											"     pm.response.to.be.success;\r",
											"     pm.response.to.be.withBody;\r",
											"     pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"\r",
											"pm.test('Validate enough items in cart to continue - need 3 or more', () => {\r",
											"    pm.expect(jsonData.cartItems).to.exist;\r",
											"    pm.expect(jsonData.cartItems).to.be.an('array').with.length.greaterThan(2);\r",
											"});\r",
											"\r",
											"const firstCartItem = jsonData.cartItems[0].cartItem;\r",
											"\r",
											"pm.test('Check that Cart has first item and set collection variable for Update operation', () =>{\r",
											"    pm.expect(firstCartItem).to.be.an('object').with.property('cartItemId').that.is.an('string');\r",
											"});\r",
											"\r",
											"const secondCartItem = jsonData.cartItems[1].cartItem;\r",
											"\r",
											"pm.test('Check Cart has second item and set collection variable for Delete operation', () =>{\r",
											"    pm.expect(secondCartItem).to.be.an('object').with.property('cartItemId').that.is.an('string');\r",
											"});\r",
											"\r",
											"pm.test('Validate the items are in the same Cart', () => {\r",
											"    pm.expect(firstCartItem.cartId).equals(secondCartItem.cartId);\r",
											"});\r",
											"\r",
											"// Set the cart items so we can delete them\r",
											"pm.collectionVariables.set('_cartItems', jsonData.cartItems);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											"\r",
											"// Expected strings in environment variables\r",
											"['orgHostMySalesforceFormat','apiVersion','productNamesCommaDelimited'].forEach(esiev => {\r",
											"    if(!pm.environment.has(esiev)) {\r",
											"        const msg = 'Expected Postman environment variable not found: ' + esiev;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
											"});\r",
											"\r",
											"// Expected strings in collection variables\r",
											"['_webStoreId', '_productId', '_token', '_instanceUrl', '_cartStateOrId', '_effectiveAccountId'].forEach(esicv => {\r",
											"    if(!pm.collectionVariables.has(esicv)) {\r",
											"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{_instanceUrl}}/services/data/v{{apiVersion}}/commerce/webstores/{{_webStoreId}}/carts/{{_cartStateOrId}}/cart-items?effectiveAccountId={{_effectiveAccountId}}",
									"host": [
										"{{_instanceUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"commerce",
										"webstores",
										"{{_webStoreId}}",
										"carts",
										"{{_cartStateOrId}}",
										"cart-items"
									],
									"query": [
										{
											"key": "effectiveAccountId",
											"value": "{{_effectiveAccountId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "13. Remove Cart Items (sequenced recursively)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
											"\r",
											"// Expected strings in environment variables\r",
											"['orgHostMySalesforceFormat','apiVersion'].forEach(esiev => {\r",
											"    if(!pm.environment.has(esiev)) {\r",
											"        const msg = 'Expected Postman environment variable not found: ' + esiev;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
											"});\r",
											"\r",
											"// Expected strings in collection variables\r",
											"['_instanceUrl', '_webStoreId', '_productId', '_token', '_effectiveAccountId', '_cartStateOrId'].forEach(esicv => {\r",
											"    if(!pm.collectionVariables.has(esicv)) {\r",
											"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
											"});\r",
											"\r",
											"// Expected arrays in collection variables\r",
											"['_cartItems'].forEach(eaicv => {\r",
											"    if(!pm.collectionVariables.has(eaicv)) {\r",
											"        const msg = 'Expected Postman collection array variable not found: ' + eaicv;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.collectionVariables.get(eaicv)).to.exist;\r",
											"    pm.expect(pm.collectionVariables.get(eaicv)).to.be.an('array');\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Tests...`);\r",
											"console.warn(`Code: ${pm.response.code} | Status: ${pm.response.status} | Response time: ${pm.response.responseTime} ms`);\r",
											"const expectedResponseCodes = [204];\r",
											"\r",
											"const instanceUrl = pm.collectionVariables.get('_instanceUrl');\r",
											"const apiVersion = pm.environment.get('apiVersion');\r",
											"const webStoreId = pm.collectionVariables.get('_webStoreId');\r",
											"const cartStateOrId = pm.collectionVariables.get('_cartStateOrId');\r",
											"const effectiveAccountId = pm.collectionVariables.get('_effectiveAccountId');\r",
											"const token = pm.collectionVariables.get('_token');\r",
											"const cartItems = pm.collectionVariables.get('_cartItems');\r",
											"\r",
											"// Put together the Url which will be called in a loop\r",
											"let renderedUrl = `${instanceUrl}`;\r",
											"renderedUrl += `/services/data/v${apiVersion}`;\r",
											"renderedUrl += `/commerce/webstores/${webStoreId}`;\r",
											"renderedUrl += `/carts/${cartStateOrId}`;\r",
											"renderedUrl += `/cart-items/{cartItemId}/?effectiveAccountId=${effectiveAccountId}`;\r",
											"\r",
											"// Loop the cart items and build an array of requests\r",
											"let deleteRequests = [];\r",
											"\r",
											"cartItems.forEach(ci => {\r",
											"    let cartItemId = ci.cartItem.cartItemId;\r",
											"    let itemUrl = renderedUrl.replace('{cartItemId}', cartItemId);\r",
											"    \r",
											"    // Assemble request and headers for the item's URL\r",
											"\r",
											"    const header = {\r",
											"        'Cache-Control':'no-cache',\r",
											"        'Accept-Encoding':'gzip, deflate, br',\r",
											"        'Connection':'keep-alive',\r",
											"        'Content-Type': 'application/json',\r",
											"        'Authorization': 'Bearer ' + token\r",
											"    }\r",
											"    \r",
											"    const deleteRequest = {\r",
											"        \"url\": itemUrl,\r",
											"        \"header\": header,\r",
											"        \"method\": 'DELETE',\r",
											"        \"body\": {},\r",
											"    };\r",
											"    \r",
											"    deleteRequests.push(deleteRequest);\r",
											"});\r",
											"\r",
											"function sequenceRequestsViaRecursion(requests) {\r",
											"    if(requests.length > 0) {\r",
											"        console.info(`Requesting: '${requests[0].url}'`);\r",
											"        pm.sendRequest(requests[0], function (error, response)  {\r",
											"            requests.splice(0, 1);\r",
											"            if(error != null) {\r",
											"                console.error(error);\r",
											"            }\r",
											"            console.warn(`Code: ${response.code} | Status: ${response.status} | Response time: ${response.responseTime} ms`);\r",
											"            pm.test('Check that Cart has first item and set collection variable for Update operation', () =>{\r",
											"                pm.expect(response.code).to.be.oneOf(expectedResponseCodes);\r",
											"            });\r",
											"            sequenceRequestsViaRecursion(requests);\r",
											"        });\r",
											"    }\r",
											"}\r",
											"\r",
											"// In Postman we need to nest the calls to make them sequentially\r",
											"console.warn(`Time for sequenceRequestsViaRecursion with ${deleteRequests.length} requests... Contact!`);\r",
											"sequenceRequestsViaRecursion(deleteRequests);\r",
											"// Sync up the collection variable with the work done\r",
											"pm.collectionVariables.unset('_cartItems');\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "postman-echo.com/get",
									"host": [
										"postman-echo",
										"com"
									],
									"path": [
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "14. Check Cart is empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Tests...`);\r",
											"console.warn(`Code: ${pm.response.code} | Status: ${pm.response.status} | Response time: ${pm.response.responseTime} ms`);\r",
											"const expectedResponseCodes = [200];\r",
											"pm.expect(pm.response.code).to.be.oneOf(expectedResponseCodes, \"Response code not in expected range\");\r",
											"\r",
											"pm.test('Response is valid and has a JSON body', () => {\r",
											"     pm.response.to.be.success;\r",
											"     pm.response.to.be.withBody;\r",
											"     pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"\r",
											"pm.test('Cart is empty', () => {\r",
											"    pm.expect(jsonData.cartItems).to.exist;\r",
											"    pm.expect(jsonData.cartItems).to.be.empty;\r",
											"    pm.expect(pm.collectionVariables.has('_cartItems').valueOf(false));\r",
											"});\r",
											"\r",
											"console.log('Double-check Cart item count: ' + jsonData.cartItems.length);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											"\r",
											"// Expected strings in environment variables\r",
											"['orgHostMySalesforceFormat','apiVersion','productNamesCommaDelimited'].forEach(esiev => {\r",
											"    if(!pm.environment.has(esiev)) {\r",
											"        const msg = 'Expected Postman environment variable not found: ' + esiev;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
											"});\r",
											"\r",
											"// Expected strings in collection variables\r",
											"['_webStoreId', '_productId', '_token', '_instanceUrl', '_cartStateOrId', '_effectiveAccountId'].forEach(esicv => {\r",
											"    if(!pm.collectionVariables.has(esicv)) {\r",
											"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{_instanceUrl}}/services/data/v{{apiVersion}}/commerce/webstores/{{_webStoreId}}/carts/{{_cartStateOrId}}/cart-items?effectiveAccountId={{_effectiveAccountId}}",
									"host": [
										"{{_instanceUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"commerce",
										"webstores",
										"{{_webStoreId}}",
										"carts",
										"{{_cartStateOrId}}",
										"cart-items"
									],
									"query": [
										{
											"key": "effectiveAccountId",
											"value": "{{_effectiveAccountId}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"description": "Interactions with the [Commerce Webstore Cart](https://developer.salesforce.com/docs/atlas.en-us.chatterapi.meta/chatterapi/connect_resources_commerce_webstore_cart.htm) and [Commerce Webstore Cart Items](https://developer.salesforce.com/docs/atlas.en-us.chatterapi.meta/chatterapi/connect_resources_commerce_webstore_cart_items.htm) using the Buyer Login authentication flow.\n\n`/commerce/webstores/webstoreId/carts/cartStateOrId`\n\n`/commerce/webstores/webstoreId/carts/cartStateOrId/cart-items`"
				},
				{
					"name": "Happy Path (Guest) - WIP",
					"item": [
						{
							"name": "1. Clear Collection Variables",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
											"\r",
											"// Check for environment selection\r",
											"if(pm.environment.name === undefined) {\r",
											"    const msg = 'No Postman environment selected or set.';\r",
											"    pm.expect.fail(msg);\r",
											"}\r",
											"\r",
											"// Clean up the variables from the collection set throughout the various calls\r",
											"pm.collectionVariables.clear();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Tests...`);\r",
											"\r",
											"pm.test('Make sure collection variables are clean', () => {\r",
											"    pm.expect(JSON.parse(JSON.stringify(pm.collectionVariables.values)).map((v) => v.key + ': ' + v.value)).to.be.an('array').empty;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "postman-echo.com/get",
									"host": [
										"postman-echo",
										"com"
									],
									"path": [
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "2. Log in as System Administrator (SOAP)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Tests...`);\r",
											"console.warn(`Code: ${pm.response.code} | Status: ${pm.response.status} | Response time: ${pm.response.responseTime} ms`);\r",
											"\r",
											"pm.expect(pm.response.text().includes('INVALID_LOGIN'), 'INVALID_LOGIN found in response - Suggested fix: Check username, password and tokens in the Postman Environment').to.be.false;\r",
											"\r",
											"pm.expect(pm.response.text().includes('API_CURRENTLY_DISABLED'), 'API_CURRENTLY_DISABLED found in response - Suggested fix: Create a Permission Set like \\'Api Enabled\\' with the API Enabled checkbox active in System Permissions and apply it to the user').to.be.false;\r",
											"\r",
											"const expectedResponseCodes = [200];\r",
											"pm.expect(pm.response.code).to.be.oneOf(expectedResponseCodes, \"Response code not in expected range\");\r",
											"\r",
											"pm.test('Validate the access token is found in the body and save it to the variables', () => {\r",
											"    const result = xml2Json(pm.response.text())['soapenv:Envelope']['soapenv:Body'].loginResponse.result;\r",
											"    const url = result.serverUrl.split('/');\r",
											"\r",
											"    pm.expect(result.sessionId).to.exist;\r",
											"    pm.expect(result.sessionId).to.be.a.string;\r",
											"\r",
											"    pm.collectionVariables.set('_token', result.sessionId);\r",
											"    pm.collectionVariables.set('_instanceUrl', url[0] + '//' + url[2]);\r",
											"    pm.collectionVariables.set('_userId', result.userId);\r",
											"    pm.collectionVariables.set('_orgId', result.userInfo.organizationId);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const expectedStringsInEnvironmentVariables = ['orgLoginUrl','apiVersion','orgAdminUsername','orgAdminPassword','orgAdminSecurityToken'];\r",
											"const expectedStringsInCollectionVariables = [];\r",
											"\r",
											"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											"\r",
											"// Expected strings in environment variables\r",
											"for(const esiev of expectedStringsInEnvironmentVariables)\r",
											"{\r",
											"    if(!pm.environment.has(esiev))\r",
											"    {\r",
											"        const msg = `Expected Postman environment variable not found: '${esiev} in environment: '${pm.environment.name}'`;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"\r",
											"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
											"}\r",
											"\r",
											"// Expected strings in collection variables\r",
											"for(esicv of expectedStringsInCollectionVariables)\r",
											"{\r",
											"    if(!pm.collectionVariables.has(esicv))\r",
											"    {\r",
											"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    \r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "text/xml; charset=UTF-8",
										"type": "text"
									},
									{
										"key": "SOAPAction",
										"value": "login",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "text/xml",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\r\n<env:Envelope xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"\r\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n    xmlns:n1=\"urn:partner.soap.sforce.com\"\r\n    xmlns:env=\"http://schemas.xmlsoap.org/soap/envelope/\">\r\n    <env:Body>\r\n        <n1:login>\r\n            <n1:username><![CDATA[{{orgAdminUsername}}]]></n1:username>\r\n            <n1:password><![CDATA[{{orgAdminPassword}}]]></n1:password>\r\n        </n1:login>\r\n    </env:Body>\r\n</env:Envelope>"
								},
								"url": {
									"raw": "{{orgLoginUrl}}/services/Soap/u/{{apiVersion}}",
									"host": [
										"{{orgLoginUrl}}"
									],
									"path": [
										"services",
										"Soap",
										"u",
										"{{apiVersion}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "3. Set WebStore Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Tests...`);\r",
											"console.warn(`Code: ${pm.response.code} | Status: ${pm.response.status} | Response time: ${pm.response.responseTime} ms`);\r",
											"\r",
											"const expectedResponseCodes = [200];\r",
											"pm.expect(pm.response.code).to.be.oneOf(expectedResponseCodes, \"Response code not in expected range\");\r",
											"\r",
											"pm.test('Response is valid and has a JSON body', () => {\r",
											"     pm.response.to.be.success;\r",
											"     pm.response.to.be.withBody;\r",
											"     pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test('Validate the response and saves the WebStore Id in the collection variables', () => {\r",
											"    const data = pm.response.json();\r",
											"    pm.expect(data.records).to.exist;\r",
											"    pm.expect(data.records).to.be.an('array');\r",
											"    pm.expect(data.records.length).to.eql(1);\r",
											"    const webStore = data.records[0];\r",
											"    pm.expect(webStore.Id).to.exist;\r",
											"    pm.expect(webStore.Id).to.be.an('string');\r",
											"    pm.collectionVariables.set('_webStoreId', webStore.Id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											"\r",
											"// Expected strings in environment variables\r",
											"['orgLoginUrl','apiVersion', 'webStoreName'].forEach(esiev => {\r",
											"    if(!pm.environment.has(esiev)) {\r",
											"        const msg = 'Expected Postman environment variable not found: ' + esiev;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
											"});\r",
											"\r",
											"// Expected strings in collection variables\r",
											"['_instanceUrl'].forEach(esicv => {\r",
											"    if(!pm.collectionVariables.has(esicv)) {\r",
											"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{_instanceUrl}}/services/data/v{{apiVersion}}/query/?q=SELECT+Id,+Name+FROM+WebStore+WHERE+Name+=+'{{webStoreName}}'",
									"host": [
										"{{_instanceUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"query",
										""
									],
									"query": [
										{
											"key": "q",
											"value": "SELECT+Id,+Name+FROM+WebStore+WHERE+Name+=+'{{webStoreName}}'"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "4. Set Site Id and UrlPathPrefix",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Tests...`);\r",
											"console.warn(`Code: ${pm.response.code} | Status: ${pm.response.status} | Response time: ${pm.response.responseTime} ms`);\r",
											"\r",
											"pm.test('Status code is 200', () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Response is valid and has a JSON body', () => {\r",
											"     pm.response.to.be.success;\r",
											"     pm.response.to.be.withBody;\r",
											"     pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test('Validate the response and save the Product Ids in the collection variables', () => {\r",
											"    const data = pm.response.json();\r",
											"    pm.expect(data.records).to.exist;\r",
											"    pm.expect(data.records).to.be.an('array');\r",
											"    pm.expect(data.records.length).greaterThan(0);\r",
											"    \r",
											"    const site = data.records[0];\r",
											"    pm.collectionVariables.set('_siteId', site.Id);\r",
											"    pm.collectionVariables.set('_siteUrlPathPrefix', site.UrlPathPrefix);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											"\r",
											"// Expected strings in environment variables\r",
											"['orgLoginUrl','apiVersion', 'webStoreName', 'buyerAccountName', 'productNamesCommaDelimited'].forEach(esiev => {\r",
											"    if(!pm.environment.has(esiev)) {\r",
											"        const msg = 'Expected Postman environment variable not found: ' + esiev;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
											"});\r",
											"\r",
											"// Expected strings in collection variables\r",
											"['_instanceUrl', '_webStoreId'].forEach(esicv => {\r",
											"    if(!pm.collectionVariables.has(esicv)) {\r",
											"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
											"});\r",
											"\r",
											"console.log('Parsing and assigning productNames...');\r",
											"const productNamesCommaDelimited = pm.environment.get('productNamesCommaDelimited');\r",
											"const productNamesArray = productNamesCommaDelimited.split(',');\r",
											"console.log('# of Product Names: ' + productNamesArray.length + ' Details:\\r\\n' + productNamesArray.join(',\\r\\n'));\r",
											"pm.collectionVariables.set('_productNames', '\\'' + productNamesArray.join('\\',\\'') + '\\'');"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{_instanceUrl}}/services/data/v{{apiVersion}}/query/?q=SELECT+Id,+Name,+UrlPathPrefix+FROM+Site+WHERE+MasterLabel+=+'{{webStoreName}}'",
									"host": [
										"{{_instanceUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"query",
										""
									],
									"query": [
										{
											"key": "q",
											"value": "SELECT+Id,+Name,+UrlPathPrefix+FROM+Site+WHERE+MasterLabel+=+'{{webStoreName}}'"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "5. Set Product Ids",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Tests...`);\r",
											"console.warn(`Code: ${pm.response.code} | Status: ${pm.response.status} | Response time: ${pm.response.responseTime} ms`);\r",
											"\r",
											"pm.test('Status code is 200', () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Response is valid and has a JSON body', () => {\r",
											"     pm.response.to.be.success;\r",
											"     pm.response.to.be.withBody;\r",
											"     pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test('Validate the response and save the Product Ids in the collection variables', () => {\r",
											"    const data = pm.response.json();\r",
											"    pm.expect(data.records).to.exist;\r",
											"    pm.expect(data.records).to.be.an('array');\r",
											"    pm.expect(data.records.length).greaterThan(1);\r",
											"    \r",
											"    const productIds = [];\r",
											"    data.records.forEach(p => {\r",
											"        productIds.push(p.Id);\r",
											"    });\r",
											"    \r",
											"    console.log('# of Product Ids: ' + productIds.length + ' Details:\\r\\n' + productIds.join(',\\r\\n'));\r",
											"    pm.collectionVariables.set('_productIds', JSON.stringify(productIds));\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											"\r",
											"// Expected strings in environment variables\r",
											"['orgLoginUrl','apiVersion', 'webStoreName', 'buyerAccountName', 'productNamesCommaDelimited'].forEach(esiev => {\r",
											"    if(!pm.environment.has(esiev)) {\r",
											"        const msg = 'Expected Postman environment variable not found: ' + esiev;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
											"});\r",
											"\r",
											"// Expected strings in collection variables\r",
											"['_instanceUrl'].forEach(esicv => {\r",
											"    if(!pm.collectionVariables.has(esicv)) {\r",
											"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
											"});\r",
											"\r",
											"console.log('Parsing and assigning productNames...');\r",
											"const productNamesCommaDelimited = pm.environment.get('productNamesCommaDelimited');\r",
											"const productNamesArray = productNamesCommaDelimited.split(',');\r",
											"console.log('# of Product Names: ' + productNamesArray.length + ' Details:\\r\\n' + productNamesArray.join(',\\r\\n'));\r",
											"pm.collectionVariables.set('_productNames', '\\'' + productNamesArray.join('\\',\\'') + '\\'');"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{_instanceUrl}}/services/data/v{{apiVersion}}/query/?q=SELECT+Id,+Name+FROM+Product2+WHERE+Name+in(+{{_productNames}})",
									"host": [
										"{{_instanceUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"query",
										""
									],
									"query": [
										{
											"key": "q",
											"value": "SELECT+Id,+Name+FROM+Product2+WHERE+Name+in(+{{_productNames}})"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "6. Set Guest Collection Variables",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Tests...`);\r",
											"console.warn(`Code: ${pm.response.code} | Status: ${pm.response.status} | Response time: ${pm.response.responseTime} ms`);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Generates a valid UUID v4 per RFC4122",
											"function uuidv4() {",
											"  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {",
											"    let r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);",
											"    return v.toString(16);",
											"  });",
											"}",
											"",
											"// Example: https://tzarr-aoi-pim-july22a.my.site.com/B2BLWREnhancedStorefromTSO/",
											"const siteUrl = `${pm.collectionVariables.get('_instanceUrl')}/${pm.collectionVariables.get('_siteUrlPathPrefix')}/`;",
											"console.warn(siteUrl);",
											"const siteId = pm.collectionVariables.get('_siteId');",
											"console.warn(siteId);",
											"pm.collectionVariables.set('_siteUrl', siteUrl);",
											"pm.collectionVariables.set('_guestUUID', uuidv4());",
											"pm.collectionVariables.set('_cookie_guest_uuid_name', `guest_uuid_essential_${siteId}`);",
											"pm.collectionVariables.set('_cookie_guest_uuid_value', uuidv4());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "postman-echo.com/get",
									"host": [
										"postman-echo",
										"com"
									],
									"path": [
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "7.a. Get Site Session Context (requires Guest Access configuration)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Tests...`);",
											"console.warn(`Code: ${pm.response.code} | Status: ${pm.response.status} | Response time: ${pm.response.responseTime} ms`);",
											"",
											"console.warn(pm.response.code);",
											"",
											"pm.test('Status code is 200', () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Response is valid and has a JSON body', () => {",
											"     pm.response.to.be.success;",
											"     pm.response.to.be.withBody;",
											"     pm.response.to.be.json;",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
											"\r",
											"console.warn('This requires that Commerce App -> Store record -> Administration -> Buyer Access -> Guest Access be configured using the \"Create Profile\" button. All steps must be completed. Details here: https://help.salesforce.com/s/articleView?id=sf.comm_config_guest_browsing.htm&type=5');"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Cookie",
										"value": "{{_cookie_guest_uuid_name}}={{_cookie_guest_uuid_value}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{_siteUrl}}/services/data/v{{apiVersion}}/commerce/webstores/{{_webStoreId}}/session-context",
									"host": [
										"{{_siteUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"commerce",
										"webstores",
										"{{_webStoreId}}",
										"session-context"
									]
								}
							},
							"response": []
						},
						{
							"name": "7.b. Get Site Session Context (requires Guest Access configuration) Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Tests...`);",
											"console.warn(`Code: ${pm.response.code} | Status: ${pm.response.status} | Response time: ${pm.response.responseTime} ms`);",
											"",
											"console.warn(pm.response.code);",
											"",
											"pm.test('Status code is 200', () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Response is valid and has a JSON body', () => {",
											"     pm.response.to.be.success;",
											"     pm.response.to.be.withBody;",
											"     pm.response.to.be.json;",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
											"\r",
											"console.warn('This requires that Commerce App -> Store record -> Administration -> Buyer Access -> Guest Access be configured using the \"Create Profile\" button. All steps must be completed. Details here: https://help.salesforce.com/s/articleView?id=sf.comm_config_guest_browsing.htm&type=5');"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Cookie",
										"value": "{{_cookie_guest_uuid_name}}={{_cookie_guest_uuid_value}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{_instanceUrl}}/services/data/v{{apiVersion}}/commerce/webstores/{{_webStoreId}}/session-context",
									"host": [
										"{{_instanceUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"commerce",
										"webstores",
										"{{_webStoreId}}",
										"session-context"
									]
								}
							},
							"response": []
						},
						{
							"name": "8. Search for Products",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Tests...`);",
											"console.warn(`Code: ${pm.response.code} | Status: ${pm.response.status} | Response time: ${pm.response.responseTime} ms`);",
											"const expectedResponseCodes = [201];",
											"pm.expect(pm.response.code).to.be.oneOf(expectedResponseCodes, \"Response code not in expected range\");",
											"",
											"pm.test('Response is valid and has a JSON body', () => {",
											"    pm.response.to.be.success;",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test('Validate the response and save the product id to a collection variable', () => {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.productsPage).to.exist;",
											"    pm.expect(jsonData.productsPage).to.be.an('object');",
											"    pm.expect(jsonData.productsPage.products).to.exist;",
											"    pm.expect(jsonData.productsPage.products).to.be.an('array');",
											"    pm.expect(jsonData.productsPage.products[0]).to.exist;",
											"    pm.expect(jsonData.productsPage.products[0]).to.be.an('object');",
											"    pm.expect(jsonData.productsPage.products[0]).to.exist;",
											"    pm.expect(jsonData.productsPage.products[0].id).to.be.an('string');",
											"    pm.collectionVariables.set('_productId', jsonData.productsPage.products[0].id);",
											"});",
											"",
											"// Remove the productId from the collection looked up as Administrator in \"Set Product Ids\" to avoid adding more of the same in \"Add multiple Products to Cart\"",
											"const productIdFromSearch = pm.collectionVariables.get('_productId');",
											"const productIds = pm.collectionVariables.get('_productIds');",
											"const index = productIds.indexOf(productIdFromSearch);",
											"if (index > -1) { // only splice when element found",
											"  productIds.splice(index, 1); // remove only one item",
											"}",
											"pm.collectionVariables.set('_productIds', productIds);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											"\r",
											"// Expected strings in environment variables\r",
											"['orgHostMySalesforceFormat','apiVersion', 'productSearchTerm'].forEach(esiev => {\r",
											"    if(!pm.environment.has(esiev)) {\r",
											"        const msg = 'Expected Postman environment variable not found: ' + esiev;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
											"});\r",
											"\r",
											"// Expected strings in collection  variables\r",
											"['_instanceUrl', '_webStoreId', '_token', '_orgId'].forEach(esicv => {\r",
											"    if(!pm.collectionVariables.has(esicv)) {\r",
											"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableUrlEncoding": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"searchTerm\": \"{{productSearchTerm}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{_instanceUrl}}/services/data/v{{apiVersion}}/commerce/webstores/{{_webStoreId}}/search/product-search",
									"host": [
										"{{_instanceUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"commerce",
										"webstores",
										"{{_webStoreId}}",
										"search",
										"product-search"
									]
								},
								"description": "Uses the variable _productSearchTerm_ to search for products in the webstore. Sets the first returned product in the variable _productId_."
							},
							"response": []
						},
						{
							"name": "9. Get Product Detail",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Tests...`);",
											"console.warn(`Code: ${pm.response.code} | Status: ${pm.response.status} | Response time: ${pm.response.responseTime} ms`);",
											"const expectedResponseCodes = [200];",
											"pm.expect(pm.response.code).to.be.oneOf(expectedResponseCodes, \"Response code not in expected range\");",
											"",
											"pm.test('Response is valid and has a JSON body', () => {",
											"    pm.response.to.be.success;",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test('Validate the response', () => {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.defaultImage).to.exist;",
											"    pm.expect(jsonData.defaultImage).to.be.an('object').with.property('id').to.be.an('string');",
											"",
											"    pm.expect(jsonData.fields).to.exist;",
											"    pm.expect(jsonData.fields).to.be.an('object').with.property('Name').to.be.an('string');",
											"    pm.expect(jsonData.fields).to.be.an('object').with.property('Description').to.be.an('string');",
											"    pm.expect(jsonData.fields).to.be.an('object').with.property('LastModifiedDate').to.match(/\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}Z/);",
											"    ",
											"    pm.expect(jsonData.mediaGroups).to.exist;",
											"    pm.expect(jsonData.mediaGroups).to.be.an('array');",
											"    pm.expect(jsonData.mediaGroups[0]).to.be.an('object').with.property('id').to.be.an('string');",
											"    pm.expect(jsonData.mediaGroups[0].mediaItems[0]).to.be.an('object').with.property('url').to.be.an('string');",
											"    pm.expect(jsonData.mediaGroups[0].mediaItems[0]).to.be.an('object').with.property('mediaType').to.be.an('string');",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											"\r",
											"// Expected strings in environment variables\r",
											"['orgHostMySalesforceFormat','apiVersion'].forEach(esiev => {\r",
											"    if(!pm.environment.has(esiev)) {\r",
											"        const msg = 'Expected Postman environment variable not found: ' + esiev;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
											"});\r",
											"\r",
											"// Expected strings in collection variables\r",
											"// Note that _effectiveAccountId is not present or needed\r",
											"['_instanceUrl', '_webStoreId', '_productId', '_token'].forEach(esicv => {\r",
											"    if(!pm.collectionVariables.has(esicv)) {\r",
											"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{_instanceUrl}}/services/data/v{{apiVersion}}/commerce/webstores/{{_webStoreId}}/products/{{_productId}}",
									"host": [
										"{{_instanceUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"commerce",
										"webstores",
										"{{_webStoreId}}",
										"products",
										"{{_productId}}"
									],
									"query": [
										{
											"key": "effectiveAccountId",
											"value": "<string>",
											"disabled": true
										},
										{
											"key": "excludeAttributeSetInfo",
											"value": "<boolean>",
											"disabled": true
										},
										{
											"key": "excludeEntitlementDetails",
											"value": "<boolean>",
											"disabled": true
										},
										{
											"key": "excludeFields",
											"value": "<boolean>",
											"disabled": true
										},
										{
											"key": "excludeMedia",
											"value": "<boolean>",
											"disabled": true
										},
										{
											"key": "excludePrimaryProductCategory",
											"value": "<boolean>",
											"disabled": true
										},
										{
											"key": "excludeProductSellingModels",
											"value": "<boolean>",
											"disabled": true
										},
										{
											"key": "excludeQuantityRule",
											"value": "<boolean>",
											"disabled": true
										},
										{
											"key": "excludeVariationInfo",
											"value": "<boolean>",
											"disabled": true
										},
										{
											"key": "fields",
											"value": "[]",
											"disabled": true
										},
										{
											"key": "mediaGroups",
											"value": "[]",
											"disabled": true
										}
									]
								},
								"description": "Fetch standard field data, custom field data, and enrichment data for a single Product, identified by the variable _productId_ that was set by the search products request."
							},
							"response": []
						},
						{
							"name": "10. Get Active Guest Cart (WIP)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											"\r",
											"pm.collectionVariables.set('_cartStateOrId', 'active');\r",
											"\r",
											"// Expected strings in environment variables\r",
											"['orgHostMySalesforceFormat','apiVersion'].forEach(esiev => {\r",
											"    if(!pm.environment.has(esiev)) {\r",
											"        const msg = 'Expected Postman environment variable not found: ' + esiev;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
											"});\r",
											"\r",
											"// Expected strings in collection variables\r",
											"//['_instanceUrl', '_webStoreId', '_productId', '_token', '_effectiveAccountId', '_cartStateOrId'].forEach(esicv => {\r",
											"['_instanceUrl', '_webStoreId', '_productId', '_token', '_cartStateOrId'].forEach(esicv => {\r",
											"    if(!pm.collectionVariables.has(esicv)) {\r",
											"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Tests...`);\r",
											"console.warn(`Code: ${pm.response.code} | Status: ${pm.response.status} | Response time: ${pm.response.responseTime} ms`);\r",
											"const expectedResponseCodes = [200];\r",
											"pm.expect(pm.response.code).to.be.oneOf(expectedResponseCodes, \"Response code not in expected range\");\r",
											"\r",
											"\r",
											"pm.test('Response is valid and has a JSON body', () => {\r",
											"    pm.response.to.be.success;\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test('Validate the response contains a cart Id and set the collection variables', () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.cartId).to.exist;\r",
											"    pm.expect(jsonData.cartId).to.be.an('string');\r",
											"    pm.collectionVariables.set('_cartStateOrId', jsonData.cartId);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{_instanceUrl}}/services/data/v{{apiVersion}}/commerce/webstores/{{_webStoreId}}/carts/{{_cartStateOrId}}?effectiveAccountId={{_effectiveAccountId}}",
									"host": [
										"{{_instanceUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"commerce",
										"webstores",
										"{{_webStoreId}}",
										"carts",
										"{{_cartStateOrId}}"
									],
									"query": [
										{
											"key": "effectiveAccountId",
											"value": "{{_effectiveAccountId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "11. Create a Guest Cart",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Tests...`);",
											"console.warn(`Code: ${pm.response.code} | Status: ${pm.response.status} | Response time: ${pm.response.responseTime} ms`);",
											"const expectedResponseCodes = [201];",
											"pm.expect(pm.response.code).to.be.oneOf(expectedResponseCodes, \"Response code not in expected range\");",
											"",
											"pm.test('Response is valid and has a JSON body', () => {",
											"     pm.response.to.be.success;",
											"     pm.response.to.be.withBody;",
											"     pm.response.to.be.json;",
											"});",
											"",
											"pm.test('Validate the response and save collection variables', () => {",
											"    const data = pm.response.json();",
											"    pm.expect(data.cartId).to.exist;",
											"    pm.expect(data.cartId).to.be.a.string;",
											"    console.warn(`_cartStateOrId: '${data.cartId}'`);",
											"    pm.collectionVariables.set('_cartStateOrId', data.cartId);",
											"});",
											"",
											"// get guest cart session Id cookie",
											"const cookies = pm.response.headers.filter(header => header.key.includes('Set-Cookie'));",
											"for (let i=0; i < cookies.length; i++) {",
											"    if (cookies[i].value.includes('GuestCartSessionId')) {",
											"        var cookieName = cookies[i].value.split(';')[0].split('=')[0];",
											"        var cookieValue = cookies[i].value.split(';')[0].split('=')[1];",
											"        if (cookieName && cookieValue) {",
											"            pm.collectionVariables.set('_cookie_guest_cartSessionId_name', cookieName);",
											"            pm.collectionVariables.set('_cookie_guest_cartSessionId_value', cookieValue);",
											"            break;",
											"        }",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Cookie",
										"value": "{{_cookie_guest_uuid_name}}={{_cookie_guest_uuid_value}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Postman Guest Cart\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{_instanceUrl}}/services/data/v{{apiVersion}}/commerce/webstores/{{_webStoreId}}/carts",
									"host": [
										"{{_instanceUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"commerce",
										"webstores",
										"{{_webStoreId}}",
										"carts"
									]
								}
							},
							"response": []
						},
						{
							"name": "12. Get Cart by Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Tests...`);\r",
											"console.warn(`Code: ${pm.response.code} | Status: ${pm.response.status} | Response time: ${pm.response.responseTime} ms`);\r",
											"const expectedResponseCodes = [200];\r",
											"pm.expect(pm.response.code).to.be.oneOf(expectedResponseCodes, \"Response code not in expected range\");\r",
											"\r",
											"pm.test('Response is valid and has a JSON body', () => {\r",
											"     pm.response.to.be.success;\r",
											"     pm.response.to.be.withBody;\r",
											"     pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"console.warn('TODO: Add more tests!');\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{_siteUrl}}/services/data/v{{apiVersion}}/commerce/webstores/{{_webStoreId}}/carts/{{_cartStateOrId}}",
									"host": [
										"{{_siteUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"commerce",
										"webstores",
										"{{_webStoreId}}",
										"carts",
										"{{_cartStateOrId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "13. Add single Product to Guest Cart",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											"\r",
											"// Expected strings in environment variables\r",
											"['orgHostMySalesforceFormat','apiVersion'].forEach(esiev => {\r",
											"    if(!pm.environment.has(esiev)) {\r",
											"        const msg = 'Expected Postman environment variable not found: ' + esiev;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
											"});\r",
											"\r",
											"// Expected strings in collection variables\r",
											"//['_webStoreId', '_productId', '_token', '_instanceUrl', '_cartStateOrId', '_effectiveAccountId'].forEach(esicv => {\r",
											"['_webStoreId', '_productId', '_token', '_instanceUrl', '_cartStateOrId'].forEach(esicv => {\r",
											"    if(!pm.collectionVariables.has(esicv)) {\r",
											"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Tests...`);\r",
											"console.warn(`Code: ${pm.response.code} | Status: ${pm.response.status} | Response time: ${pm.response.responseTime} ms`);\r",
											"const expectedResponseCodes = [201, 200];\r",
											"pm.expect(pm.response.code).to.be.oneOf(expectedResponseCodes, \"Response code not in expected range\");\r",
											"\r",
											"pm.test('Response is valid and has a JSON body', () => {\r",
											"    pm.response.to.be.success;\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test('Validate the response', () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.cartItemId).to.exist;\r",
											"    pm.expect(jsonData.cartItemId).to.be.a.string;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"productId\": \"{{_productId}}\",\r\n   \"quantity\":\"1\",\r\n   \"type\":\"Product\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{_instanceUrl}}/services/data/v{{apiVersion}}/commerce/webstores/{{_webStoreId}}/carts/{{_cartStateOrId}}/cart-items?effectiveAccountId={{_effectiveAccountId}}",
									"host": [
										"{{_instanceUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"commerce",
										"webstores",
										"{{_webStoreId}}",
										"carts",
										"{{_cartStateOrId}}",
										"cart-items"
									],
									"query": [
										{
											"key": "effectiveAccountId",
											"value": "{{_effectiveAccountId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "14. Add multiple Products to Guest Cart",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											"\r",
											"// Expected strings in environment variables\r",
											"['orgHostMySalesforceFormat','apiVersion','productNamesCommaDelimited', 'currencyIsoCode'].forEach(esiev => {\r",
											"    if(!pm.environment.has(esiev)) {\r",
											"        const msg = 'Expected Postman environment variable not found: ' + esiev;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
											"});\r",
											"\r",
											"// Expected strings in collection variables\r",
											"['_webStoreId', '_productId', '_token', '_instanceUrl', '_cartStateOrId', '_effectiveAccountId'].forEach(esicv => {\r",
											"    if(!pm.collectionVariables.has(esicv)) {\r",
											"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
											"});\r",
											"\r",
											"// Create the JSON Body for multiple objects\r",
											"const productIds = JSON.parse(pm.collectionVariables.get('_productIds'));\r",
											"let o = new Object();\r",
											"o.inputs = [];\r",
											"let qty = 2;\r",
											"let element;\r",
											"let richInput;\r",
											"\r",
											"productIds.forEach(pid => {\r",
											"    element = new Object();\r",
											"    richInput = new Object();\r",
											"    richInput.productId = pid;\r",
											"    richInput.quantity = qty * 3;\r",
											"    richInput.type = \"Product\";\r",
											"    element.richInput = richInput;\r",
											"    o.inputs.push(element);\r",
											"});\r",
											"\r",
											"pm.collectionVariables.set('_productIdsForAddMultipleJson', JSON.stringify(o));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Tests...`);\r",
											"console.warn(`Code: ${pm.response.code} | Status: ${pm.response.status} | Response time: ${pm.response.responseTime} ms`);\r",
											"const expectedResponseCodes = [201, 200];\r",
											"pm.expect(pm.response.code).to.be.oneOf(expectedResponseCodes, \"Response code not in expected range\");\r",
											"\r",
											"pm.test('Response is valid and has a JSON body', () => {\r",
											"    pm.response.to.be.success;\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"/*\r",
											"pm.test('Validate the response', () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.cartItemId).to.exist;\r",
											"    pm.expect(jsonData.cartItemId).to.be.a.string;\r",
											"    pm.collectionVariables.set('_cartStateOrId', jsonData.cartItemId);\r",
											"});\r",
											"*/"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{_productIdsForAddMultipleJson}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{_instanceUrl}}/services/data/v{{apiVersion}}/commerce/webstores/{{_webStoreId}}/carts/{{_cartStateOrId}}/cart-items/batch?effectiveAccountId={{_effectiveAccountId}}&currencyIsoCode={{currencyIsoCode}}",
									"host": [
										"{{_instanceUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"commerce",
										"webstores",
										"{{_webStoreId}}",
										"carts",
										"{{_cartStateOrId}}",
										"cart-items",
										"batch"
									],
									"query": [
										{
											"key": "effectiveAccountId",
											"value": "{{_effectiveAccountId}}"
										},
										{
											"key": "currencyIsoCode",
											"value": "{{currencyIsoCode}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "15. Get Guest Cart Items",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Tests...`);\r",
											"console.warn(`Code: ${pm.response.code} | Status: ${pm.response.status} | Response time: ${pm.response.responseTime} ms`);\r",
											"const expectedResponseCodes = [200];\r",
											"pm.expect(pm.response.code).to.be.oneOf(expectedResponseCodes, \"Response code not in expected range\");\r",
											"\r",
											"pm.test('Response is valid and has a JSON body', () => {\r",
											"     pm.response.to.be.success;\r",
											"     pm.response.to.be.withBody;\r",
											"     pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"\r",
											"pm.test('Validate enough items in cart to continue - need 3 or more', () => {\r",
											"    pm.expect(jsonData.cartItems).to.exist;\r",
											"    pm.expect(jsonData.cartItems).to.be.an('array').with.length.greaterThan(2);\r",
											"});\r",
											"\r",
											"const firstCartItem = jsonData.cartItems[0].cartItem;\r",
											"\r",
											"pm.test('Check that Cart has first item and set collection variable for Update operation', () =>{\r",
											"    pm.expect(firstCartItem).to.be.an('object').with.property('cartItemId').that.is.an('string');\r",
											"    pm.collectionVariables.set('_cartItemIdForQuantityUpdate', firstCartItem.cartItemId);\r",
											"});\r",
											"\r",
											"const secondCartItem = jsonData.cartItems[1].cartItem;\r",
											"\r",
											"pm.test('Check Cart has second item and set collection variable for Delete operation', () =>{\r",
											"    pm.expect(secondCartItem).to.be.an('object').with.property('cartItemId').that.is.an('string');\r",
											"    pm.collectionVariables.set('_cartItemIdForDelete', secondCartItem.cartItemId);\r",
											"});\r",
											"\r",
											"pm.test('Validate the items are in the same Cart', () => {\r",
											"    pm.expect(firstCartItem.cartId).equals(secondCartItem.cartId);\r",
											"});\r",
											"\r",
											"pm.test('Test that variables for Update and Delete operations were set', () => {\r",
											"    const cartItemIdForQuantityUpdate =  pm.collectionVariables.get('_cartItemIdForQuantityUpdate');\r",
											"    pm.expect(cartItemIdForQuantityUpdate).to.exist;\r",
											"    pm.expect(cartItemIdForQuantityUpdate).to.be.an('string').with.length.greaterThan(0);\r",
											"\r",
											"    const cartItemIdForDelete = pm.collectionVariables.get('_cartItemIdForDelete');\r",
											"    pm.expect(cartItemIdForDelete).to.exist;\r",
											"    pm.expect(cartItemIdForDelete).to.be.an('string').with.length.greaterThan(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											"\r",
											"// Expected strings in environment variables\r",
											"['orgHostMySalesforceFormat','apiVersion','productNamesCommaDelimited'].forEach(esiev => {\r",
											"    if(!pm.environment.has(esiev)) {\r",
											"        const msg = 'Expected Postman environment variable not found: ' + esiev;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
											"});\r",
											"\r",
											"// Expected strings in collection variables\r",
											"//['_webStoreId', '_productId', '_token', '_instanceUrl', '_cartStateOrId', '_effectiveAccountId'].forEach(esicv => {\r",
											"['_webStoreId', '_productId', '_token', '_instanceUrl', '_cartStateOrId'].forEach(esicv => {\r",
											"    if(!pm.collectionVariables.has(esicv)) {\r",
											"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{_instanceUrl}}/services/data/v{{apiVersion}}/commerce/webstores/{{_webStoreId}}/carts/{{_cartStateOrId}}/cart-items?effectiveAccountId={{_effectiveAccountId}}",
									"host": [
										"{{_instanceUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"commerce",
										"webstores",
										"{{_webStoreId}}",
										"carts",
										"{{_cartStateOrId}}",
										"cart-items"
									],
									"query": [
										{
											"key": "effectiveAccountId",
											"value": "{{_effectiveAccountId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "16. Remove Guest Cart Items (sequenced recursively)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
											"\r",
											"// Expected strings in environment variables\r",
											"['orgHostMySalesforceFormat','apiVersion'].forEach(esiev => {\r",
											"    if(!pm.environment.has(esiev)) {\r",
											"        const msg = 'Expected Postman environment variable not found: ' + esiev;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
											"});\r",
											"\r",
											"// Expected strings in collection variables\r",
											"//['_instanceUrl', '_webStoreId', '_productId', '_token', '_effectiveAccountId', '_cartStateOrId'].forEach(esicv => {\r",
											"['_instanceUrl', '_webStoreId', '_productId', '_token', '_cartStateOrId'].forEach(esicv => {\r",
											"    if(!pm.collectionVariables.has(esicv)) {\r",
											"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
											"});\r",
											"\r",
											"// Expected arrays in collection variables\r",
											"['_cartItems'].forEach(eaicv => {\r",
											"    if(!pm.collectionVariables.has(eaicv)) {\r",
											"        const msg = 'Expected Postman collection array variable not found: ' + eaicv;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.collectionVariables.get(eaicv)).to.exist;\r",
											"    pm.expect(pm.collectionVariables.get(eaicv)).to.be.an('array');\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Tests...`);\r",
											"console.warn(`Code: ${pm.response.code} | Status: ${pm.response.status} | Response time: ${pm.response.responseTime} ms`);\r",
											"const expectedResponseCodes = [204];\r",
											"\r",
											"const instanceUrl = pm.collectionVariables.get('_instanceUrl');\r",
											"const apiVersion = pm.environment.get('apiVersion');\r",
											"const webStoreId = pm.collectionVariables.get('_webStoreId');\r",
											"const cartStateOrId = pm.collectionVariables.get('_cartStateOrId');\r",
											"const effectiveAccountId = pm.collectionVariables.get('_effectiveAccountId');\r",
											"const token = pm.collectionVariables.get('_token');\r",
											"const cartItems = pm.collectionVariables.get('_cartItems');\r",
											"\r",
											"// Put together the Url which will be called in a loop\r",
											"let renderedUrl = `${instanceUrl}`;\r",
											"renderedUrl += `/services/data/v${apiVersion}`;\r",
											"renderedUrl += `/commerce/webstores/${webStoreId}`;\r",
											"renderedUrl += `/carts/${cartStateOrId}`;\r",
											"renderedUrl += `/cart-items/{cartItemId}/?effectiveAccountId=${effectiveAccountId}`;\r",
											"\r",
											"// Loop the cart items and build an array of requests\r",
											"let deleteRequests = [];\r",
											"\r",
											"cartItems.forEach(ci => {\r",
											"    let cartItemId = ci.cartItem.cartItemId;\r",
											"    let itemUrl = renderedUrl.replace('{cartItemId}', cartItemId);\r",
											"    \r",
											"    // Assemble request and headers for the item's URL\r",
											"\r",
											"    const header = {\r",
											"        'Cache-Control':'no-cache',\r",
											"        'Accept-Encoding':'gzip, deflate, br',\r",
											"        'Connection':'keep-alive',\r",
											"        'Content-Type': 'application/json',\r",
											"        'Authorization': 'Bearer ' + token\r",
											"    }\r",
											"    \r",
											"    const deleteRequest = {\r",
											"        \"url\": itemUrl,\r",
											"        \"header\": header,\r",
											"        \"method\": 'DELETE',\r",
											"        \"body\": {},\r",
											"    };\r",
											"    \r",
											"    deleteRequests.push(deleteRequest);\r",
											"});\r",
											"\r",
											"function sequenceRequestsViaRecursion(requests) {\r",
											"    if(requests.length > 0) {\r",
											"        console.info(`Requesting: '${requests[0].url}'`);\r",
											"        pm.sendRequest(requests[0], function (error, response)  {\r",
											"            requests.splice(0, 1);\r",
											"            if(error != null) {\r",
											"                console.error(error);\r",
											"            }\r",
											"            console.warn(`Code: ${response.code} | Status: ${response.status} | Response time: ${response.responseTime} ms`);\r",
											"            pm.test('Check that Cart has first item and set collection variable for Update operation', () =>{\r",
											"                pm.expect(response.code).to.be.oneOf(expectedResponseCodes);\r",
											"            });\r",
											"            sequenceRequestsViaRecursion(requests);\r",
											"        });\r",
											"    }\r",
											"}\r",
											"\r",
											"// In Postman we need to nest the calls to make them sequentially\r",
											"console.warn(`Time for sequenceRequestsViaRecursion with ${deleteRequests.length} requests... Contact!`);\r",
											"sequenceRequestsViaRecursion(deleteRequests);\r",
											"// Sync up the collection variable with the work done\r",
											"pm.collectionVariables.unset('_cartItems');\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "postman-echo.com/get",
									"host": [
										"postman-echo",
										"com"
									],
									"path": [
										"get"
									]
								}
							},
							"response": []
						}
					],
					"description": "Interactions with the [Commerce Webstore Cart](https://developer.salesforce.com/docs/atlas.en-us.chatterapi.meta/chatterapi/connect_resources_commerce_webstore_cart.htm) and [Commerce Webstore Cart Items](https://developer.salesforce.com/docs/atlas.en-us.chatterapi.meta/chatterapi/connect_resources_commerce_webstore_cart_items.htm) using Guest Browsing flow.\n\n`/commerce/webstores/webstoreId/carts/cartStateOrId`\n\n`/commerce/webstores/webstoreId/carts/cartStateOrId/cart-items`"
				}
			],
			"description": "Interactions with the [Commerce Webstore Cart](https://developer.salesforce.com/docs/atlas.en-us.chatterapi.meta/chatterapi/connect_resources_commerce_webstore_cart.htm) and [Commerce Webstore Cart Items](https://developer.salesforce.com/docs/atlas.en-us.chatterapi.meta/chatterapi/connect_resources_commerce_webstore_cart_items.htm)\n\n`/commerce/webstores/webstoreId/carts/cartStateOrId`\n\n`/commerce/webstores/webstoreId/carts/cartStateOrId/cart-items`"
		},
		{
			"name": "Checkout",
			"item": [
				{
					"name": "Happy Path (Buyer Login)",
					"item": [
						{
							"name": "1. Clear Collection Variables",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
											"\r",
											"// Check for environment selection\r",
											"if(pm.environment.name === undefined) {\r",
											"    const msg = 'No Postman environment selected or set.';\r",
											"    pm.expect.fail(msg);\r",
											"}\r",
											"\r",
											"// Clean up the variables from the collection set throughout the various calls\r",
											"pm.collectionVariables.clear();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Tests...`);\r",
											"\r",
											"pm.test('Make sure collection variables are clean', () => {\r",
											"    pm.expect(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value)).to.be.an('array').empty;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "postman-echo.com/get",
									"host": [
										"postman-echo",
										"com"
									],
									"path": [
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "2. Log in as System Administrator (SOAP)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Tests...`);\r",
											"console.warn(`Code: ${pm.response.code} | Status: ${pm.response.status} | Response time: ${pm.response.responseTime} ms`);\r",
											"\r",
											"pm.expect(pm.response.text().includes('INVALID_LOGIN'), 'INVALID_LOGIN found in response - Suggested fix: Check username, password and tokens in the Postman Environment').to.be.false;\r",
											"\r",
											"pm.expect(pm.response.text().includes('API_CURRENTLY_DISABLED'), 'API_CURRENTLY_DISABLED found in response - Suggested fix: Create a Permission Set like \\'Api Enabled\\' with the API Enabled checkbox active in System Permissions and apply it to the user').to.be.false;\r",
											"\r",
											"const expectedResponseCodes = [200];\r",
											"pm.expect(pm.response.code).to.be.oneOf(expectedResponseCodes, \"Response code not in expected range\");\r",
											"\r",
											"pm.test('Validate the access token is found in the body and save it to the variables', () => {\r",
											"    const result = xml2Json(pm.response.text())['soapenv:Envelope']['soapenv:Body'].loginResponse.result;\r",
											"    const url = result.serverUrl.split('/');\r",
											"\r",
											"    pm.expect(result.sessionId).to.exist;\r",
											"    pm.expect(result.sessionId).to.be.a.string;\r",
											"\r",
											"    pm.collectionVariables.set('_token', result.sessionId);\r",
											"    pm.collectionVariables.set('_instanceUrl', url[0] + '//' + url[2]);\r",
											"    pm.collectionVariables.set('_userId', result.userId);\r",
											"    pm.collectionVariables.set('_orgId', result.userInfo.organizationId);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const expectedStringsInEnvironmentVariables = ['orgLoginUrl','apiVersion','orgAdminUsername','orgAdminPassword','orgAdminSecurityToken'];\r",
											"const expectedStringsInCollectionVariables = [];\r",
											"\r",
											"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											"\r",
											"// Expected strings in environment variables\r",
											"for(const esiev of expectedStringsInEnvironmentVariables)\r",
											"{\r",
											"    if(!pm.environment.has(esiev))\r",
											"    {\r",
											"        const msg = `Expected Postman environment variable not found: '${esiev} in environment: '${pm.environment.name}'`;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"\r",
											"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
											"}\r",
											"\r",
											"// Expected strings in collection variables\r",
											"for(esicv of expectedStringsInCollectionVariables)\r",
											"{\r",
											"    if(!pm.collectionVariables.has(esicv))\r",
											"    {\r",
											"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    \r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "text/xml; charset=UTF-8",
										"type": "text"
									},
									{
										"key": "SOAPAction",
										"value": "login",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "text/xml",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\r\n<env:Envelope xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"\r\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n    xmlns:n1=\"urn:partner.soap.sforce.com\"\r\n    xmlns:env=\"http://schemas.xmlsoap.org/soap/envelope/\">\r\n    <env:Body>\r\n        <n1:login>\r\n            <n1:username><![CDATA[{{orgAdminUsername}}]]></n1:username>\r\n            <n1:password><![CDATA[{{orgAdminPassword}}]]></n1:password>\r\n        </n1:login>\r\n    </env:Body>\r\n</env:Envelope>"
								},
								"url": {
									"raw": "{{orgLoginUrl}}/services/Soap/u/{{apiVersion}}",
									"host": [
										"{{orgLoginUrl}}"
									],
									"path": [
										"services",
										"Soap",
										"u",
										"{{apiVersion}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "3. Set WebStoreId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Tests...`);\r",
											"console.warn(`Code: ${pm.response.code} | Status: ${pm.response.status} | Response time: ${pm.response.responseTime} ms`);\r",
											"const expectedResponseCodes = [200];\r",
											"pm.expect(pm.response.code).to.be.oneOf(expectedResponseCodes, \"Response code not in expected range\");\r",
											"\r",
											"pm.test('Response is valid and has a JSON body', () => {\r",
											"     pm.response.to.be.success;\r",
											"     pm.response.to.be.withBody;\r",
											"     pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test('Validate the response and saves the WebStore Id in the collection variables', () => {\r",
											"    const data = pm.response.json();\r",
											"    pm.expect(data.records).to.exist;\r",
											"    pm.expect(data.records).to.be.an('array');\r",
											"    pm.expect(data.records.length).to.eql(1);\r",
											"    const webStore = data.records[0];\r",
											"    pm.expect(webStore.Id).to.exist;\r",
											"    pm.expect(webStore.Id).to.be.an('string');\r",
											"    pm.collectionVariables.set('_webStoreId', webStore.Id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											"\r",
											"// Expected strings in environment variables\r",
											"['orgLoginUrl','apiVersion', 'webStoreName'].forEach(esiev => {\r",
											"    if(!pm.environment.has(esiev)) {\r",
											"        const msg = 'Expected Postman environment variable not found: ' + esiev;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
											"});\r",
											"\r",
											"// Expected strings in collection variables\r",
											"['_instanceUrl'].forEach(esicv => {\r",
											"    if(!pm.collectionVariables.has(esicv)) {\r",
											"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{_instanceUrl}}/services/data/v{{apiVersion}}/query/?q=SELECT+Id,+Name+FROM+WebStore+WHERE+Name+=+'{{webStoreName}}'",
									"host": [
										"{{_instanceUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"query",
										""
									],
									"query": [
										{
											"key": "q",
											"value": "SELECT+Id,+Name+FROM+WebStore+WHERE+Name+=+'{{webStoreName}}'"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "4. Set Effective Account Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Tests...`);\r",
											"console.warn(`Code: ${pm.response.code} | Status: ${pm.response.status} | Response time: ${pm.response.responseTime} ms`);\r",
											"const expectedResponseCodes = [200];\r",
											"pm.expect(pm.response.code).to.be.oneOf(expectedResponseCodes, \"Response code not in expected range\");\r",
											"\r",
											"pm.test('Response is valid and has a JSON body', () => {\r",
											"     pm.response.to.be.success;\r",
											"     pm.response.to.be.withBody;\r",
											"     pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test('Validate the response and saves the WebStore Id in the collection variables', () => {\r",
											"    const data = pm.response.json();\r",
											"    pm.expect(data.records).to.exist;\r",
											"    pm.expect(data.records).to.be.an('array');\r",
											"    pm.expect(data.records.length).to.eql(1);\r",
											"    const account = data.records[0];\r",
											"    pm.expect(account.Id).to.exist;\r",
											"    pm.expect(account.Id).to.be.an('string');\r",
											"    pm.collectionVariables.set('_effectiveAccountId', account.Id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											"\r",
											"// Expected strings in environment variables\r",
											"['orgLoginUrl','apiVersion', 'webStoreName', 'buyerAccountName'].forEach(esiev => {\r",
											"    if(!pm.environment.has(esiev)) {\r",
											"        const msg = 'Expected Postman environment variable not found: ' + esiev;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
											"});\r",
											"\r",
											"// Expected strings in collection variables\r",
											"['_instanceUrl'].forEach(esicv => {\r",
											"    if(!pm.collectionVariables.has(esicv)) {\r",
											"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{_instanceUrl}}/services/data/v{{apiVersion}}/query/?q=SELECT+Id,+Name+FROM+Account+WHERE+Name+=+'{{buyerAccountName}}'",
									"host": [
										"{{_instanceUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"query",
										""
									],
									"query": [
										{
											"key": "q",
											"value": "SELECT+Id,+Name+FROM+Account+WHERE+Name+=+'{{buyerAccountName}}'"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "5. Set Product Ids",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Tests...`);\r",
											"console.warn(`Code: ${pm.response.code} | Status: ${pm.response.status} | Response time: ${pm.response.responseTime} ms`);\r",
											"const expectedResponseCodes = [200];\r",
											"pm.expect(pm.response.code).to.be.oneOf(expectedResponseCodes, \"Response code not in expected range\");\r",
											"\r",
											"pm.test('Response is valid and has a JSON body', () => {\r",
											"     pm.response.to.be.success;\r",
											"     pm.response.to.be.withBody;\r",
											"     pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test('Validate the response and save the Product Ids in the collection variables', () => {\r",
											"    const data = pm.response.json();\r",
											"    pm.expect(data.records).to.exist;\r",
											"    pm.expect(data.records).to.be.an('array');\r",
											"    pm.expect(data.records.length).greaterThan(1);\r",
											"    \r",
											"    const productIds = [];\r",
											"    data.records.forEach(p => {\r",
											"        productIds.push(p.Id);\r",
											"    });\r",
											"    \r",
											"    console.log('# of Product Ids: ' + productIds.length + ' Details:\\r\\n' + productIds.join(',\\r\\n'));\r",
											"    pm.collectionVariables.set('_productIds', JSON.stringify(productIds));\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											"\r",
											"// Expected strings in environment variables\r",
											"['orgLoginUrl','apiVersion', 'webStoreName', 'buyerAccountName', 'productNamesCommaDelimited'].forEach(esiev => {\r",
											"    if(!pm.environment.has(esiev)) {\r",
											"        const msg = 'Expected Postman environment variable not found: ' + esiev;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
											"});\r",
											"\r",
											"// Expected strings in collection variables\r",
											"['_instanceUrl'].forEach(esicv => {\r",
											"    if(!pm.collectionVariables.has(esicv)) {\r",
											"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
											"});\r",
											"\r",
											"console.log('Parsing and assigning productNames...');\r",
											"const productNamesCommaDelimited = pm.environment.get('productNamesCommaDelimited');\r",
											"const productNamesArray = productNamesCommaDelimited.split(',');\r",
											"console.log('# of Product Names: ' + productNamesArray.length + ' Details:\\r\\n' + productNamesArray.join(',\\r\\n'));\r",
											"pm.collectionVariables.set('_productNames', '\\'' + productNamesArray.join('\\',\\'') + '\\'');"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{_instanceUrl}}/services/data/v{{apiVersion}}/query/?q=SELECT+Id,+Name+FROM+Product2+WHERE+Name+in(+{{_productNames}})",
									"host": [
										"{{_instanceUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"query",
										""
									],
									"query": [
										{
											"key": "q",
											"value": "SELECT+Id,+Name+FROM+Product2+WHERE+Name+in(+{{_productNames}})"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "6. Login as Buyer (SOAP)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Tests...`);",
											"console.warn(`Code: ${pm.response.code} | Status: ${pm.response.status} | Response time: ${pm.response.responseTime} ms`);",
											"",
											"pm.expect(pm.response.text().includes('INVALID_LOGIN'), 'INVALID_LOGIN found in response - Suggested fix: Check username, password and tokens in the Postman Environment').to.be.false;",
											"",
											"pm.expect(pm.response.text().includes('API_CURRENTLY_DISABLED'), 'API_CURRENTLY_DISABLED found in response - Suggested fix: Create a Permission Set like \\'Api Enabled\\' with the API Enabled checkbox active in System Permissions and apply it to the user').to.be.false;",
											"",
											"const expectedResponseCodes = [200];",
											"pm.expect(pm.response.code).to.be.oneOf(expectedResponseCodes, \"Response code not in expected range\");",
											"",
											"pm.test('Validate the access token is found in the body and save it to a collection variable', () => {",
											"    const result = xml2Json(pm.response.text())['soapenv:Envelope']['soapenv:Body'].loginResponse.result;",
											"    const url = result.serverUrl.split('/');",
											"",
											"    pm.expect(result.sessionId).to.exist;",
											"    pm.expect(result.sessionId).to.be.a.string;",
											"",
											"    pm.collectionVariables.set('_token', result.sessionId);",
											"    pm.collectionVariables.set('_instanceUrl', url[0] + '//' + url[2]);",
											"    pm.collectionVariables.set('_userId', result.userId);",
											"    pm.collectionVariables.set('_orgId', result.userInfo.organizationId);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											"\r",
											"// Expected strings in environment variables\r",
											"['orgLoginUrl','apiVersion'].forEach(esiev => {\r",
											"    if(!pm.environment.has(esiev)) {\r",
											"        const msg = 'Expected Postman environment variable not found: ' + esiev;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
											"});\r",
											"\r",
											"// Expected strings in collection variables\r",
											"['_orgId', '_webStoreId'].forEach(esicv => {\r",
											"    if(pm.collectionVariables.get(esicv) === undefined) {\r",
											"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "text/xml; charset=UTF-8"
									},
									{
										"key": "SOAPAction",
										"value": "login"
									},
									{
										"key": "Accept",
										"value": "text/xml"
									},
									{
										"key": "Cookie",
										"value": "BrowserId=POhd6XTZEe2v6_8M7WG26g"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap:Envelope xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\" \nxmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://\nwww.w3.org/2001/XMLSchema\">\n    <soap:Header>\n        <LoginScopeHeader xmlns=\"urn:partner.soap.sforce.com\">\n            <organizationId>{{_orgId}}</organizationId>\n        </LoginScopeHeader>\n    </soap:Header>\n    <soap:Body>\n        <login xmlns=\"urn:partner.soap.sforce.com\">\n            <username><![CDATA[{{buyerUsername}}]]></username>\n            <password><![CDATA[{{buyerPassword}}]]></password>\n        </login>\n    </soap:Body>\n</soap:Envelope>"
								},
								"url": {
									"raw": "{{orgLoginUrl}}/services/Soap/u/{{apiVersion}}",
									"host": [
										"{{orgLoginUrl}}"
									],
									"path": [
										"services",
										"Soap",
										"u",
										"{{apiVersion}}"
									]
								},
								"description": "Authenticate the shopper through the variables _buyerUsername_ and _buyerPassword_. Generated session ID is saved in _accessToken for use in the other calls in the collection."
							},
							"response": []
						},
						{
							"name": "7. Search for Products",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Tests...`);",
											"console.warn(`Code: ${pm.response.code} | Status: ${pm.response.status} | Response time: ${pm.response.responseTime} ms`);",
											"const expectedResponseCodes = [201];",
											"pm.expect(pm.response.code).to.be.oneOf(expectedResponseCodes, \"Response code not in expected range\");",
											"",
											"pm.test('Response is valid and has a JSON body', () => {",
											"    pm.response.to.be.success;",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test('Validate the response and save the product id to a collection variable', () => {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.productsPage).to.exist;",
											"    pm.expect(jsonData.productsPage).to.be.an('object');",
											"    pm.expect(jsonData.productsPage.products).to.exist;",
											"    pm.expect(jsonData.productsPage.products).to.be.an('array');",
											"    pm.expect(jsonData.productsPage.products[0]).to.exist;",
											"    pm.expect(jsonData.productsPage.products[0]).to.be.an('object');",
											"    pm.expect(jsonData.productsPage.products[0]).to.exist;",
											"    pm.expect(jsonData.productsPage.products[0].id).to.be.an('string');",
											"    pm.collectionVariables.set('_productId', jsonData.productsPage.products[0].id);",
											"});",
											"",
											"// Remove the productId from the collection looked up as Administrator in \"Set Product Ids\" to avoid adding more of the same in \"Add multiple Products to Cart\"",
											"const productIdFromSearch = pm.collectionVariables.get('_productId');",
											"const productIds = pm.collectionVariables.get('_productIds');",
											"const index = productIds.indexOf(productIdFromSearch);",
											"if (index > -1) { // only splice when element found",
											"  productIds.splice(index, 1); // remove only one item",
											"}",
											"pm.collectionVariables.set('_productIds', productIds);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											"\r",
											"// Expected strings in environment variables\r",
											"['orgHostMySalesforceFormat','apiVersion', 'productSearchTerm'].forEach(esiev => {\r",
											"    if(!pm.environment.has(esiev)) {\r",
											"        const msg = 'Expected Postman environment variable not found: ' + esiev;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
											"});\r",
											"\r",
											"// Expected strings in collection variables\r",
											"['_webStoreId', '_token', '_orgId'].forEach(esicv => {\r",
											"    if(!pm.collectionVariables.has(esicv)) {\r",
											"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableUrlEncoding": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"searchTerm\": \"{{productSearchTerm}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{_instanceUrl}}/services/data/v{{apiVersion}}/commerce/webstores/{{_webStoreId}}/search/product-search",
									"host": [
										"{{_instanceUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"commerce",
										"webstores",
										"{{_webStoreId}}",
										"search",
										"product-search"
									]
								},
								"description": "Uses the variable _productSearchTerm_ to search for products in the webstore. Sets the first returned product in the variable _productId_."
							},
							"response": []
						},
						{
							"name": "8. Get Product Detail",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Tests...`);",
											"console.warn(`Code: ${pm.response.code} | Status: ${pm.response.status} | Response time: ${pm.response.responseTime} ms`);",
											"const expectedResponseCodes = [200];",
											"pm.expect(pm.response.code).to.be.oneOf(expectedResponseCodes, \"Response code not in expected range\");",
											"",
											"pm.test('Response is valid and has a JSON body', () => {",
											"    pm.response.to.be.success;",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test('Validate the response', () => {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.defaultImage).to.exist;",
											"    pm.expect(jsonData.defaultImage).to.be.an('object').with.property('id').to.be.an('string');",
											"",
											"    pm.expect(jsonData.fields).to.exist;",
											"    pm.expect(jsonData.fields).to.be.an('object').with.property('Name').to.be.an('string');",
											"    pm.expect(jsonData.fields).to.be.an('object').with.property('Description').to.be.an('string');",
											"    pm.expect(jsonData.fields).to.be.an('object').with.property('LastModifiedDate').to.match(/\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}Z/);",
											"    ",
											"    pm.expect(jsonData.mediaGroups).to.exist;",
											"    pm.expect(jsonData.mediaGroups).to.be.an('array');",
											"    pm.expect(jsonData.mediaGroups[0]).to.be.an('object').with.property('id').to.be.an('string');",
											"    pm.expect(jsonData.mediaGroups[0].mediaItems[0]).to.be.an('object').with.property('url').to.be.an('string');",
											"    pm.expect(jsonData.mediaGroups[0].mediaItems[0]).to.be.an('object').with.property('mediaType').to.be.an('string');",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											"\r",
											"// Expected strings in environment variables\r",
											"['orgHostMySalesforceFormat','apiVersion'].forEach(esiev => {\r",
											"    if(!pm.environment.has(esiev)) {\r",
											"        const msg = 'Expected Postman environment variable not found: ' + esiev;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
											"});\r",
											"\r",
											"// Expected strings in collection variables\r",
											"['_webStoreId', '_productId', '_token'].forEach(esicv => {\r",
											"    if(!pm.collectionVariables.has(esicv)) {\r",
											"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{_instanceUrl}}/services/data/v{{apiVersion}}/commerce/webstores/{{_webStoreId}}/products/{{_productId}}",
									"host": [
										"{{_instanceUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"commerce",
										"webstores",
										"{{_webStoreId}}",
										"products",
										"{{_productId}}"
									],
									"query": [
										{
											"key": "effectiveAccountId",
											"value": "<string>",
											"disabled": true
										},
										{
											"key": "excludeAttributeSetInfo",
											"value": "<boolean>",
											"disabled": true
										},
										{
											"key": "excludeEntitlementDetails",
											"value": "<boolean>",
											"disabled": true
										},
										{
											"key": "excludeFields",
											"value": "<boolean>",
											"disabled": true
										},
										{
											"key": "excludeMedia",
											"value": "<boolean>",
											"disabled": true
										},
										{
											"key": "excludePrimaryProductCategory",
											"value": "<boolean>",
											"disabled": true
										},
										{
											"key": "excludeProductSellingModels",
											"value": "<boolean>",
											"disabled": true
										},
										{
											"key": "excludeQuantityRule",
											"value": "<boolean>",
											"disabled": true
										},
										{
											"key": "excludeVariationInfo",
											"value": "<boolean>",
											"disabled": true
										},
										{
											"key": "fields",
											"value": "[]",
											"disabled": true
										},
										{
											"key": "mediaGroups",
											"value": "[]",
											"disabled": true
										}
									]
								},
								"description": "Fetch standard field data, custom field data, and enrichment data for a single Product, identified by the variable _productId_ that was set by the search products request."
							},
							"response": []
						},
						{
							"name": "9. Get Active Cart",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											"\r",
											"pm.collectionVariables.set('_cartStateOrId', 'active');\r",
											"\r",
											"// Expected strings in environment variables\r",
											"['orgHostMySalesforceFormat','apiVersion'].forEach(esiev => {\r",
											"    if(!pm.environment.has(esiev)) {\r",
											"        const msg = 'Expected Postman environment variable not found: ' + esiev;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
											"});\r",
											"\r",
											"// Expected strings in collection variables\r",
											"['_webStoreId', '_productId', '_token', '_cartStateOrId'].forEach(esicv => {\r",
											"    if(!pm.collectionVariables.has(esicv)) {\r",
											"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Tests...`);\r",
											"console.warn(`Code: ${pm.response.code} | Status: ${pm.response.status} | Response time: ${pm.response.responseTime} ms`);\r",
											"\r",
											"if(pm.response.code === 400){\r",
											"    pm.expect.fail(\"Buyer cart not clean. Suggested fix: Log in to storefront, empty cart and run this folder again.\");\r",
											"}\r",
											"\r",
											"const expectedResponseCodes = [200];\r",
											"pm.expect(pm.response.code).to.be.oneOf(expectedResponseCodes, \"Response code not in expected range\");\r",
											"\r",
											"pm.test('Response is valid and has a JSON body', () => {\r",
											"    pm.response.to.be.success;\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test('Validate the response contains a cart Id and set the collection variables', () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.cartId).to.exist;\r",
											"    pm.expect(jsonData.cartId).to.be.an('string');\r",
											"    pm.collectionVariables.set('_cartStateOrId', jsonData.cartId);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{_instanceUrl}}/services/data/v{{apiVersion}}/commerce/webstores/{{_webStoreId}}/carts/{{_cartStateOrId}}",
									"host": [
										"{{_instanceUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"commerce",
										"webstores",
										"{{_webStoreId}}",
										"carts",
										"{{_cartStateOrId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "10. Add single Product to Cart",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											"\r",
											"// Expected strings in environment variables\r",
											"['orgHostMySalesforceFormat','apiVersion'].forEach(esiev => {\r",
											"    if(!pm.environment.has(esiev)) {\r",
											"        const msg = 'Expected Postman environment variable not found: ' + esiev;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
											"});\r",
											"\r",
											"console.info(pm.collectionVariables.get('_cartStateOrId'));\r",
											"\r",
											"// Expected strings in collection variables\r",
											"['_instanceUrl', '_webStoreId', '_productId', '_token', '_cartStateOrId', '_effectiveAccountId'].forEach(esicv => {\r",
											"    if(!pm.collectionVariables.has(esicv)) {\r",
											"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Tests...`);\r",
											"console.warn(`Code: ${pm.response.code} | Status: ${pm.response.status} | Response time: ${pm.response.responseTime} ms`);\r",
											"\r",
											"const expectedResponseCodes = [202, 201, 200];\r",
											"pm.expect(pm.response.code).to.be.oneOf(expectedResponseCodes, \"Response code not in expected range\");\r",
											"\r",
											"pm.test('Response is valid and has a JSON body', () => {\r",
											"    pm.response.to.be.success;\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test('Validate the response', () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.cartItemId).to.exist;\r",
											"    pm.expect(jsonData.cartItemId).to.be.a.string;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"productId\": \"{{_productId}}\",\r\n   \"quantity\":\"1\",\r\n   \"type\":\"Product\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{_instanceUrl}}/services/data/v{{apiVersion}}/commerce/webstores/{{_webStoreId}}/carts/{{_cartStateOrId}}/cart-items?effectiveAccountId={{_effectiveAccountId}}",
									"host": [
										"{{_instanceUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"commerce",
										"webstores",
										"{{_webStoreId}}",
										"carts",
										"{{_cartStateOrId}}",
										"cart-items"
									],
									"query": [
										{
											"key": "effectiveAccountId",
											"value": "{{_effectiveAccountId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "11. Start Checkout",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Tests...`);",
											"console.warn(`Code: ${pm.response.code} | Status: ${pm.response.status} | Response time: ${pm.response.responseTime} ms`);",
											"const expectedResponseCodes = [202];",
											"pm.expect(pm.response.code).to.be.oneOf(expectedResponseCodes, \"Response code not in expected range\");",
											"",
											"",
											"let checkoutId = pm.response.json().checkoutId;",
											"pm.collectionVariables.set('_checkoutId', checkoutId);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											"\r",
											"// Expected strings in environment variables\r",
											"['orgHostMySalesforceFormat','apiVersion'].forEach(esiev => {\r",
											"    if(!pm.environment.has(esiev)) {\r",
											"        const msg = 'Expected Postman environment variable not found: ' + esiev;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
											"});\r",
											"\r",
											"// Expected strings in collection variables\r",
											"['_instanceUrl', '_webStoreId', '_token', '_cartStateOrId'].forEach(esicv => {\r",
											"    if(!pm.collectionVariables.has(esicv)) {\r",
											"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"cartId\":\"{{_cartStateOrId}}\"}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{_instanceUrl}}/services/data/v{{apiVersion}}/commerce/webstores/{{_webStoreId}}/checkouts/",
									"host": [
										"{{_instanceUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"commerce",
										"webstores",
										"{{_webStoreId}}",
										"checkouts",
										""
									]
								},
								"description": "Starts a checkout for the cart identified by the variable __cartId_. Sets the checkout identifier in the variable __checkoutId_."
							},
							"response": []
						},
						{
							"name": "12. Get Shipping Addresses",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Tests...`);",
											"console.warn(`Code: ${pm.response.code} | Status: ${pm.response.status} | Response time: ${pm.response.responseTime} ms`);",
											"const expectedResponseCodes = [200];",
											"pm.expect(pm.response.code).to.be.oneOf(expectedResponseCodes, \"Response code not in expected range\");",
											"",
											"const responseJson = pm.response.json();",
											"const addressList = responseJson.items;",
											"pm.collectionVariables.set('_addressId', addressList[0].addressId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											"\r",
											"// Expected strings in environment variables\r",
											"['orgHostMySalesforceFormat','apiVersion'].forEach(esiev => {\r",
											"    if(!pm.environment.has(esiev)) {\r",
											"        const msg = 'Expected Postman environment variable not found: ' + esiev;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
											"});\r",
											"\r",
											"// Expected strings in collection variables\r",
											"['_checkoutId', '_webStoreId', '_token', '_cartStateOrId'].forEach(esicv => {\r",
											"    if(!pm.collectionVariables.has(esicv)) {\r",
											"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{_instanceUrl}}/services/data/v{{apiVersion}}/commerce/webstores/{{_webStoreId}}/accounts/{{_effectiveAccountId}}/addresses?addressType=Shipping&sortOrder=CreatedDateDesc&excludeUnsupportedCountries=true",
									"host": [
										"{{_instanceUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"commerce",
										"webstores",
										"{{_webStoreId}}",
										"accounts",
										"{{_effectiveAccountId}}",
										"addresses"
									],
									"query": [
										{
											"key": "addressType",
											"value": "Shipping"
										},
										{
											"key": "sortOrder",
											"value": "CreatedDateDesc"
										},
										{
											"key": "excludeUnsupportedCountries",
											"value": "true"
										}
									]
								},
								"description": "Returns all of the shipping addresses associated with the buyer account identified through the _buyerAccountId_ variable. Sets the __addressId_ variable to the last created shipping address for that buyer account."
							},
							"response": []
						},
						{
							"name": "13. Add Shipping Address (demonstration purposes)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Tests...`);",
											"console.warn(`Code: ${pm.response.code} | Status: ${pm.response.status} | Response time: ${pm.response.responseTime} ms`);",
											"const expectedResponseCodes = [201];",
											"pm.expect(pm.response.code).to.be.oneOf(expectedResponseCodes, \"Response code not in expected range\");",
											"",
											"const responseJson = pm.response.json();",
											"pm.collectionVariables.set('_addressId', responseJson.addressId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											"\r",
											"// Expected strings in environment variables\r",
											"['orgHostMySalesforceFormat','apiVersion'].forEach(esiev => {\r",
											"    if(!pm.environment.has(esiev)) {\r",
											"        const msg = 'Expected Postman environment variable not found: ' + esiev;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
											"});\r",
											"\r",
											"// Expected strings in collection variables\r",
											"['_addressId', '_webStoreId', '_token', '_cartStateOrId'].forEach(esicv => {\r",
											"    if(!pm.collectionVariables.has(esicv)) {\r",
											"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"city\":\"Boston\",\n  \"country\":\"US\",\n  \"isDefault\":false,\n  \"name\":\"Home Address\",\n  \"postalCode\":\"01234\",\n  \"region\":\"MA\",\n  \"street\":\"1 Milk Street\",\n  \"addressType\": \"Shipping\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{_instanceUrl}}/services/data/v{{apiVersion}}/commerce/webstores/{{_webStoreId}}/accounts/{{_effectiveAccountId}}/addresses",
									"host": [
										"{{_instanceUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"commerce",
										"webstores",
										"{{_webStoreId}}",
										"accounts",
										"{{_effectiveAccountId}}",
										"addresses"
									]
								},
								"description": "Adds a shipping address associated with the buyer account (variable _buyerAccountId_) and stores the address identifier into the variable __addressId_."
							},
							"response": []
						},
						{
							"name": "14. Update Shipping Address (demonstration purposes)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Tests...`);",
											"console.warn(`Code: ${pm.response.code} | Status: ${pm.response.status} | Response time: ${pm.response.responseTime} ms`);",
											"const expectedResponseCodes = [201];",
											"pm.expect(pm.response.code).to.be.oneOf(expectedResponseCodes, \"Response code not in expected range\");",
											"",
											"const responseJson = pm.response.json();",
											"pm.collectionVariables.set('_addressId', responseJson.addressId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											"\r",
											"// Expected strings in environment variables\r",
											"['orgHostMySalesforceFormat','apiVersion'].forEach(esiev => {\r",
											"    if(!pm.environment.has(esiev)) {\r",
											"        const msg = 'Expected Postman environment variable not found: ' + esiev;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
											"});\r",
											"\r",
											"// Expected strings in collection variables\r",
											"['_webStoreId', '_token', '_cartStateOrId'].forEach(esicv => {\r",
											"    if(!pm.collectionVariables.has(esicv)) {\r",
											"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_token}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"city\":\"Boston\",\n  \"country\":\"US\",\n  \"isDefault\":false,\n  \"name\":\"Home Address\",\n  \"postalCode\":\"01234\",\n  \"region\":\"MA\",\n  \"street\":\"123 Main Street\",\n  \"addressType\": \"Shipping\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{_instanceUrl}}/services/data/v{{apiVersion}}/commerce/webstores/{{_webStoreId}}/accounts/{{_effectiveAccountId}}/addresses/:addressId",
									"host": [
										"{{_instanceUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"commerce",
										"webstores",
										"{{_webStoreId}}",
										"accounts",
										"{{_effectiveAccountId}}",
										"addresses",
										":addressId"
									],
									"variable": [
										{
											"key": "addressId",
											"value": "{{_addressId}}"
										}
									]
								},
								"description": "Adds a shipping address associated with the buyer account (variable _buyerAccountId_) and stores the address identifier into the variable __addressId_."
							},
							"response": []
						},
						{
							"name": "15. Apply Shipping Address to Checkout",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Tests...`);",
											"console.warn(`Code: ${pm.response.code} | Status: ${pm.response.status} | Response time: ${pm.response.responseTime} ms`);",
											"const expectedResponseCodes = [202];",
											"pm.expect(pm.response.code).to.be.oneOf(expectedResponseCodes, \"Response code not in expected range\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											"\r",
											"// Expected strings in environment variables\r",
											"['orgHostMySalesforceFormat','apiVersion'].forEach(esiev => {\r",
											"    if(!pm.environment.has(esiev)) {\r",
											"        const msg = 'Expected Postman environment variable not found: ' + esiev;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
											"});\r",
											"\r",
											"// Expected strings in collection variables\r",
											"['_checkoutId', '_addressId', '_webStoreId', '_token', '_cartStateOrId'].forEach(esicv => {\r",
											"    if(!pm.collectionVariables.has(esicv)) {\r",
											"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_token}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"deliveryAddress\": {\n    \"id\": \"{{_addressId}}\"\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{_instanceUrl}}/services/data/v{{apiVersion}}/commerce/webstores/{{_webStoreId}}/checkouts/:checkoutId",
									"host": [
										"{{_instanceUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"commerce",
										"webstores",
										"{{_webStoreId}}",
										"checkouts",
										":checkoutId"
									],
									"variable": [
										{
											"key": "checkoutId",
											"value": "{{_checkoutId}}"
										}
									]
								},
								"description": "Sets the ship-to address associated with the checkout (variable _checkoutId) to the_ address found/created in a previous request (variable __addressId)_."
							},
							"response": []
						},
						{
							"name": "16. Get Checkout",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Tests...`);",
											"console.warn(`Code: ${pm.response.code} | Status: ${pm.response.status} | Response time: ${pm.response.responseTime} ms`);",
											"const expectedResponseCodes = [200];",
											"pm.expect(pm.response.code).to.be.oneOf(expectedResponseCodes, \"Response code not in expected range\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											"\r",
											"// Expected strings in environment variables\r",
											"['orgHostMySalesforceFormat','apiVersion'].forEach(esiev => {\r",
											"    if(!pm.environment.has(esiev)) {\r",
											"        const msg = 'Expected Postman environment variable not found: ' + esiev;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
											"});\r",
											"\r",
											"// Expected strings in collection variables\r",
											"['_webStoreId', '_token', '_cartStateOrId'].forEach(esicv => {\r",
											"    if(!pm.collectionVariables.has(esicv)) {\r",
											"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{_instanceUrl}}/services/data/v{{apiVersion}}/commerce/webstores/{{_webStoreId}}/checkouts/{{_checkoutId}}",
									"host": [
										"{{_instanceUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"commerce",
										"webstores",
										"{{_webStoreId}}",
										"checkouts",
										"{{_checkoutId}}"
									]
								},
								"description": "Retrieves the checkout (variable __checkoutId_)."
							},
							"response": []
						},
						{
							"name": "17. Create Payment",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Tests...`);",
											"console.warn(`Code: ${pm.response.code} | Status: ${pm.response.status} | Response time: ${pm.response.responseTime} ms`);",
											"const expectedResponseCodes = [201];",
											"pm.expect(pm.response.code).to.be.oneOf(expectedResponseCodes, \"Response code not in expected range\");",
											"",
											"const responseJson = pm.response.json();",
											"let paymentToken = responseJson.token;",
											"pm.collectionVariables.set('_paymentToken', paymentToken);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											"\r",
											"// Expected strings in environment variables\r",
											"['orgHostMySalesforceFormat','apiVersion'].forEach(esiev => {\r",
											"    if(!pm.environment.has(esiev)) {\r",
											"        const msg = 'Expected Postman environment variable not found: ' + esiev;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
											"});\r",
											"\r",
											"// Expected strings in collection variables\r",
											"['_webStoreId', '_token', '_cartStateOrId'].forEach(esicv => {\r",
											"    if(!pm.collectionVariables.has(esicv)) {\r",
											"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"billingAddress\":{\n      \"name\":\"John Doe\",\n      \"street\":\"123 Acme Drive\",\n      \"city\":\"Los Angeles\",\n      \"country\":\"United States\",\n      \"postalCode\":\"90001\"\n   },\n  \"cardPaymentMethod\": {\n    \"cardHolderName\": \"John Doe Guest\",\n    \"cardNumber\": \"4242424242424242\",\n    \"expiryMonth\": 12,\n    \"expiryYear\": 2029,\n    \"cvv\": 111,\n    \"cardType\": \"Visa\"\n    }\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{_instanceUrl}}/services/data/v{{apiVersion}}/commerce/webstores/{{_webStoreId}}/payments/token",
									"host": [
										"{{_instanceUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"commerce",
										"webstores",
										"{{_webStoreId}}",
										"payments",
										"token"
									]
								},
								"description": "Perform a server-side payment and store the created payment token in the variable __paymentToken_.\n\nNote: The sample payment gateway included in the store creation simply returns a dummy token."
							},
							"response": []
						},
						{
							"name": "18. Apply Payment to Checkout",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Tests...`);",
											"console.warn(`Code: ${pm.response.code} | Status: ${pm.response.status} | Response time: ${pm.response.responseTime} ms`);",
											"const expectedResponseCodes = [201];",
											"pm.expect(pm.response.code).to.be.oneOf(expectedResponseCodes, \"Response code not in expected range\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											"\r",
											"// Expected strings in environment variables\r",
											"['orgHostMySalesforceFormat','apiVersion'].forEach(esiev => {\r",
											"    if(!pm.environment.has(esiev)) {\r",
											"        const msg = 'Expected Postman environment variable not found: ' + esiev;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
											"});\r",
											"\r",
											"// Expected strings in collection variables\r",
											"['_paymentToken', '_webStoreId', '_token', '_cartStateOrId'].forEach(esicv => {\r",
											"    if(!pm.collectionVariables.has(esicv)) {\r",
											"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"paymentToken\":\"{{_paymentToken}}\",\n   \"requestType\":\"Auth\",\n   \"billingAddress\":{\n      \"name\":\"John Doe\",\n      \"street\":\"123 Acme Drive\",\n      \"city\":\"Los Angeles\",\n      \"region\":\"California\",\n      \"country\":\"United States\",\n      \"postalCode\":\"90001\"\n   }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{_instanceUrl}}/services/data/v{{apiVersion}}/commerce/webstores/{{_webStoreId}}/checkouts/:checkoutId/payments",
									"host": [
										"{{_instanceUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"commerce",
										"webstores",
										"{{_webStoreId}}",
										"checkouts",
										":checkoutId",
										"payments"
									],
									"variable": [
										{
											"key": "checkoutId",
											"value": "{{_checkoutId}}"
										}
									]
								},
								"description": "Applies the payment token (variable __paymentToken_) to the checkout (variable __checkoutId_). Also sets the billing address.\n\nNote: No checking will be done for the validity of the billing address or token. This uses the sample SalesforceAdapter provided in the sample store."
							},
							"response": []
						},
						{
							"name": "19. Create Order",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Tests...`);",
											"console.warn(`Code: ${pm.response.code} | Status: ${pm.response.status} | Response time: ${pm.response.responseTime} ms`);",
											"const expectedResponseCodes = [201];",
											"pm.expect(pm.response.code).to.be.oneOf(expectedResponseCodes, \"Response code not in expected range\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											"\r",
											"// Expected strings in environment variables\r",
											"['orgHostMySalesforceFormat','apiVersion'].forEach(esiev => {\r",
											"    if(!pm.environment.has(esiev)) {\r",
											"        const msg = 'Expected Postman environment variable not found: ' + esiev;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
											"});\r",
											"\r",
											"// Expected strings in collection variables\r",
											"['_webStoreId', '_token', '_cartStateOrId', '_checkoutId'].forEach(esicv => {\r",
											"    if(!pm.collectionVariables.has(esicv)) {\r",
											"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{_instanceUrl}}/services/data/v{{apiVersion}}/commerce/webstores/{{_webStoreId}}/checkouts/{{_checkoutId}}/orders",
									"host": [
										"{{_instanceUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"commerce",
										"webstores",
										"{{_webStoreId}}",
										"checkouts",
										"{{_checkoutId}}",
										"orders"
									]
								},
								"description": "Checkout Payments Action"
							},
							"response": []
						},
						{
							"name": "20. Get Order Summaries",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Tests...`);",
											"console.warn(`Code: ${pm.response.code} | Status: ${pm.response.status} | Response time: ${pm.response.responseTime} ms`);",
											"const expectedResponseCodes = [200];",
											"pm.expect(pm.response.code).to.be.oneOf(expectedResponseCodes, \"Response code not in expected range\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											"\r",
											"// Expected strings in environment variables\r",
											"['orgHostMySalesforceFormat','apiVersion'].forEach(esiev => {\r",
											"    if(!pm.environment.has(esiev)) {\r",
											"        const msg = 'Expected Postman environment variable not found: ' + esiev;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
											"});\r",
											"\r",
											"// Expected strings in collection variables\r",
											"['_webStoreId', '_token', '_cartStateOrId'].forEach(esicv => {\r",
											"    if(!pm.collectionVariables.has(esicv)) {\r",
											"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{_instanceUrl}}/services/data/v{{apiVersion}}/commerce/webstores/{{_webStoreId}}/order-summaries",
									"host": [
										"{{_instanceUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"commerce",
										"webstores",
										"{{_webStoreId}}",
										"order-summaries"
									]
								},
								"description": "Get all of the order summaries (i.e., placed orders) from the webstore."
							},
							"response": []
						}
					],
					"description": "Interactions with the [Commerce Webstore Cart](https://developer.salesforce.com/docs/atlas.en-us.chatterapi.meta/chatterapi/connect_resources_commerce_webstore_cart.htm) and [Commerce Webstore Cart Items ](https://developer.salesforce.com/docs/atlas.en-us.chatterapi.meta/chatterapi/connect_resources_commerce_webstore_cart_items.htm) and [Commerce Webstore Checkout ](https://developer.salesforce.com/docs/atlas.en-us.chatterapi.meta/chatterapi/connect_resources_commerce_webstore_checkouts.htm) using the Buyer Login flow.\n\n`/commerce/webstores/webstoreId/carts/cartStateOrId`\n\n`/commerce/webstores/webstoreId/carts/cartStateOrId/cart-items`\n\n`/commerce/webstores/webstoreId/checkouts/activeOrCheckoutId`"
				},
				{
					"name": "Happy Path (Guest) - WIP",
					"item": [],
					"description": "Interactions with the [Commerce Webstore Cart](https://developer.salesforce.com/docs/atlas.en-us.chatterapi.meta/chatterapi/connect_resources_commerce_webstore_cart.htm) and [Commerce Webstore Cart Items ](https://developer.salesforce.com/docs/atlas.en-us.chatterapi.meta/chatterapi/connect_resources_commerce_webstore_cart_items.htm) and [Commerce Webstore Checkout ](https://developer.salesforce.com/docs/atlas.en-us.chatterapi.meta/chatterapi/connect_resources_commerce_webstore_checkouts.htm) using out-of-the-box Guest checkout.\n\n`/commerce/webstores/webstoreId/carts/cartStateOrId`\n\n`/commerce/webstores/webstoreId/carts/cartStateOrId/cart-items`\n\n`/commerce/webstores/webstoreId/checkouts/activeOrCheckoutId`"
				},
				{
					"name": "Cancel Checkout (Buyer Login) - WIP",
					"item": [
						{
							"name": "1. Clear Collection Variables",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
											"\r",
											"// Check for environment selection\r",
											"if(pm.environment.name === undefined) {\r",
											"    const msg = 'No Postman environment selected or set.';\r",
											"    pm.expect.fail(msg);\r",
											"}\r",
											"\r",
											"// Clean up the variables from the collection set throughout the various calls\r",
											"pm.collectionVariables.clear();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Tests...`);\r",
											"\r",
											"pm.test('Make sure collection variables are clean', () => {\r",
											"    pm.expect(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value)).to.be.an('array').empty;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "postman-echo.com/get",
									"host": [
										"postman-echo",
										"com"
									],
									"path": [
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "2. Log in as System Administrator (SOAP)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Tests...`);\r",
											"console.warn(`Code: ${pm.response.code} | Status: ${pm.response.status} | Response time: ${pm.response.responseTime} ms`);\r",
											"\r",
											"pm.expect(pm.response.text().includes('INVALID_LOGIN'), 'INVALID_LOGIN found in response - Suggested fix: Check username, password and tokens in the Postman Environment').to.be.false;\r",
											"\r",
											"pm.expect(pm.response.text().includes('API_CURRENTLY_DISABLED'), 'API_CURRENTLY_DISABLED found in response - Suggested fix: Create a Permission Set like \\'Api Enabled\\' with the API Enabled checkbox active in System Permissions and apply it to the user').to.be.false;\r",
											"\r",
											"const expectedResponseCodes = [200];\r",
											"pm.expect(pm.response.code).to.be.oneOf(expectedResponseCodes, \"Response code not in expected range\");\r",
											"\r",
											"pm.test('Validate the access token is found in the body and save it to the variables', () => {\r",
											"    const result = xml2Json(pm.response.text())['soapenv:Envelope']['soapenv:Body'].loginResponse.result;\r",
											"    const url = result.serverUrl.split('/');\r",
											"\r",
											"    pm.expect(result.sessionId).to.exist;\r",
											"    pm.expect(result.sessionId).to.be.a.string;\r",
											"\r",
											"    pm.collectionVariables.set('_token', result.sessionId);\r",
											"    pm.collectionVariables.set('_instanceUrl', url[0] + '//' + url[2]);\r",
											"    pm.collectionVariables.set('_userId', result.userId);\r",
											"    pm.collectionVariables.set('_orgId', result.userInfo.organizationId);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const expectedStringsInEnvironmentVariables = ['orgLoginUrl','apiVersion','orgAdminUsername','orgAdminPassword','orgAdminSecurityToken'];\r",
											"const expectedStringsInCollectionVariables = [];\r",
											"\r",
											"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											"\r",
											"// Expected strings in environment variables\r",
											"for(const esiev of expectedStringsInEnvironmentVariables)\r",
											"{\r",
											"    if(!pm.environment.has(esiev))\r",
											"    {\r",
											"        const msg = `Expected Postman environment variable not found: '${esiev} in environment: '${pm.environment.name}'`;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"\r",
											"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
											"}\r",
											"\r",
											"// Expected strings in collection variables\r",
											"for(esicv of expectedStringsInCollectionVariables)\r",
											"{\r",
											"    if(!pm.collectionVariables.has(esicv))\r",
											"    {\r",
											"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    \r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "text/xml; charset=UTF-8",
										"type": "text"
									},
									{
										"key": "SOAPAction",
										"value": "login",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "text/xml",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\r\n<env:Envelope xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"\r\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n    xmlns:n1=\"urn:partner.soap.sforce.com\"\r\n    xmlns:env=\"http://schemas.xmlsoap.org/soap/envelope/\">\r\n    <env:Body>\r\n        <n1:login>\r\n            <n1:username><![CDATA[{{orgAdminUsername}}]]></n1:username>\r\n            <n1:password><![CDATA[{{orgAdminPassword}}]]></n1:password>\r\n        </n1:login>\r\n    </env:Body>\r\n</env:Envelope>"
								},
								"url": {
									"raw": "{{orgLoginUrl}}/services/Soap/u/{{apiVersion}}",
									"host": [
										"{{orgLoginUrl}}"
									],
									"path": [
										"services",
										"Soap",
										"u",
										"{{apiVersion}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "3. Set WebStoreId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Tests...`);\r",
											"console.warn(`Code: ${pm.response.code} | Status: ${pm.response.status} | Response time: ${pm.response.responseTime} ms`);\r",
											"const expectedResponseCodes = [200];\r",
											"pm.expect(pm.response.code).to.be.oneOf(expectedResponseCodes, \"Response code not in expected range\");\r",
											"\r",
											"pm.test('Response is valid and has a JSON body', () => {\r",
											"     pm.response.to.be.success;\r",
											"     pm.response.to.be.withBody;\r",
											"     pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test('Validate the response and saves the WebStore Id in the collection variables', () => {\r",
											"    const data = pm.response.json();\r",
											"    pm.expect(data.records).to.exist;\r",
											"    pm.expect(data.records).to.be.an('array');\r",
											"    pm.expect(data.records.length).to.eql(1);\r",
											"    const webStore = data.records[0];\r",
											"    pm.expect(webStore.Id).to.exist;\r",
											"    pm.expect(webStore.Id).to.be.an('string');\r",
											"    pm.collectionVariables.set('_webStoreId', webStore.Id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
											"\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											"\r",
											"['orgLoginUrl','apiVersion', 'webStoreName'].forEach(esiev => {\r",
											"    if(!pm.environment.has(esiev)) {\r",
											"       const msg = 'Expected Postman environment variable not found: ' + esiev;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
											"});\r",
											"\r",
											"['_instanceUrl'].forEach(esicv => {\r",
											"    if(pm.collectionVariables.get(esicv) === undefined) {\r",
											"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{_instanceUrl}}/services/data/v{{apiVersion}}/query/?q=SELECT+Id,+Name+FROM+WebStore+WHERE+Name+=+'{{webStoreName}}'",
									"host": [
										"{{_instanceUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"query",
										""
									],
									"query": [
										{
											"key": "q",
											"value": "SELECT+Id,+Name+FROM+WebStore+WHERE+Name+=+'{{webStoreName}}'"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "4. Login as Buyer (SOAP)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Tests...`);",
											"console.warn(`Code: ${pm.response.code} | Status: ${pm.response.status} | Response time: ${pm.response.responseTime} ms`);",
											"",
											"pm.expect(pm.response.text().includes('INVALID_LOGIN'), 'INVALID_LOGIN found in response - Suggested fix: Check username, password and tokens in the Postman Environment').to.be.false;",
											"",
											"pm.expect(pm.response.text().includes('API_CURRENTLY_DISABLED'), 'API_CURRENTLY_DISABLED found in response - Suggested fix: Create a Permission Set like \\'Api Enabled\\' with the API Enabled checkbox active in System Permissions and apply it to the user').to.be.false;",
											"",
											"const expectedResponseCodes = [200];",
											"pm.expect(pm.response.code).to.be.oneOf(expectedResponseCodes, \"Response code not in expected range\");",
											"",
											"pm.test('Validate the access token is found in the body and save it to a collection variable', () => {",
											"    ",
											"    const result = xml2Json(pm.response.text())['soapenv:Envelope']['soapenv:Body'].loginResponse.result;",
											"    const url = result.serverUrl.split('/');",
											"",
											"    pm.expect(result.sessionId).to.exist;",
											"    pm.expect(result.sessionId).to.be.a.string;",
											"",
											"    pm.collectionVariables.set('_token', result.sessionId);",
											"    pm.collectionVariables.set('_instanceUrl', url[0] + '//' + url[2]);",
											"    pm.collectionVariables.set('_userId', result.userId);",
											"    pm.collectionVariables.set('_orgId', result.userInfo.organizationId);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
											"\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											"\r",
											"['orgLoginUrl','apiVersion'].forEach(esiev => {\r",
											"    if(!pm.environment.has(esiev)) {\r",
											"        const msg = 'Expected Postman environment variable not found: ' + esiev;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
											"});\r",
											"\r",
											"['_orgId', '_webStoreId'].forEach(esicv => {\r",
											"    if(pm.collectionVariables.get(esicv) === undefined) {\r",
											"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "text/xml; charset=UTF-8"
									},
									{
										"key": "SOAPAction",
										"value": "login"
									},
									{
										"key": "Accept",
										"value": "text/xml"
									},
									{
										"key": "Cookie",
										"value": "BrowserId=POhd6XTZEe2v6_8M7WG26g"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap:Envelope xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\" \nxmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://\nwww.w3.org/2001/XMLSchema\">\n    <soap:Header>\n        <LoginScopeHeader xmlns=\"urn:partner.soap.sforce.com\">\n            <organizationId>{{_orgId}}</organizationId>\n        </LoginScopeHeader>\n    </soap:Header>\n    <soap:Body>\n        <login xmlns=\"urn:partner.soap.sforce.com\">\n            <username><![CDATA[{{buyerUsername}}]]></username>\n            <password><![CDATA[{{buyerPassword}}]]></password>\n        </login>\n    </soap:Body>\n</soap:Envelope>"
								},
								"url": {
									"raw": "{{orgLoginUrl}}/services/Soap/u/{{apiVersion}}",
									"host": [
										"{{orgLoginUrl}}"
									],
									"path": [
										"services",
										"Soap",
										"u",
										"{{apiVersion}}"
									]
								},
								"description": "Authenticate the shopper through the variables _buyerUsername_ and _buyerPassword_. Generated session ID is saved in _accessToken for use in the other calls in the collection."
							},
							"response": []
						},
						{
							"name": "5. Search for Products",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Tests...`);",
											"console.warn(`Code: ${pm.response.code} | Status: ${pm.response.status} | Response time: ${pm.response.responseTime} ms`);",
											"const expectedResponseCodes = [201];",
											"pm.expect(pm.response.code).to.be.oneOf(expectedResponseCodes, \"Response code not in expected range\");",
											"",
											"pm.test('Response is valid and has a JSON body', () => {",
											"    pm.response.to.be.success;",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test('Validate the response and save the product id to a collection variable', () => {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.productsPage).to.exist;",
											"    pm.expect(jsonData.productsPage).to.be.an('object');",
											"    pm.expect(jsonData.productsPage.products).to.exist;",
											"    pm.expect(jsonData.productsPage.products).to.be.an('array');",
											"    pm.expect(jsonData.productsPage.products[0]).to.exist;",
											"    pm.expect(jsonData.productsPage.products[0]).to.be.an('object');",
											"    pm.expect(jsonData.productsPage.products[0]).to.exist;",
											"    pm.expect(jsonData.productsPage.products[0].id).to.be.an('string');",
											"    pm.collectionVariables.set('_productId', jsonData.productsPage.products[0].id);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
											"\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											"\r",
											"['orgHostMySalesforceFormat','apiVersion', 'productSearchTerm'].forEach(esiev => {\r",
											"    if(!pm.environment.has(esiev)) {\r",
											"        const msg = 'Expected Postman environment variable not found: ' + esiev;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
											"});\r",
											"\r",
											"['_webStoreId', '_token', '_orgId'].forEach(esicv => {\r",
											"    if(!pm.collectionVariables.has(esicv)) {\r",
											"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableUrlEncoding": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"searchTerm\": \"{{productSearchTerm}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{orgHostMySalesforceFormat}}/services/data/v{{apiVersion}}/commerce/webstores/{{_webStoreId}}/search/product-search",
									"host": [
										"{{orgHostMySalesforceFormat}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"commerce",
										"webstores",
										"{{_webStoreId}}",
										"search",
										"product-search"
									]
								},
								"description": "Uses the variable _productSearchTerm_ to search for products in the webstore. Sets the first returned product in the variable _productId_."
							},
							"response": []
						},
						{
							"name": "6. Get Product Detail",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Tests...`);",
											"console.warn(`Code: ${pm.response.code} | Status: ${pm.response.status} | Response time: ${pm.response.responseTime} ms`);",
											"const expectedResponseCodes = [200];",
											"pm.expect(pm.response.code).to.be.oneOf(expectedResponseCodes, \"Response code not in expected range\");",
											"",
											"pm.test('Response is valid and has a JSON body', () => {",
											"    pm.response.to.be.success;",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test('Validate the response', () => {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.defaultImage).to.exist;",
											"    pm.expect(jsonData.defaultImage).to.be.an('object').with.property('id').to.be.an('string');",
											"",
											"    pm.expect(jsonData.fields).to.exist;",
											"    pm.expect(jsonData.fields).to.be.an('object').with.property('Name').to.be.an('string');",
											"    pm.expect(jsonData.fields).to.be.an('object').with.property('Description').to.be.an('string');",
											"    pm.expect(jsonData.fields).to.be.an('object').with.property('LastModifiedDate').to.match(/\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}Z/);",
											"    ",
											"    pm.expect(jsonData.mediaGroups).to.exist;",
											"    pm.expect(jsonData.mediaGroups).to.be.an('array');",
											"    pm.expect(jsonData.mediaGroups[0]).to.be.an('object').with.property('id').to.be.an('string');",
											"    pm.expect(jsonData.mediaGroups[0].mediaItems[0]).to.be.an('object').with.property('url').to.be.an('string');",
											"    pm.expect(jsonData.mediaGroups[0].mediaItems[0]).to.be.an('object').with.property('mediaType').to.be.an('string');",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
											"\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											"\r",
											"['orgHostMySalesforceFormat','apiVersion'].forEach(esiev => {\r",
											"    if(!pm.environment.has(esiev)) {\r",
											"        const msg = 'Expected Postman environment variable not found: ' + esiev;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
											"});\r",
											"\r",
											"['_webStoreId', '_productId', '_token'].forEach(esicv => {\r",
											"    if(!pm.collectionVariables.has(esicv)) {\r",
											"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{orgHostMySalesforceFormat}}/services/data/v{{apiVersion}}/commerce/webstores/{{_webStoreId}}/products/{{_productId}}",
									"host": [
										"{{orgHostMySalesforceFormat}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"commerce",
										"webstores",
										"{{_webStoreId}}",
										"products",
										"{{_productId}}"
									],
									"query": [
										{
											"key": "effectiveAccountId",
											"value": "<string>",
											"disabled": true
										},
										{
											"key": "excludeAttributeSetInfo",
											"value": "<boolean>",
											"disabled": true
										},
										{
											"key": "excludeEntitlementDetails",
											"value": "<boolean>",
											"disabled": true
										},
										{
											"key": "excludeFields",
											"value": "<boolean>",
											"disabled": true
										},
										{
											"key": "excludeMedia",
											"value": "<boolean>",
											"disabled": true
										},
										{
											"key": "excludePrimaryProductCategory",
											"value": "<boolean>",
											"disabled": true
										},
										{
											"key": "excludeProductSellingModels",
											"value": "<boolean>",
											"disabled": true
										},
										{
											"key": "excludeQuantityRule",
											"value": "<boolean>",
											"disabled": true
										},
										{
											"key": "excludeVariationInfo",
											"value": "<boolean>",
											"disabled": true
										},
										{
											"key": "fields",
											"value": "[]",
											"disabled": true
										},
										{
											"key": "mediaGroups",
											"value": "[]",
											"disabled": true
										}
									]
								},
								"description": "Fetch standard field data, custom field data, and enrichment data for a single Product, identified by the variable _productId_ that was set by the search products request."
							},
							"response": []
						},
						{
							"name": "7. Get Active Cart",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
											"\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											"\r",
											"pm.collectionVariables.set('_cartStateOrId', 'active');\r",
											"\r",
											"const expectedStringsInEnvironmentVariables = ['orgHostMySalesforceFormat','apiVersion'];\r",
											"expectedStringsInEnvironmentVariables.forEach(esiev => {\r",
											"    if(!pm.environment.has(esiev)) {\r",
											"        const msg = 'Expected Postman environment variable not found: ' + esiev;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
											"});\r",
											"\r",
											"const expectedStringsInCollectionVariables = ['_webStoreId', '_productId', '_token', '_cartStateOrId'];\r",
											"expectedStringsInCollectionVariables.forEach(esicv => {\r",
											"    if(!pm.collectionVariables.has(esicv)) {\r",
											"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Tests...`);\r",
											"console.warn(`Code: ${pm.response.code} | Status: ${pm.response.status} | Response time: ${pm.response.responseTime} ms`);\r",
											"const expectedResponseCodes = [200];\r",
											"pm.expect(pm.response.code).to.be.oneOf(expectedResponseCodes, \"Response code not in expected range\");\r",
											"\r",
											"pm.test('Response is valid and has a JSON body', () => {\r",
											"    pm.response.to.be.success;\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test('Validate the response contains a cart Id and set the collection variables', () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.cartId).to.exist;\r",
											"    pm.expect(jsonData.cartId).to.be.an('string');\r",
											"    pm.collectionVariables.set('_cartStateOrId', jsonData.cartId);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{orgHostMySalesforceFormat}}/services/data/v{{apiVersion}}/commerce/webstores/{{_webStoreId}}/carts/{{_cartStateOrId}}",
									"host": [
										"{{orgHostMySalesforceFormat}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"commerce",
										"webstores",
										"{{_webStoreId}}",
										"carts",
										"{{_cartStateOrId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "8. Delete Cart (demonstration purposes) - Draft",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
											"\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											"\r",
											"const expectedStringsInEnvironmentVariables = ['orgHostMySalesforceFormat','apiVersion'];\r",
											"expectedStringsInEnvironmentVariables.forEach(esiev => {\r",
											"    if(!pm.environment.has(esiev)) {\r",
											"        const msg = 'Expected Postman environment variable not found: ' + esiev;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
											"});\r",
											"\r",
											"//const expectedStringsInCollectionVariables = ['_webStoreId', '_productId', '_token', '_cartId'];\r",
											"const expectedStringsInCollectionVariables = ['_webStoreId', '_productId', '_token','_cartStateOrId'];\r",
											"expectedStringsInCollectionVariables.forEach(esicv => {\r",
											"    if(!pm.collectionVariables.has(esicv)) {\r",
											"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Tests...`);\r",
											"console.warn(`Code: ${pm.response.code} | Status: ${pm.response.status} | Response time: ${pm.response.responseTime} ms`);\r",
											"const expectedResponseCodes = [200];\r",
											"pm.expect(pm.response.code).to.be.oneOf(expectedResponseCodes, \"Response code not in expected range\");\r",
											"\r",
											"pm.test('Response is valid and has a JSON body', () => {\r",
											"    pm.response.to.be.success;\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.collectionVariables.set('_cartId', undefined);\r",
											"\r",
											"/*\r",
											"pm.test('Validate the response', () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.defaultImage).to.exist;\r",
											"    pm.expect(jsonData.defaultImage).to.be.an('object').with.property('id').to.be.an('string');\r",
											"\r",
											"    pm.expect(jsonData.fields).to.exist;\r",
											"    pm.expect(jsonData.fields).to.be.an('object').with.property('Name').to.be.an('string');\r",
											"    pm.expect(jsonData.fields).to.be.an('object').with.property('Description').to.be.an('string');\r",
											"    pm.expect(jsonData.fields).to.be.an('object').with.property('LastModifiedDate').to.match(/\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}Z/);\r",
											"    \r",
											"    pm.expect(jsonData.mediaGroups).to.exist;\r",
											"    pm.expect(jsonData.mediaGroups).to.be.an('array');\r",
											"    pm.expect(jsonData.mediaGroups[0]).to.be.an('object').with.property('id').to.be.an('string');\r",
											"    pm.expect(jsonData.mediaGroups[0].mediaItems[0]).to.be.an('object').with.property('url').to.be.an('string');\r",
											"    pm.expect(jsonData.mediaGroups[0].mediaItems[0]).to.be.an('object').with.property('mediaType').to.be.an('string');\r",
											"});\r",
											"*/\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{orgHostMySalesforceFormat}}/services/data/v{{apiVersion}}/commerce/webstores/{{_webStoreId}}/carts/{{_cartStateOrId}}",
									"host": [
										"{{orgHostMySalesforceFormat}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"commerce",
										"webstores",
										"{{_webStoreId}}",
										"carts",
										"{{_cartStateOrId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "9. Create Cart (demonstration purposes) - Draft",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
											"\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											"\r",
											"const expectedStringsInEnvironmentVariables = ['orgHostMySalesforceFormat','apiVersion'];\r",
											"expectedStringsInEnvironmentVariables.forEach(esiev => {\r",
											"    if(!pm.environment.has(esiev)) {\r",
											"        const msg = 'Expected Postman environment variable not found: ' + esiev;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
											"});\r",
											"\r",
											"const expectedStringsInCollectionVariables = ['_webStoreId', '_token'];\r",
											"expectedStringsInCollectionVariables.forEach(esicv => {\r",
											"    if(!pm.collectionVariables.has(esicv)) {\r",
											"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Tests...`);\r",
											"console.warn(`Code: ${pm.response.code} | Status: ${pm.response.status} | Response time: ${pm.response.responseTime} ms`);\r",
											"const expectedResponseCodes = [201];\r",
											"pm.expect(pm.response.code).to.be.oneOf(expectedResponseCodes, \"Response code not in expected range\");\r",
											"\r",
											"pm.test('Response is valid and has a JSON body', () => {\r",
											"    pm.response.to.be.success;\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test('Validate the response contains a cart Id and set the collection variables', () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const cartId = jsonData.cartId;\r",
											"    console.log('CART ID: ' + cartId);\r",
											"    pm.expect(jsonData.cartId).to.exist;\r",
											"    pm.expect(jsonData.cartId).to.be.an('string');\r",
											"    pm.collectionVariables.set('_cartStateOrId', jsonData.cartId);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"name\":\"Postman Cart\",\r\n   \"type\":\"Cart\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{orgHostMySalesforceFormat}}/services/data/v{{apiVersion}}/commerce/webstores/{{_webStoreId}}/carts",
									"host": [
										"{{orgHostMySalesforceFormat}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"commerce",
										"webstores",
										"{{_webStoreId}}",
										"carts"
									]
								}
							},
							"response": []
						},
						{
							"name": "10. Add single Product to Cart",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
											"\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											"\r",
											"const expectedStringsInEnvironmentVariables = ['orgHostMySalesforceFormat','apiVersion'];\r",
											"expectedStringsInEnvironmentVariables.forEach(esiev => {\r",
											"    if(!pm.environment.has(esiev)) {\r",
											"        const msg = 'Expected Postman environment variable not found: ' + esiev;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
											"});\r",
											"\r",
											"const expectedStringsInCollectionVariables = ['_webStoreId', '_token', '_cartStateOrId'];\r",
											"expectedStringsInCollectionVariables.forEach(esicv => {\r",
											"    if(!pm.collectionVariables.has(esicv)) {\r",
											"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Tests...`);\r",
											"console.warn(`Code: ${pm.response.code} | Status: ${pm.response.status} | Response time: ${pm.response.responseTime} ms`);\r",
											"const expectedResponseCodes = [200];\r",
											"pm.expect(pm.response.code).to.be.oneOf(expectedResponseCodes, \"Response code not in expected range\");\r",
											"\r",
											"pm.test('Response is valid and has a JSON body', () => {\r",
											"    pm.response.to.be.success;\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test('Validate the response', () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.defaultImage).to.exist;\r",
											"    pm.expect(jsonData.defaultImage).to.be.an('object').with.property('id').to.be.an('string');\r",
											"\r",
											"    pm.expect(jsonData.fields).to.exist;\r",
											"    pm.expect(jsonData.fields).to.be.an('object').with.property('Name').to.be.an('string');\r",
											"    pm.expect(jsonData.fields).to.be.an('object').with.property('Description').to.be.an('string');\r",
											"    pm.expect(jsonData.fields).to.be.an('object').with.property('LastModifiedDate').to.match(/\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}Z/);\r",
											"    \r",
											"    pm.expect(jsonData.mediaGroups).to.exist;\r",
											"    pm.expect(jsonData.mediaGroups).to.be.an('array');\r",
											"    pm.expect(jsonData.mediaGroups[0]).to.be.an('object').with.property('id').to.be.an('string');\r",
											"    pm.expect(jsonData.mediaGroups[0].mediaItems[0]).to.be.an('object').with.property('url').to.be.an('string');\r",
											"    pm.expect(jsonData.mediaGroups[0].mediaItems[0]).to.be.an('object').with.property('mediaType').to.be.an('string');\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"productId\": \"{{_productId}}\",\r\n   \"quantity\":\"1\",\r\n   \"type\":\"Product\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{orgHostMySalesforceFormat}}/services/data/v{{apiVersion}}/commerce/webstores/{{_webstoreId}}/carts/{{_cartStateOrId}}/cart-items",
									"host": [
										"{{orgHostMySalesforceFormat}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"commerce",
										"webstores",
										"{{_webstoreId}}",
										"carts",
										"{{_cartStateOrId}}",
										"cart-items"
									]
								}
							},
							"response": []
						},
						{
							"name": "11. Start Checkout",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Tests...`);",
											"console.warn(`Code: ${pm.response.code} | Status: ${pm.response.status} | Response time: ${pm.response.responseTime} ms`);",
											"const expectedResponseCodes = [202];",
											"pm.expect(pm.response.code).to.be.oneOf(expectedResponseCodes, \"Response code not in expected range\");",
											"",
											"let checkoutId = pm.response.json().checkoutId;",
											"const context = pm.environment.name ? pm.environment : pm.collectionVariables;",
											"context.set('_checkoutId', checkoutId);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Pre-request Script...`);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"cartId\":\"{{_cartId}}\"}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{orgUrl}}/services/data/v{{apiVersion}}/commerce/webstores/{{webstoreId}}/checkouts/",
									"host": [
										"{{orgUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"commerce",
										"webstores",
										"{{webstoreId}}",
										"checkouts",
										""
									]
								},
								"description": "Starts a checkout for the cart identified by the variable __cartId_. Sets the checkout identifier in the variable __checkoutId_."
							},
							"response": []
						},
						{
							"name": "12. Get Shipping Addresses",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Tests...`);",
											"console.warn(`Code: ${pm.response.code} | Status: ${pm.response.status} | Response time: ${pm.response.responseTime} ms`);",
											"const expectedResponseCodes = [200];",
											"pm.expect(pm.response.code).to.be.oneOf(expectedResponseCodes, \"Response code not in expected range\");",
											"",
											"const responseJson = pm.response.json();",
											"const addressList = responseJson.items;",
											"const context = pm.environment.name ? pm.environment : pm.collectionVariables;",
											"context.set('_addressId', addressList[0].addressId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Pre-request Script...`);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{orgUrl}}/services/data/v{{apiVersion}}/commerce/webstores/{{webstoreId}}/accounts/{{buyerAccountId}}/addresses?addressType=Shipping&sortOrder=CreatedDateDesc&excludeUnsupportedCountries=true",
									"host": [
										"{{orgUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"commerce",
										"webstores",
										"{{webstoreId}}",
										"accounts",
										"{{buyerAccountId}}",
										"addresses"
									],
									"query": [
										{
											"key": "addressType",
											"value": "Shipping"
										},
										{
											"key": "sortOrder",
											"value": "CreatedDateDesc"
										},
										{
											"key": "excludeUnsupportedCountries",
											"value": "true"
										}
									]
								},
								"description": "Returns all of the shipping addresses associated with the buyer account identified through the _buyerAccountId_ variable. Sets the __addressId_ variable to the last created shipping address for that buyer account."
							},
							"response": []
						},
						{
							"name": "13. Add Shipping Address (demonstration purposes)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Tests...`);",
											"console.warn(`Code: ${pm.response.code} | Status: ${pm.response.status} | Response time: ${pm.response.responseTime} ms`);",
											"const expectedResponseCodes = [201];",
											"pm.expect(pm.response.code).to.be.oneOf(expectedResponseCodes, \"Response code not in expected range\");",
											"",
											"const responseJson = pm.response.json();",
											"const context = pm.environment.name ? pm.environment : pm.collectionVariables;",
											"context.set('_addressId', responseJson.addressId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Pre-request Script...`);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"city\":\"Boston\",\n  \"country\":\"US\",\n  \"isDefault\":false,\n  \"name\":\"Home Address\",\n  \"postalCode\":\"01234\",\n  \"region\":\"MA\",\n  \"street\":\"1 Milk Street\",\n  \"addressType\": \"Shipping\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{orgUrl}}/services/data/v{{apiVersion}}/commerce/webstores/{{webstoreId}}/accounts/{{buyerAccountId}}/addresses",
									"host": [
										"{{orgUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"commerce",
										"webstores",
										"{{webstoreId}}",
										"accounts",
										"{{buyerAccountId}}",
										"addresses"
									]
								},
								"description": "Adds a shipping address associated with the buyer account (variable _buyerAccountId_) and stores the address identifier into the variable __addressId_."
							},
							"response": []
						},
						{
							"name": "14. Update Shipping Address (demonstration purposes)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Tests...`);",
											"console.warn(`Code: ${pm.response.code} | Status: ${pm.response.status} | Response time: ${pm.response.responseTime} ms`);",
											"const expectedResponseCodes = [201];",
											"pm.expect(pm.response.code).to.be.oneOf(expectedResponseCodes, \"Response code not in expected range\");",
											"",
											"const responseJson = pm.response.json();",
											"const context = pm.environment.name ? pm.environment : pm.collectionVariables;",
											"context.set('_addressId', responseJson.addressId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Pre-request Script...`);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"city\":\"Boston\",\n  \"country\":\"US\",\n  \"isDefault\":false,\n  \"name\":\"Home Address\",\n  \"postalCode\":\"01234\",\n  \"region\":\"MA\",\n  \"street\":\"123 Main Street\",\n  \"addressType\": \"Shipping\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{orgUrl}}/services/data/v{{apiVersion}}/commerce/webstores/{{webstoreId}}/accounts/{{buyerAccountId}}/addresses/:addressId",
									"host": [
										"{{orgUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"commerce",
										"webstores",
										"{{webstoreId}}",
										"accounts",
										"{{buyerAccountId}}",
										"addresses",
										":addressId"
									],
									"variable": [
										{
											"key": "addressId",
											"value": "{{_addressId}}"
										}
									]
								},
								"description": "Adds a shipping address associated with the buyer account (variable _buyerAccountId_) and stores the address identifier into the variable __addressId_."
							},
							"response": []
						},
						{
							"name": "15. Apply Shipping Address to Checkout",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Tests...`);",
											"console.warn(`Code: ${pm.response.code} | Status: ${pm.response.status} | Response time: ${pm.response.responseTime} ms`);",
											"const expectedResponseCodes = [202];",
											"pm.expect(pm.response.code).to.be.oneOf(expectedResponseCodes, \"Response code not in expected range\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Pre-request Script...`);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"deliveryAddress\": {\n    \"id\": \"{{_addressId}}\"\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{orgUrl}}/services/data/v{{apiVersion}}/commerce/webstores/{{webstoreId}}/checkouts/:checkoutId",
									"host": [
										"{{orgUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"commerce",
										"webstores",
										"{{webstoreId}}",
										"checkouts",
										":checkoutId"
									],
									"variable": [
										{
											"key": "checkoutId",
											"value": "{{_checkoutId}}"
										}
									]
								},
								"description": "Sets the ship-to address associated with the checkout (variable _checkoutId) to the_ address found/created in a previous request (variable __addressId)_."
							},
							"response": []
						},
						{
							"name": "16. Get Checkout",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Tests...`);",
											"console.warn(`Code: ${pm.response.code} | Status: ${pm.response.status} | Response time: ${pm.response.responseTime} ms`);",
											"const expectedResponseCodes = [200];",
											"pm.expect(pm.response.code).to.be.oneOf(expectedResponseCodes, \"Response code not in expected range\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Pre-request Script...`);"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{orgUrl}}/services/data/v{{apiVersion}}/commerce/webstores/{{webstoreId}}/checkouts/:checkoutId",
									"host": [
										"{{orgUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"commerce",
										"webstores",
										"{{webstoreId}}",
										"checkouts",
										":checkoutId"
									],
									"variable": [
										{
											"key": "checkoutId",
											"value": "{{_checkoutId}}"
										}
									]
								},
								"description": "Retrieves the checkout (variable __checkoutId_)."
							},
							"response": []
						},
						{
							"name": "17. Create Payment",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Tests...`);",
											"console.warn(`Code: ${pm.response.code} | Status: ${pm.response.status} | Response time: ${pm.response.responseTime} ms`);",
											"const expectedResponseCodes = [201];",
											"pm.expect(pm.response.code).to.be.oneOf(expectedResponseCodes, \"Response code not in expected range\");",
											"",
											"const responseJson = pm.response.json();",
											"let paymentToken = responseJson.token;",
											"const context = pm.environment.name ? pm.environment : pm.collectionVariables;",
											"context.set('_paymentToken', paymentToken);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Pre-request Script...`);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"billingAddress\":{\n      \"name\":\"John Doe\",\n      \"street\":\"123 Acme Drive\",\n      \"city\":\"Los Angeles\",\n      \"country\":\"United States\",\n      \"postalCode\":\"90001\"\n   },\n  \"cardPaymentMethod\": {\n    \"cardHolderName\": \"John Doe Guest\",\n    \"cardNumber\": \"4242424242424242\",\n    \"expiryMonth\": 12,\n    \"expiryYear\": 2029,\n    \"cvv\": 111,\n    \"cardType\": \"Visa\"\n    }\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{orgUrl}}/services/data/v{{apiVersion}}/commerce/webstores/{{webstoreId}}/payments/token",
									"host": [
										"{{orgUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"commerce",
										"webstores",
										"{{webstoreId}}",
										"payments",
										"token"
									]
								},
								"description": "Perform a server-side payment and store the created payment token in the variable __paymentToken_.\n\nNote: The sample payment gateway included in the store creation simply returns a dummy token."
							},
							"response": []
						},
						{
							"name": "18. Apply Payment to Checkout",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Tests...`);",
											"console.warn(`Code: ${pm.response.code} | Status: ${pm.response.status} | Response time: ${pm.response.responseTime} ms`);",
											"const expectedResponseCodes = [201];",
											"pm.expect(pm.response.code).to.be.oneOf(expectedResponseCodes, \"Response code not in expected range\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Pre-request Script...`);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"paymentToken\":\"{{_paymentToken}}\",\n   \"requestType\":\"Auth\",\n   \"billingAddress\":{\n      \"name\":\"John Doe\",\n      \"street\":\"123 Acme Drive\",\n      \"city\":\"Los Angeles\",\n      \"region\":\"California\",\n      \"country\":\"United States\",\n      \"postalCode\":\"90001\"\n   }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{orgUrl}}/services/data/v{{apiVersion}}/commerce/webstores/{{webstoreId}}/checkouts/:checkoutId/payments",
									"host": [
										"{{orgUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"commerce",
										"webstores",
										"{{webstoreId}}",
										"checkouts",
										":checkoutId",
										"payments"
									],
									"variable": [
										{
											"key": "checkoutId",
											"value": "{{_checkoutId}}"
										}
									]
								},
								"description": "Applies the payment token (variable __paymentToken_) to the checkout (variable __checkoutId_). Also sets the billing address.\n\nNote: No checking will be done for the validity of the billing address or token. This uses the sample SalesforceAdapter provided in the sample store."
							},
							"response": []
						},
						{
							"name": "19. Create Order",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Tests...`);",
											"console.warn(`Code: ${pm.response.code} | Status: ${pm.response.status} | Response time: ${pm.response.responseTime} ms`);",
											"const expectedResponseCodes = [201];",
											"pm.expect(pm.response.code).to.be.oneOf(expectedResponseCodes, \"Response code not in expected range\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Pre-request Script...`);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{orgUrl}}/services/data/v{{apiVersion}}/commerce/webstores/{{webstoreId}}/checkouts/:_checkoutId/orders",
									"host": [
										"{{orgUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"commerce",
										"webstores",
										"{{webstoreId}}",
										"checkouts",
										":_checkoutId",
										"orders"
									],
									"variable": [
										{
											"key": "_checkoutId",
											"value": "{{_checkoutId}}"
										}
									]
								},
								"description": "Checkout Payments Action"
							},
							"response": []
						},
						{
							"name": "20. Get Order Summaries",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Tests...`);",
											"console.warn(`Code: ${pm.response.code} | Status: ${pm.response.status} | Response time: ${pm.response.responseTime} ms`);",
											"const expectedResponseCodes = [200];",
											"pm.expect(pm.response.code).to.be.oneOf(expectedResponseCodes, \"Response code not in expected range\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Pre-request Script...`);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{orgUrl}}/services/data/v{{apiVersion}}/commerce/webstores/{{webstoreId}}/order-summaries",
									"host": [
										"{{orgUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"commerce",
										"webstores",
										"{{webstoreId}}",
										"order-summaries"
									]
								},
								"description": "Get all of the order summaries (i.e., placed orders) from the webstore."
							},
							"response": []
						}
					]
				}
			],
			"description": "Interactions with the [Commerce Webstore Cart](https://developer.salesforce.com/docs/atlas.en-us.chatterapi.meta/chatterapi/connect_resources_commerce_webstore_cart.htm) and [Commerce Webstore Cart Items ](https://developer.salesforce.com/docs/atlas.en-us.chatterapi.meta/chatterapi/connect_resources_commerce_webstore_cart_items.htm) and [Commerce Webstore Checkout](https://developer.salesforce.com/docs/atlas.en-us.chatterapi.meta/chatterapi/connect_resources_commerce_webstore_checkouts.htm)\n\n`/commerce/webstores/webstoreId/carts/cartStateOrId`\n\n`/commerce/webstores/webstoreId/carts/cartStateOrId/cart-items`\n\n`/commerce/webstores/webstoreId/checkouts/activeOrCheckoutId`"
		},
		{
			"name": "Order Summaries",
			"item": [
				{
					"name": "Get Order Summaries by Date Range (Buyer Login)",
					"item": [
						{
							"name": "1. Clear Collection Variables",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
											"\r",
											"// Check for environment selection\r",
											"if(pm.environment.name === undefined) {\r",
											"    const msg = 'No Postman environment selected or set.';\r",
											"    pm.expect.fail(msg);\r",
											"}\r",
											"\r",
											"// Clean up the variables from the collection set throughout the various calls\r",
											"pm.collectionVariables.clear();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Tests...`);\r",
											"\r",
											"pm.test('Make sure collection variables are clean', () => {\r",
											"    pm.expect(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value)).to.be.an('array').empty;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "postman-echo.com/get",
									"host": [
										"postman-echo",
										"com"
									],
									"path": [
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "2. Log in as System Administrator (SOAP)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Tests...`);\r",
											"console.warn(`Code: ${pm.response.code} | Status: ${pm.response.status} | Response time: ${pm.response.responseTime} ms`);\r",
											"\r",
											"pm.expect(pm.response.text().includes('INVALID_LOGIN'), 'INVALID_LOGIN found in response - Suggested fix: Check username, password and tokens in the Postman Environment').to.be.false;\r",
											"\r",
											"pm.expect(pm.response.text().includes('API_CURRENTLY_DISABLED'), 'API_CURRENTLY_DISABLED found in response - Suggested fix: Create a Permission Set like \\'Api Enabled\\' with the API Enabled checkbox active in System Permissions and apply it to the user').to.be.false;\r",
											"\r",
											"const expectedResponseCodes = [200];\r",
											"pm.expect(pm.response.code).to.be.oneOf(expectedResponseCodes, \"Response code not in expected range\");\r",
											"\r",
											"pm.test('Validate the access token is found in the body and save it to the variables', () => {\r",
											"    const result = xml2Json(pm.response.text())['soapenv:Envelope']['soapenv:Body'].loginResponse.result;\r",
											"    const url = result.serverUrl.split('/');\r",
											"\r",
											"    pm.expect(result.sessionId).to.exist;\r",
											"    pm.expect(result.sessionId).to.be.a.string;\r",
											"\r",
											"    pm.collectionVariables.set('_token', result.sessionId);\r",
											"    pm.collectionVariables.set('_instanceUrl', url[0] + '//' + url[2]);\r",
											"    pm.collectionVariables.set('_userId', result.userId);\r",
											"    pm.collectionVariables.set('_orgId', result.userInfo.organizationId);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const expectedStringsInEnvironmentVariables = ['orgLoginUrl','apiVersion','orgAdminUsername','orgAdminPassword','orgAdminSecurityToken'];\r",
											"const expectedStringsInCollectionVariables = [];\r",
											"\r",
											"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											"\r",
											"// Expected strings in environment variables\r",
											"for(const esiev of expectedStringsInEnvironmentVariables)\r",
											"{\r",
											"    if(!pm.environment.has(esiev))\r",
											"    {\r",
											"        const msg = `Expected Postman environment variable not found: '${esiev} in environment: '${pm.environment.name}'`;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"\r",
											"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
											"}\r",
											"\r",
											"// Expected strings in collection variables\r",
											"for(esicv of expectedStringsInCollectionVariables)\r",
											"{\r",
											"    if(!pm.collectionVariables.has(esicv))\r",
											"    {\r",
											"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    \r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "text/xml; charset=UTF-8",
										"type": "text"
									},
									{
										"key": "SOAPAction",
										"value": "login",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "text/xml",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\r\n<env:Envelope xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"\r\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n    xmlns:n1=\"urn:partner.soap.sforce.com\"\r\n    xmlns:env=\"http://schemas.xmlsoap.org/soap/envelope/\">\r\n    <env:Body>\r\n        <n1:login>\r\n            <n1:username><![CDATA[{{orgAdminUsername}}]]></n1:username>\r\n            <n1:password><![CDATA[{{orgAdminPassword}}]]></n1:password>\r\n        </n1:login>\r\n    </env:Body>\r\n</env:Envelope>"
								},
								"url": {
									"raw": "{{orgLoginUrl}}/services/Soap/u/{{apiVersion}}",
									"host": [
										"{{orgLoginUrl}}"
									],
									"path": [
										"services",
										"Soap",
										"u",
										"{{apiVersion}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "3. Set WebStore Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Tests...`);\r",
											"console.warn(`Code: ${pm.response.code} | Status: ${pm.response.status} | Response time: ${pm.response.responseTime} ms`);\r",
											"const expectedResponseCodes = [200];\r",
											"pm.expect(pm.response.code).to.be.oneOf(expectedResponseCodes, \"Response code not in expected range\");\r",
											"\r",
											"pm.test('Response is valid and has a JSON body', () => {\r",
											"     pm.response.to.be.success;\r",
											"     pm.response.to.be.withBody;\r",
											"     pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test('Validate the response and saves the WebStore Id in the collection variables', () => {\r",
											"    const data = pm.response.json();\r",
											"    pm.expect(data.records).to.exist;\r",
											"    pm.expect(data.records).to.be.an('array');\r",
											"    pm.expect(data.records.length).to.eql(1);\r",
											"    const webStore = data.records[0];\r",
											"    pm.expect(webStore.Id).to.exist;\r",
											"    pm.expect(webStore.Id).to.be.an('string');\r",
											"    pm.collectionVariables.set('_webStoreId', webStore.Id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											"\r",
											"// Expected strings in environment variables\r",
											"['orgLoginUrl','apiVersion', 'webStoreName'].forEach(esiev => {\r",
											"    if(!pm.environment.has(esiev)) {\r",
											"       const msg = `Expected Postman environment variable not found: '${esiev} in environment: '${pm.environment.name}'`;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
											"});\r",
											"\r",
											"// Expected strings in collection variables\r",
											"['_instanceUrl'].forEach(esicv => {\r",
											"    if(pm.collectionVariables.get(esicv) === undefined) {\r",
											"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{_instanceUrl}}/services/data/v{{apiVersion}}/query/?q=SELECT+Id,+Name+FROM+WebStore+WHERE+Name+=+'{{webStoreName}}'",
									"host": [
										"{{_instanceUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"query",
										""
									],
									"query": [
										{
											"key": "q",
											"value": "SELECT+Id,+Name+FROM+WebStore+WHERE+Name+=+'{{webStoreName}}'"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "4. Set Effective Account Id Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Tests...`);\r",
											"console.warn(`Code: ${pm.response.code} | Status: ${pm.response.status} | Response time: ${pm.response.responseTime} ms`);\r",
											"const expectedResponseCodes = [200];\r",
											"pm.expect(pm.response.code).to.be.oneOf(expectedResponseCodes, \"Response code not in expected range\");\r",
											"\r",
											"pm.test('Response is valid and has a JSON body', () => {\r",
											"     pm.response.to.be.success;\r",
											"     pm.response.to.be.withBody;\r",
											"     pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test('Validate the response and saves the WebStore Id in the collection variables', () => {\r",
											"    const data = pm.response.json();\r",
											"    pm.expect(data.records).to.exist;\r",
											"    pm.expect(data.records).to.be.an('array');\r",
											"    pm.expect(data.records.length).to.eql(1);\r",
											"    const account = data.records[0];\r",
											"    pm.expect(account.Id).to.exist;\r",
											"    pm.expect(account.Id).to.be.an('string');\r",
											"    pm.collectionVariables.set('_effectiveAccountId', account.Id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											"\r",
											"// Expected strings in environment variables\r",
											"['orgLoginUrl','apiVersion', 'webStoreName', 'buyerAccountName'].forEach(esiev => {\r",
											"    if(!pm.environment.has(esiev)) {\r",
											"        const msg = 'Expected Postman environment variable not found: ' + esiev;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
											"});\r",
											"\r",
											"// Expected strings in collection variables\r",
											"['_instanceUrl'].forEach(esicv => {\r",
											"    if(!pm.collectionVariables.has(esicv)) {\r",
											"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{_instanceUrl}}/services/data/v{{apiVersion}}/query/?q=SELECT+Id,+Name+FROM+Account+WHERE+Name+=+'{{buyerAccountName}}'",
									"host": [
										"{{_instanceUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"query",
										""
									],
									"query": [
										{
											"key": "q",
											"value": "SELECT+Id,+Name+FROM+Account+WHERE+Name+=+'{{buyerAccountName}}'"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "5. Login as Buyer (SOAP)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Tests...`);",
											"console.warn(`Code: ${pm.response.code} | Status: ${pm.response.status} | Response time: ${pm.response.responseTime} ms`);",
											"",
											"pm.expect(pm.response.text().includes('INVALID_LOGIN'), 'INVALID_LOGIN found in response - Suggested fix: Check username, password and tokens in the Postman Environment').to.be.false;",
											"",
											"pm.expect(pm.response.text().includes('API_CURRENTLY_DISABLED'), 'API_CURRENTLY_DISABLED found in response - Suggested fix: Create a Permission Set like \\'Api Enabled\\' with the API Enabled checkbox active in System Permissions and apply it to the user').to.be.false;",
											"",
											"const expectedResponseCodes = [200];",
											"pm.expect(pm.response.code).to.be.oneOf(expectedResponseCodes, \"Response code not in expected range\");",
											"",
											"pm.test('Validate the access token is found in the body and save it to a collection variable', () => {",
											"    const result = xml2Json(pm.response.text())['soapenv:Envelope']['soapenv:Body'].loginResponse.result;",
											"    const url = result.serverUrl.split('/');",
											"",
											"    pm.expect(result.sessionId).to.exist;",
											"    pm.expect(result.sessionId).to.be.a.string;",
											"",
											"    pm.collectionVariables.set('_token', result.sessionId);",
											"    pm.collectionVariables.set('_instanceUrl', url[0] + '//' + url[2]);",
											"    pm.collectionVariables.set('_userId', result.userId);",
											"    pm.collectionVariables.set('_orgId', result.userInfo.organizationId);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											"\r",
											"// Expected strings in environment variables\r",
											"['orgLoginUrl','apiVersion'].forEach(esiev => {\r",
											"    if(!pm.environment.has(esiev)) {\r",
											"        const msg = `Expected Postman environment variable not found: '${esiev} in environment: '${pm.environment.name}'`;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
											"});\r",
											"\r",
											"// Expected strings in collection variables\r",
											"['_orgId', '_webStoreId'].forEach(esicv => {\r",
											"    if(pm.collectionVariables.get(esicv) === undefined) {\r",
											"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "text/xml; charset=UTF-8"
									},
									{
										"key": "SOAPAction",
										"value": "login"
									},
									{
										"key": "Accept",
										"value": "text/xml"
									},
									{
										"key": "Cookie",
										"value": "BrowserId=POhd6XTZEe2v6_8M7WG26g"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap:Envelope xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\" \nxmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://\nwww.w3.org/2001/XMLSchema\">\n    <soap:Header>\n        <LoginScopeHeader xmlns=\"urn:partner.soap.sforce.com\">\n            <organizationId>{{_orgId}}</organizationId>\n        </LoginScopeHeader>\n    </soap:Header>\n    <soap:Body>\n        <login xmlns=\"urn:partner.soap.sforce.com\">\n            <username><![CDATA[{{buyerUsername}}]]></username>\n            <password><![CDATA[{{buyerPassword}}]]></password>\n        </login>\n    </soap:Body>\n</soap:Envelope>"
								},
								"url": {
									"raw": "{{orgLoginUrl}}/services/Soap/u/{{apiVersion}}",
									"host": [
										"{{orgLoginUrl}}"
									],
									"path": [
										"services",
										"Soap",
										"u",
										"{{apiVersion}}"
									]
								},
								"description": "Authenticate the shopper through the variables _buyerUsername_ and _buyerPassword_. Generated session ID is saved in _accessToken for use in the other calls in the collection."
							},
							"response": []
						},
						{
							"name": "6. Get Order Summaries by Date",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Tests...`);",
											"console.warn(`Code: ${pm.response.code} | Status: ${pm.response.status} | Response time: ${pm.response.responseTime} ms`);",
											"const expectedResponseCodes = [200];",
											"pm.expect(pm.response.code).to.be.oneOf(expectedResponseCodes, \"Response code not in expected range\");",
											"",
											"pm.test('Response is valid and has a JSON body', () => {",
											"    pm.response.to.be.success;",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"});",
											"/*",
											"pm.test('Validate the response', () => {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.defaultImage).to.exist;",
											"    pm.expect(jsonData.defaultImage).to.be.an('object').with.property('id').to.be.an('string');",
											"",
											"    pm.expect(jsonData.fields).to.exist;",
											"    pm.expect(jsonData.fields).to.be.an('object').with.property('Name').to.be.an('string');",
											"    pm.expect(jsonData.fields).to.be.an('object').with.property('Description').to.be.an('string');",
											"    pm.expect(jsonData.fields).to.be.an('object').with.property('LastModifiedDate').to.match(/\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}Z/);",
											"    ",
											"    pm.expect(jsonData.mediaGroups).to.exist;",
											"    pm.expect(jsonData.mediaGroups).to.be.an('array');",
											"    pm.expect(jsonData.mediaGroups[0]).to.be.an('object').with.property('id').to.be.an('string');",
											"    pm.expect(jsonData.mediaGroups[0].mediaItems[0]).to.be.an('object').with.property('url').to.be.an('string');",
											"    pm.expect(jsonData.mediaGroups[0].mediaItems[0]).to.be.an('object').with.property('mediaType').to.be.an('string');",
											"});",
											"*/"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											"\r",
											"// Expected strings in environment variables\r",
											"['orgHostMySalesforceFormat','apiVersion'].forEach(esiev => {\r",
											"    if(!pm.environment.has(esiev)) {\r",
											"        const msg = `Expected Postman environment variable not found: '${esiev} in environment: '${pm.environment.name}'`;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
											"});\r",
											"\r",
											"// Expected strings in collection variables\r",
											"['_webStoreId', '_token', '_effectiveAccountId'].forEach(esicv => {\r",
											"    if(!pm.collectionVariables.has(esicv)) {\r",
											"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{_instanceUrl}}/services/data/v{{apiVersion}}/commerce/webstores/{{_webStoreId}}/order-summaries?fields=Id,createdDate,orderSummaryId,orderedDate,ownerId,status,GrandTotalAmount&pageSize=20&ownerScoped=false&effectiveAccountId={{_effectiveAccountId}}&earliestDate=2023-01-15T18:24:56.235-0530&latestDate=2023-12-15T18:24:56.235-0530",
									"host": [
										"{{_instanceUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"commerce",
										"webstores",
										"{{_webStoreId}}",
										"order-summaries"
									],
									"query": [
										{
											"key": "effectiveAccountId",
											"value": "<string>",
											"disabled": true
										},
										{
											"key": "excludeAttributeSetInfo",
											"value": "<boolean>",
											"disabled": true
										},
										{
											"key": "excludeEntitlementDetails",
											"value": "<boolean>",
											"disabled": true
										},
										{
											"key": "excludeFields",
											"value": "<boolean>",
											"disabled": true
										},
										{
											"key": "excludeMedia",
											"value": "<boolean>",
											"disabled": true
										},
										{
											"key": "excludePrimaryProductCategory",
											"value": "<boolean>",
											"disabled": true
										},
										{
											"key": "excludeProductSellingModels",
											"value": "<boolean>",
											"disabled": true
										},
										{
											"key": "excludeQuantityRule",
											"value": "<boolean>",
											"disabled": true
										},
										{
											"key": "excludeVariationInfo",
											"value": "<boolean>",
											"disabled": true
										},
										{
											"key": "fields",
											"value": "[]",
											"disabled": true
										},
										{
											"key": "mediaGroups",
											"value": "[]",
											"disabled": true
										},
										{
											"key": "fields",
											"value": "Id,createdDate,orderSummaryId,orderedDate,ownerId,status,GrandTotalAmount"
										},
										{
											"key": "pageSize",
											"value": "20"
										},
										{
											"key": "ownerScoped",
											"value": "false"
										},
										{
											"key": "effectiveAccountId",
											"value": "{{_effectiveAccountId}}"
										},
										{
											"key": "earliestDate",
											"value": "2023-01-15T18:24:56.235-0530"
										},
										{
											"key": "latestDate",
											"value": "2023-12-15T18:24:56.235-0530"
										}
									]
								},
								"description": "Fetch standard field data, custom field data, and enrichment data for a single Product, identified by the variable _productId_ that was set by the search products request."
							},
							"response": []
						}
					],
					"description": "Date ranged interactions with [Commerce Webstore Order Summaries ](https://developer.salesforce.com/docs/atlas.en-us.chatterapi.meta/chatterapi/connect_resources_commerce_webstore_order_summaries.htm) based on date range using the Buyer Login flow.\n\n`/commerce/webstores/webstoreId/order-summaries`",
					"auth": {
						"type": "noauth"
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Get Order Summaries by Date Range (oAuth 2.0)",
					"item": [
						{
							"name": "1. Clear Collection Variables",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
											"\r",
											"// Check for environment selection\r",
											"if(pm.environment.name === undefined) {\r",
											"    const msg = 'No Postman environment selected or set.';\r",
											"    pm.expect.fail(msg);\r",
											"}\r",
											"\r",
											"// Clean up the variables from the collection set throughout the various calls\r",
											"pm.collectionVariables.clear();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Tests...`);\r",
											"\r",
											"pm.test('Make sure collection variables are clean', () => {\r",
											"    pm.expect(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value)).to.be.an('array').empty;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "postman-echo.com/get",
									"host": [
										"postman-echo",
										"com"
									],
									"path": [
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "2. Log in as System Administrator (SOAP)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Tests...`);\r",
											"console.warn(`Code: ${pm.response.code} | Status: ${pm.response.status} | Response time: ${pm.response.responseTime} ms`);\r",
											"\r",
											"pm.expect(pm.response.text().includes('INVALID_LOGIN'), 'INVALID_LOGIN found in response - Suggested fix: Check username, password and tokens in the Postman Environment').to.be.false;\r",
											"\r",
											"pm.expect(pm.response.text().includes('API_CURRENTLY_DISABLED'), 'API_CURRENTLY_DISABLED found in response - Suggested fix: Create a Permission Set like \\'Api Enabled\\' with the API Enabled checkbox active in System Permissions and apply it to the user').to.be.false;\r",
											"\r",
											"const expectedResponseCodes = [200];\r",
											"pm.expect(pm.response.code).to.be.oneOf(expectedResponseCodes, \"Response code not in expected range\");\r",
											"\r",
											"pm.test('Validate the access token is found in the body and save it to the variables', () => {\r",
											"    const result = xml2Json(pm.response.text())['soapenv:Envelope']['soapenv:Body'].loginResponse.result;\r",
											"    const url = result.serverUrl.split('/');\r",
											"\r",
											"    pm.expect(result.sessionId).to.exist;\r",
											"    pm.expect(result.sessionId).to.be.a.string;\r",
											"\r",
											"    pm.collectionVariables.set('_token', result.sessionId);\r",
											"    pm.collectionVariables.set('_instanceUrl', url[0] + '//' + url[2]);\r",
											"    pm.collectionVariables.set('_userId', result.userId);\r",
											"    pm.collectionVariables.set('_orgId', result.userInfo.organizationId);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											"\r",
											"// Expected strings in environment variables\r",
											"['orgLoginUrl','apiVersion'].forEach(esiev => {\r",
											"    if(!pm.environment.has(esiev)) {\r",
											"        const msg = `Expected Postman environment variable not found: '${esiev} in environment: '${pm.environment.name}'`;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "text/xml; charset=UTF-8",
										"type": "text"
									},
									{
										"key": "SOAPAction",
										"value": "login",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "text/xml",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\r\n<env:Envelope xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"\r\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n    xmlns:n1=\"urn:partner.soap.sforce.com\"\r\n    xmlns:env=\"http://schemas.xmlsoap.org/soap/envelope/\">\r\n    <env:Body>\r\n        <n1:login>\r\n            <n1:username><![CDATA[{{orgAdminUsername}}]]></n1:username>\r\n            <n1:password><![CDATA[{{orgAdminPassword}}]]></n1:password>\r\n        </n1:login>\r\n    </env:Body>\r\n</env:Envelope>"
								},
								"url": {
									"raw": "{{orgLoginUrl}}/services/Soap/u/{{apiVersion}}",
									"host": [
										"{{orgLoginUrl}}"
									],
									"path": [
										"services",
										"Soap",
										"u",
										"{{apiVersion}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "3. Set WebStore Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Tests...`);\r",
											"console.warn(`Code: ${pm.response.code} | Status: ${pm.response.status} | Response time: ${pm.response.responseTime} ms`);\r",
											"const expectedResponseCodes = [200];\r",
											"pm.expect(pm.response.code).to.be.oneOf(expectedResponseCodes, \"Response code not in expected range\");\r",
											"\r",
											"pm.test('Response is valid and has a JSON body', () => {\r",
											"     pm.response.to.be.success;\r",
											"     pm.response.to.be.withBody;\r",
											"     pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test('Validate the response and saves the WebStore Id in the collection variables', () => {\r",
											"    const data = pm.response.json();\r",
											"    pm.expect(data.records).to.exist;\r",
											"    pm.expect(data.records).to.be.an('array');\r",
											"    pm.expect(data.records.length).to.eql(1);\r",
											"    const webStore = data.records[0];\r",
											"    pm.expect(webStore.Id).to.exist;\r",
											"    pm.expect(webStore.Id).to.be.an('string');\r",
											"    pm.collectionVariables.set('_webStoreId', webStore.Id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											"\r",
											"// Expected strings in environment variables\r",
											"['orgLoginUrl','apiVersion', 'webStoreName'].forEach(esiev => {\r",
											"    if(!pm.environment.has(esiev)) {\r",
											"       const msg = `Expected Postman environment variable not found: '${esiev} in environment: '${pm.environment.name}'`;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
											"});\r",
											"\r",
											"// Expected strings in collection variables\r",
											"['_instanceUrl'].forEach(esicv => {\r",
											"    if(pm.collectionVariables.get(esicv) === undefined) {\r",
											"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{_instanceUrl}}/services/data/v{{apiVersion}}/query/?q=SELECT+Id,+Name+FROM+WebStore+WHERE+Name+=+'{{webStoreName}}'",
									"host": [
										"{{_instanceUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"query",
										""
									],
									"query": [
										{
											"key": "q",
											"value": "SELECT+Id,+Name+FROM+WebStore+WHERE+Name+=+'{{webStoreName}}'"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "4. Set Effective Account Id Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Tests...`);\r",
											"console.warn(`Code: ${pm.response.code} | Status: ${pm.response.status} | Response time: ${pm.response.responseTime} ms`);\r",
											"const expectedResponseCodes = [200];\r",
											"pm.expect(pm.response.code).to.be.oneOf(expectedResponseCodes, \"Response code not in expected range\");\r",
											"\r",
											"pm.test('Response is valid and has a JSON body', () => {\r",
											"     pm.response.to.be.success;\r",
											"     pm.response.to.be.withBody;\r",
											"     pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test('Validate the response and saves the WebStore Id in the collection variables', () => {\r",
											"    const data = pm.response.json();\r",
											"    pm.expect(data.records).to.exist;\r",
											"    pm.expect(data.records).to.be.an('array');\r",
											"    pm.expect(data.records.length).to.eql(1);\r",
											"    const account = data.records[0];\r",
											"    pm.expect(account.Id).to.exist;\r",
											"    pm.expect(account.Id).to.be.an('string');\r",
											"    pm.collectionVariables.set('_effectiveAccountId', account.Id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											"\r",
											"// Expected strings in environment variables\r",
											"['orgLoginUrl','apiVersion', 'webStoreName', 'buyerAccountName'].forEach(esiev => {\r",
											"    if(!pm.environment.has(esiev)) {\r",
											"        const msg = 'Expected Postman environment variable not found: ' + esiev;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
											"});\r",
											"\r",
											"// Expected strings in collection variables\r",
											"['_instanceUrl'].forEach(esicv => {\r",
											"    if(!pm.collectionVariables.has(esicv)) {\r",
											"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{_instanceUrl}}/services/data/v{{apiVersion}}/query/?q=SELECT+Id,+Name+FROM+Account+WHERE+Name+=+'{{buyerAccountName}}'",
									"host": [
										"{{_instanceUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"query",
										""
									],
									"query": [
										{
											"key": "q",
											"value": "SELECT+Id,+Name+FROM+Account+WHERE+Name+=+'{{buyerAccountName}}'"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "4. Set your oAuth 2.0 Token in Authorization tab Copy",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
											"console.log('Checking oAuth has been set up...');\r",
											"\r",
											"const checkOpenAuthToken = (request) => {\r",
											"    const isTokenMissing = request.auth === undefined\r",
											"    || request.auth.oauth2 === undefined\r",
											"    || !request.auth.oauth2.has('accessToken')\r",
											"    || request.auth.oauth2.get('accessToken') === undefined\r",
											"    || request.auth.oauth2.get('accessToken') === null\r",
											"    || request.auth.oauth2.get('accessToken').length === 0;\r",
											"\r",
											"    if(isTokenMissing) {\r",
											"        const msg = 'Steps to fix issue \"Expected oAuth 2.0 token not found\":\\r\\n' + \r",
											"        '1. Check in Setup -> OAuth and OpenID Connect Settings -> Allow OAuth Username-Password Flows: Enabled \\r\\n' +\r",
											"        '2. Click on the Request with a name like \"Set your oAuth 2.0 Token in Authorization tab\"\\r\\n' +\r",
											"        '3. Click the \"Authorization\" tab\\r\\n' + \r",
											"        '4. Click the \"Get New Access Token\" button\\r\\n' +\r",
											"        '5. Click the \"Proceed\" button\\r\\n' + \r",
											"        '6. Click the \"Use Token\" button\\r\\n' +\r",
											"        '7. Retry your request';\r",
											"        console.error(msg);\r",
											"        pm.expect.fail('Expected oAuth 2.0 token not found. See steps above for a fix.');\r",
											"    }\r",
											"    else\r",
											"    {\r",
											"        console.error(pm.request.auth.oauth2);\r",
											"\r",
											"        const tokenAgeInMinutes = Math.floor(Math.floor((new Date().getTime() - pm.request.auth.oauth2.get('timestamp')) / 1000) / 60);\r",
											"        console.warn(`Token age: ${tokenAgeInMinutes} minutes`);\r",
											"        pm.collectionVariables.set('_token', pm.request.auth.oauth2.get('accessToken'));\r",
											"    }\r",
											"};\r",
											"\r",
											"checkOpenAuthToken(pm.request);\r",
											"\r",
											"pm.test('oAuth 2.0 Assertions', () => {\r",
											"    pm.expect(pm.request.auth).to.exist;\r",
											"    pm.expect(pm.request.auth).to.be.an('object');\r",
											"    pm.expect(pm.request.auth.oauth2).to.exist;\r",
											"    pm.expect(pm.request.auth.oauth2).to.be.an('object');\r",
											"    pm.expect(pm.request.auth.oauth2.has('accessToken')).to.be.true;\r",
											"    pm.expect(pm.request.auth.oauth2.get('accessToken')).to.exist;\r",
											"    pm.expect(pm.request.auth.oauth2.get('accessToken')).to.be.an('string').with.length.greaterThan(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Tests...`);\r",
											"console.warn(`Code: ${pm.response.code} | Status: ${pm.response.status} | Response time: ${pm.response.responseTime} ms`);\r",
											"\r",
											"console.warn(pm.request.getHeaders());\r",
											"console.warn(pm.request.auth.response);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "scope",
											"value": "",
											"type": "string"
										},
										{
											"key": "accessTokenUrl",
											"value": "{{orgLoginUrl}}/services/oauth2/token",
											"type": "string"
										},
										{
											"key": "client_authentication",
											"value": "body",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{orgAdminPassword}}{{orgAdminSecurityToken}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{orgAdminUsername}}",
											"type": "string"
										},
										{
											"key": "clientSecret",
											"value": "{{connectedAppConsumerSecret}}",
											"type": "string"
										},
										{
											"key": "clientId",
											"value": "{{connectedAppConsumerKey}}",
											"type": "string"
										},
										{
											"key": "grant_type",
											"value": "password_credentials",
											"type": "string"
										},
										{
											"key": "tokenName",
											"value": "SF Token",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										},
										{
											"key": "useBrowser",
											"value": true,
											"type": "boolean"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "postman-echo.com/get",
									"host": [
										"postman-echo",
										"com"
									],
									"path": [
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "6. Get Order Summaries by Date",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Tests...`);",
											"console.warn(`Code: ${pm.response.code} | Status: ${pm.response.status} | Response time: ${pm.response.responseTime} ms`);",
											"const expectedResponseCodes = [200];",
											"pm.expect(pm.response.code).to.be.oneOf(expectedResponseCodes, \"Response code not in expected range\");",
											"",
											"pm.test('Response is valid and has a JSON body', () => {",
											"    pm.response.to.be.success;",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"});",
											"/*",
											"pm.test('Validate the response', () => {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.defaultImage).to.exist;",
											"    pm.expect(jsonData.defaultImage).to.be.an('object').with.property('id').to.be.an('string');",
											"",
											"    pm.expect(jsonData.fields).to.exist;",
											"    pm.expect(jsonData.fields).to.be.an('object').with.property('Name').to.be.an('string');",
											"    pm.expect(jsonData.fields).to.be.an('object').with.property('Description').to.be.an('string');",
											"    pm.expect(jsonData.fields).to.be.an('object').with.property('LastModifiedDate').to.match(/\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}Z/);",
											"    ",
											"    pm.expect(jsonData.mediaGroups).to.exist;",
											"    pm.expect(jsonData.mediaGroups).to.be.an('array');",
											"    pm.expect(jsonData.mediaGroups[0]).to.be.an('object').with.property('id').to.be.an('string');",
											"    pm.expect(jsonData.mediaGroups[0].mediaItems[0]).to.be.an('object').with.property('url').to.be.an('string');",
											"    pm.expect(jsonData.mediaGroups[0].mediaItems[0]).to.be.an('object').with.property('mediaType').to.be.an('string');",
											"});",
											"*/"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											"\r",
											"// Expected strings in environment variables\r",
											"['orgHostMySalesforceFormat','apiVersion'].forEach(esiev => {\r",
											"    if(!pm.environment.has(esiev)) {\r",
											"        const msg = `Expected Postman environment variable not found: '${esiev} in environment: '${pm.environment.name}'`;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
											"});\r",
											"\r",
											"// Expected strings in collection variables\r",
											"['_webStoreId', '_token', '_effectiveAccountId'].forEach(esicv => {\r",
											"    if(!pm.collectionVariables.has(esicv)) {\r",
											"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{_instanceUrl}}/services/data/v{{apiVersion}}/commerce/webstores/{{_webStoreId}}/order-summaries?fields=Id,createdDate,orderSummaryId,orderedDate,ownerId,status,GrandTotalAmount&pageSize=20&ownerScoped=false&effectiveAccountId={{_effectiveAccountId}}&earliestDate=2023-01-15T18:24:56.235-0530&latestDate=2023-12-15T18:24:56.235-0530",
									"host": [
										"{{_instanceUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"commerce",
										"webstores",
										"{{_webStoreId}}",
										"order-summaries"
									],
									"query": [
										{
											"key": "effectiveAccountId",
											"value": "<string>",
											"disabled": true
										},
										{
											"key": "excludeAttributeSetInfo",
											"value": "<boolean>",
											"disabled": true
										},
										{
											"key": "excludeEntitlementDetails",
											"value": "<boolean>",
											"disabled": true
										},
										{
											"key": "excludeFields",
											"value": "<boolean>",
											"disabled": true
										},
										{
											"key": "excludeMedia",
											"value": "<boolean>",
											"disabled": true
										},
										{
											"key": "excludePrimaryProductCategory",
											"value": "<boolean>",
											"disabled": true
										},
										{
											"key": "excludeProductSellingModels",
											"value": "<boolean>",
											"disabled": true
										},
										{
											"key": "excludeQuantityRule",
											"value": "<boolean>",
											"disabled": true
										},
										{
											"key": "excludeVariationInfo",
											"value": "<boolean>",
											"disabled": true
										},
										{
											"key": "fields",
											"value": "[]",
											"disabled": true
										},
										{
											"key": "mediaGroups",
											"value": "[]",
											"disabled": true
										},
										{
											"key": "fields",
											"value": "Id,createdDate,orderSummaryId,orderedDate,ownerId,status,GrandTotalAmount"
										},
										{
											"key": "pageSize",
											"value": "20"
										},
										{
											"key": "ownerScoped",
											"value": "false"
										},
										{
											"key": "effectiveAccountId",
											"value": "{{_effectiveAccountId}}"
										},
										{
											"key": "earliestDate",
											"value": "2023-01-15T18:24:56.235-0530"
										},
										{
											"key": "latestDate",
											"value": "2023-12-15T18:24:56.235-0530"
										}
									]
								},
								"description": "Fetch standard field data, custom field data, and enrichment data for a single Product, identified by the variable _productId_ that was set by the search products request."
							},
							"response": []
						}
					],
					"description": "Date ranged interactions with [Commerce Webstore Order Summaries using ](https://developer.salesforce.com/docs/atlas.en-us.chatterapi.meta/chatterapi/connect_resources_commerce_webstore_order_summaries.htm) using oAuth 2.0 for authentication.\n\n`/commerce/webstores/webstoreId/order-summaries`\n\n**oAuth 2.0 Token setup steps**\n\n1. Check in Setup -> OAuth and OpenID Connect Settings -> Allow OAuth Username-Password Flows: Enabled\n2. Click on the Request with a name like \"Set your oAuth 2.0 Token in Authorization tab\"\n3. Click the \"Authorization\" tab\n4. Click the \"Get New Access Token\" button\n5. Click the \"Proceed\" button\n6. Click the \"Use Token\" button\n7. Retry your requestEndFragment",
					"auth": {
						"type": "noauth"
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			],
			"description": "Interactions with [Commerce Webstore Order Summaries](https://developer.salesforce.com/docs/atlas.en-us.chatterapi.meta/chatterapi/connect_resources_commerce_webstore_order_summaries.htm)\n\n`/commerce/webstores/webstoreId/order-summaries`"
		},
		{
			"name": "Deployment - WIP",
			"item": [
				{
					"name": "External Services (Sketch)",
					"item": [
						{
							"name": "Inventory",
							"item": []
						},
						{
							"name": "Tax",
							"item": []
						},
						{
							"name": "Shipment",
							"item": []
						},
						{
							"name": "Payment",
							"item": [
								{
									"name": "Mock Payment Setup",
									"item": [
										{
											"name": "1. Clear Collection Variables",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log('1. Clear Collection Variables Pre-request Script...');\r",
															"\r",
															"// Check for environment selection\r",
															"if(pm.environment.name === undefined) {\r",
															"    const msg = 'No Postman environment selected or set.';\r",
															"    pm.expect.fail(msg);\r",
															"}\r",
															"\r",
															"// Clean up the variables from the collection set throughout the various calls\r",
															"pm.collectionVariables.clear();"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"console.log('1. Clear Collection Variables Tests...');\r",
															"\r",
															"pm.test('Make sure collection variables are clean', () => {\r",
															"    pm.expect(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value)).to.be.an('array').empty;\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "postman-echo.com/get",
													"host": [
														"postman-echo",
														"com"
													],
													"path": [
														"get"
													]
												}
											},
											"response": []
										},
										{
											"name": "2. Log in as System Administrator (SOAP)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"console.log('2. Log in as System Administrator Tests...');\r",
															"\r",
															"pm.test('Status code is 200', () => {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test('Validate the access token is found in the body and save it to the variables', () => {\r",
															"    const result = xml2Json(pm.response.text())['soapenv:Envelope']['soapenv:Body'].loginResponse.result;\r",
															"    const url = result.serverUrl.split('/');\r",
															"\r",
															"    pm.expect(result.sessionId).to.exist;\r",
															"    pm.expect(result.sessionId).to.be.a.string;\r",
															"\r",
															"    pm.collectionVariables.set('_token', result.sessionId);\r",
															"    pm.collectionVariables.set('_instanceUrl', url[0] + '//' + url[2]);\r",
															"    pm.collectionVariables.set('_userId', result.userId);\r",
															"    pm.collectionVariables.set('_orgId', result.userInfo.organizationId);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log('2. Log in as System Administrator Pre-request Script...');\r",
															"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
															"\r",
															"['orgLoginUrl','apiVersion'].forEach(esiev => {\r",
															"    if(!pm.environment.has(esiev)) {\r",
															"        const msg = 'Expected Postman environment variable not found: ' + esiev;\r",
															"        pm.expect.fail(msg);\r",
															"    }\r",
															"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
															"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "text/xml; charset=UTF-8",
														"type": "text"
													},
													{
														"key": "SOAPAction",
														"value": "login",
														"type": "text"
													},
													{
														"key": "Accept",
														"value": "text/xml",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\r\n<env:Envelope xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"\r\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n    xmlns:n1=\"urn:partner.soap.sforce.com\"\r\n    xmlns:env=\"http://schemas.xmlsoap.org/soap/envelope/\">\r\n    <env:Body>\r\n        <n1:login>\r\n            <n1:username><![CDATA[{{orgAdminUsername}}]]></n1:username>\r\n            <n1:password><![CDATA[{{orgAdminPassword}}]]></n1:password>\r\n        </n1:login>\r\n    </env:Body>\r\n</env:Envelope>"
												},
												"url": {
													"raw": "{{orgLoginUrl}}/services/Soap/u/{{apiVersion}}",
													"host": [
														"{{orgLoginUrl}}"
													],
													"path": [
														"services",
														"Soap",
														"u",
														"{{apiVersion}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "2. Create Collection Variables",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log('2. Create Collection Variables Pre-request Script...');\r",
															"\r",
															"pm.collectionVariables.set('_namedCredentialLabel', 'Test_NC');\r",
															"pm.collectionVariables.set('_paymentGatewayProviderApexClassName', '');\r",
															"pm.collectionVariables.set('_namedCredentialDeveloperName', '');\r",
															"pm.collectionVariables.set('_paymentGatewayProviderDeveloperName', '');\r",
															"pm.collectionVariables.set('_paymentGatewayName', '');\r",
															"pm.collectionVariables.set('_paymentGatewayExternalReference', '');"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"console.log('2. Create Collection Variables Pre-request Script...');\r",
															"\r",
															"pm.test('Make sure collection variables are clean', () => {\r",
															"    pm.expect(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value)).to.be.an('array').not.empty;\r",
															"});\r",
															"\r",
															"['orgLoginUrl','apiVersion'].forEach(esiev => {\r",
															"    if(!pm.environment.has(esiev)) {\r",
															"        const msg = 'Expected Postman environment variable not found: ' + esiev;\r",
															"        pm.expect.fail(msg);\r",
															"    }\r",
															"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
															"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
															"});\r",
															"\r",
															"['_namedCredentialLabel', '_paymentGatewayProviderApexClassName', '_namedCredentialDeveloperName','_paymentGatewayProviderDeveloperName', '_paymentGatewayName','_paymentGatewayExternalReference'].forEach(esicv => {\r",
															"    if(!pm.collectionVariables.has(esicv)) {\r",
															"        const msg = 'Expected Postman environment variable not found: ' + esicv;\r",
															"        pm.expect.fail(msg);\r",
															"    }\r",
															"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
															"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "postman-echo.com/get",
													"host": [
														"postman-echo",
														"com"
													],
													"path": [
														"get"
													]
												}
											},
											"response": []
										},
										{
											"name": "3. Get Named Credentials",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log('3. Deploy Named Credentials Pre-request Script...');\r",
															"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
															"\r",
															"['orgLoginUrl','apiVersion'].forEach(esiev => {\r",
															"    if(!pm.environment.has(esiev)) {\r",
															"        const msg = 'Expected Postman environment variable not found: ' + esiev;\r",
															"        pm.expect.fail(msg);\r",
															"    }\r",
															"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
															"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"console.log('3. Deploy Named Credentials Tests...');\r",
															"\r",
															"pm.test('Status code is 200', () => {\r",
															"    //pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test('Validate the access token is found in the body and save it to the variables', () => {\r",
															"    /*\r",
															"    const result = xml2Json(pm.response.text())['soapenv:Envelope']['soapenv:Body'].loginResponse.result;\r",
															"    const url = result.serverUrl.split('/');\r",
															"\r",
															"    pm.expect(result.sessionId).to.exist;\r",
															"    pm.expect(result.sessionId).to.be.a.string;\r",
															"\r",
															"    pm.collectionVariables.set('_token', result.sessionId);\r",
															"    pm.collectionVariables.set('_instanceUrl', url[0] + '//' + url[2]);\r",
															"    pm.collectionVariables.set('_userId', result.userId);\r",
															"    pm.collectionVariables.set('_orgId', result.userInfo.organizationId);\r",
															"    */\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "postman-echo.com/get",
													"host": [
														"postman-echo",
														"com"
													],
													"path": [
														"get"
													]
												}
											},
											"response": []
										},
										{
											"name": "4. Create Payment Gateway Provider",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"console.log('4. Create Payment Gateway Provider Tests...');",
															"",
															"pm.test('Status code is 200', () => {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test('Response is valid and has a JSON body', () => {",
															"     pm.response.to.be.success;",
															"     pm.response.to.be.withBody;",
															"     pm.response.to.be.json;",
															"});",
															"",
															"pm.test('Validate result and save collection variables', () => {",
															"    let data = pm.response.json();",
															"    const paymentGatewayProvider = data.compositeResponse.find((result) => result.referenceId === 'paymentGatewayProvider');",
															"    pm.expect(paymentGatewayProvider).to.exist;",
															"    pm.expect(paymentGatewayProvider.body).to.exist;",
															"    pm.expect(paymentGatewayProvider.body.id).to.exist;",
															"    pm.expect(paymentGatewayProvider.body.id).to.be.a.string;",
															"    pm.collectionVariables.set('_paymentGatewayProviderId', paymentGatewayProvider.body.id);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log('4. Create Payment Gateway Provider Pre-request Script...');\r",
															"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{_accessToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"allOrNone\": true,\n    \"compositeRequest\": [\n        {\n            \"method\": \"GET\",\n            \"url\": \"/services/data/v{{apiVersion}}/query/?q=SELECT+Id+FROM+ApexClass+WHERE+Name+=+'{{_paymentGatewayProviderApexClassName}}'\",\n            \"referenceId\": \"apexClass\"\n        },\n        {\n            \"method\": \"POST\",\n            \"url\": \"/services/data/v{{apiVersion}}/sobjects/PaymentGatewayProvider\",\n            \"referenceId\": \"paymentGatewayProvider\",\n            \"body\": {\n                \"ApexAdapterId\": \"@{apexClass.records[0].Id}\",\n                \"DeveloperName\": \"{{_paymentGatewayProviderDeveloperName}}\",\n                \"MasterLabel\": \"{{_paymentGatewayProviderDeveloperName}}\",\n                \"Language\": \"en_US\",\n                \"IdempotencySupported\": \"Yes\"\n            }\n        }\n    ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{orgHostMySalesforceFormat}}/services/data/v{{apiVersion}}/composite",
													"host": [
														"{{orgHostMySalesforceFormat}}"
													],
													"path": [
														"services",
														"data",
														"v{{apiVersion}}",
														"composite"
													]
												}
											},
											"response": []
										},
										{
											"name": "5. Create Payment Gateway",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"console.log('5. Create Payment Gateway Tests...');",
															"",
															"pm.test('Status code is 200', () => {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test('Response is valid and has a JSON body', () => {",
															"     pm.response.to.be.success;",
															"     pm.response.to.be.withBody;",
															"     pm.response.to.be.json;",
															"});",
															"",
															"const validateResults = (refId) => {",
															"    pm.test(`Validate ${refId}`, () => {",
															"        let data = pm.response.json();",
															"        const refResult = data.compositeResponse.find((result) => result.referenceId === refId);",
															"        pm.expect(refResult).to.exist;",
															"        pm.expect(refResult.body).to.exist;",
															"        pm.expect(refResult.body.records).to.exist;",
															"        pm.expect(refResult.body.records).to.be.an('array');",
															"        pm.expect(refResult.body.records.length).to.eql(1);",
															"        pm.expect(refResult.body.records[0].Id).to.exist;",
															"        pm.expect(refResult.body.records[0].Id).to.be.a.string;",
															"    });",
															"};",
															"",
															"validateResults('apexClass');",
															"validateResults('namedCredential');",
															"validateResults('paymentGatewayProvider');",
															"",
															"pm.test('Validate paymentGateway', () => {",
															"    let data = pm.response.json();",
															"    const paymentGateway = data.compositeResponse.find((result) => result.referenceId === 'paymentGateway');",
															"    pm.expect(paymentGateway).to.exist;",
															"    pm.expect(paymentGateway.httpStatusCode).to.eql(201);",
															"    pm.expect(paymentGateway.body.id).to.exist;",
															"    pm.expect(paymentGateway.body.id).to.be.a.string;",
															"    pm.expect(paymentGateway.body.success).to.exist;",
															"    pm.expect(paymentGateway.body.success).to.eql(true);",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log('5. Create Payment Gateway Provider Pre-request Script...');\r",
															"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{_accessToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"allOrNone\": true,\n    \"compositeRequest\": [\n        {\n            \"method\": \"GET\",\n            \"url\": \"/services/data/v{{apiVersion}}/query/?q=SELECT+Id+FROM+ApexClass+WHERE+Name+=+'{{_paymentGatewayProviderApexClassName}}'+LIMIT+1\",\n            \"referenceId\": \"apexClass\"\n        },\n        {\n            \"method\": \"GET\",\n            \"url\": \"/services/data/v{{apiVversion}}/query/?q=SELECT+Id+FROM+NamedCredential+WHERE+DeveloperName+=+'{{_namedCredentialDeveloperName}}'+LIMIT+1\",\n            \"referenceId\": \"namedCredential\"\n        },\n        {\n            \"method\": \"GET\",\n            \"url\": \"/services/data/v{{apiVersion}}/query/?q=SELECT+Id+FROM+PaymentGatewayProvider+WHERE+ApexAdapterId+=+'@{apexClass.records[0].Id}'+AND+DeveloperName+=+'{{_paymentGatewayProviderDeveloperName}}'+LIMIT+1\",\n            \"referenceId\": \"paymentGatewayProvider\"\n        },\n        {\n            \"method\": \"POST\",\n            \"url\": \"/services/data/v{{apiVersion}}/sobjects/PaymentGateway\",\n            \"referenceId\": \"paymentGateway\",\n            \"body\": {\n                \"PaymentGatewayProviderId\": \"@{paymentGatewayProvider.records[0].Id}\",\n                \"MerchantCredentialId\": \"@{namedCredential.records[0].Id}\",\n                \"Status\": \"Active\",\n                \"PaymentGatewayName\": \"{{_paymentGatewayName}}\",\n                \"ExternalReference\": \"{{_paymentGatewayExternalReference}}\"\n            }\n        }\n    ]\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{orgHostMySalesforceFormat}}/services/data/v{{apiVersion}}/composite",
													"host": [
														"{{orgHostMySalesforceFormat}}"
													],
													"path": [
														"services",
														"data",
														"v{{apiVersion}}",
														"composite"
													]
												}
											},
											"response": []
										},
										{
											"name": "6. Query Payment Gateway",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"console.log('6. Query Payment Gateway Tests...');",
															"",
															"pm.test('Status code is 200', () => {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test('Response is valid and has a JSON body', () => {",
															"     pm.response.to.be.success;",
															"     pm.response.to.be.withBody;",
															"     pm.response.to.be.json;",
															"});",
															"",
															"const validateResults = (refId) => {",
															"    pm.test(`Validate ${refId}`, () => {",
															"        let data = pm.response.json();",
															"        const refResult = data.compositeResponse.find((result) => result.referenceId === refId);",
															"        pm.expect(refResult).to.exist;",
															"        pm.expect(refResult.body).to.exist;",
															"        pm.expect(refResult.body.records).to.exist;",
															"        pm.expect(refResult.body.records).to.be.an('array');",
															"        pm.expect(refResult.body.records.length).to.eql(1);",
															"        pm.expect(refResult.body.records[0].Id).to.exist;",
															"        pm.expect(refResult.body.records[0].Id).to.be.a.string;",
															"    });",
															"};",
															"",
															"validateResults('apexClass');",
															"validateResults('namedCredential');",
															"validateResults('paymentGatewayProvider');",
															"validateResults('paymentGateway');"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log('6. Query Payment Gateway Provider Pre-request Script...');\r",
															"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{_accessToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"allOrNone\": true,\n    \"compositeRequest\": [\n        {\n            \"method\": \"GET\",\n            \"url\": \"/services/data/v{{apiVersion}}/query/?q=SELECT+Id,+Name,+Status,+ApiVersion+FROM+ApexClass+WHERE+Name+=+'{{_paymentGatewayProviderApexClassName}}'+LIMIT+1\",\n            \"referenceId\": \"apexClass\"\n        },\n        {\n            \"method\": \"GET\",\n            \"url\": \"/services/data/v{{apiVersion}}/query/?q=SELECT+Id,+DeveloperName,+Endpoint+FROM+NamedCredential+WHERE+DeveloperName+=+'{{_namedCredentialDeveloperName}}'+LIMIT+1\",\n            \"referenceId\": \"namedCredential\"\n        },\n        {\n            \"method\": \"GET\",\n            \"url\": \"/services/data/v{{apiVersion}}/query/?q=SELECT+Id,+DeveloperName,+MasterLabel,+ApexAdapterId,+IdempotencySupported,+Language+FROM+PaymentGatewayProvider+WHERE+ApexAdapterId+=+'@{apexClass.records[0].Id}'+AND+DeveloperName+=+'{{_paymentGatewayProviderDeveloperName}}'+LIMIT+1\",\n            \"referenceId\": \"paymentGatewayProvider\"\n        },\n        {\n            \"method\": \"GET\",\n            \"url\": \"/services/data/v{{apiVersion}}/query/?q=SELECT+Id,ExternalReference+FROM+PaymentGateway+WHERE+PaymentGatewayProviderId+=+'@{paymentGatewayProvider.records[0].Id}'+AND+MerchantCredentialId+=+'@{namedCredential.records[0].Id}'+AND+PaymentGatewayName+=+'{{_paymentGatewayName}}'+AND+Status+='Active'+LIMIT+1\",\n            \"referenceId\": \"paymentGateway\"\n        }\n    ]\n}"
												},
												"url": {
													"raw": "{{orgHostMySalesforceFormat}}/services/data/v{{apiVersion}}/composite",
													"host": [
														"{{orgHostMySalesforceFormat}}"
													],
													"path": [
														"services",
														"data",
														"v{{apiVersion}}",
														"composite"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Stripe (not Salesforce Payments)",
									"item": [
										{
											"name": "1. Clear Collection Variables Copy",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"console.log('1. Clear Collection Variables Pre-request Script...');\r",
															"\r",
															"// Check for environment selection\r",
															"if(pm.environment.name === undefined) {\r",
															"    const msg = 'No Postman environment selected or set.';\r",
															"    pm.expect.fail(msg);\r",
															"}\r",
															"\r",
															"// Clean up the variables from the collection set throughout the various calls\r",
															"pm.collectionVariables.clear();"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"console.log('1. Clear Collection Variables Tests...');\r",
															"\r",
															"pm.test('Make sure collection variables are clean', () => {\r",
															"    pm.expect(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value)).to.be.an('array').empty;\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "postman-echo.com/get",
													"host": [
														"postman-echo",
														"com"
													],
													"path": [
														"get"
													]
												}
											},
											"response": []
										},
										{
											"name": "1. Deploy Stripe Example Copy",
											"request": {
												"method": "GET",
												"header": []
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "1. Clear Collection Variables",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log('1. Clear Collection Variables Pre-request Script...');\r",
											"\r",
											"// Check for environment selection\r",
											"if(pm.environment.name === undefined) {\r",
											"    const msg = 'No Postman environment selected or set.';\r",
											"    pm.expect.fail(msg);\r",
											"}\r",
											"\r",
											"// Clean up the variables from the collection set throughout the various calls\r",
											"pm.collectionVariables.clear();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log('1. Clear Collection Variables Tests...');\r",
											"\r",
											"pm.test('Make sure collection variables are clean', () => {\r",
											"    pm.expect(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value)).to.be.an('array').empty;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "postman-echo.com/get",
									"host": [
										"postman-echo",
										"com"
									],
									"path": [
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "New Request",
							"request": {
								"method": "GET",
								"header": []
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Search Operations - WIP",
			"item": [
				{
					"name": "1. Start Reindex",
					"request": {
						"method": "GET",
						"header": []
					},
					"response": []
				}
			]
		},
		{
			"name": "Lego Bin",
			"item": [
				{
					"name": "A. Baseplate (Applies to Bricks for Buyer Login, oAuth 2.0, Guest)",
					"item": [
						{
							"name": "Clear Collection Variables",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
											"\r",
											"// Check for environment selection\r",
											"if(pm.environment.name === undefined) {\r",
											"    const msg = 'No Postman environment selected or set.';\r",
											"    pm.expect.fail(msg);\r",
											"}\r",
											"\r",
											"// Clean up the variables from the collection set throughout the various calls\r",
											"pm.collectionVariables.clear();"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Tests...`);\r",
											"\r",
											"pm.test('Make sure collection variables are clean', () => {\r",
											"    pm.expect(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value)).to.be.an('array').empty;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "postman-echo.com/get",
									"host": [
										"postman-echo",
										"com"
									],
									"path": [
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "Log in as System Administrator (SOAP)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Tests...`);\r",
											"console.warn(`Code: ${pm.response.code} | Status: ${pm.response.status} | Response time: ${pm.response.responseTime} ms`);\r",
											"\r",
											"pm.expect(pm.response.text().includes('INVALID_LOGIN'), 'INVALID_LOGIN found in response - Suggested fix: Check username, password and tokens in the Postman Environment').to.be.false;\r",
											"\r",
											"pm.expect(pm.response.text().includes('API_CURRENTLY_DISABLED'), 'API_CURRENTLY_DISABLED found in response - Suggested fix: Create a Permission Set like \\'Api Enabled\\' with the API Enabled checkbox active in System Permissions and apply it to the user').to.be.false;\r",
											"\r",
											"const expectedResponseCodes = [200];\r",
											"pm.expect(pm.response.code).to.be.oneOf(expectedResponseCodes, \"Response code not in expected range\");\r",
											"\r",
											"pm.test('Validate the access token is found in the body and save it to the variables', () => {\r",
											"    const result = xml2Json(pm.response.text())['soapenv:Envelope']['soapenv:Body'].loginResponse.result;\r",
											"    const url = result.serverUrl.split('/');\r",
											"\r",
											"    pm.expect(result.sessionId).to.exist;\r",
											"    pm.expect(result.sessionId).to.be.a.string;\r",
											"\r",
											"    pm.collectionVariables.set('_token', result.sessionId);\r",
											"    pm.collectionVariables.set('_instanceUrl', url[0] + '//' + url[2]);\r",
											"    pm.collectionVariables.set('_userId', result.userId);\r",
											"    pm.collectionVariables.set('_orgId', result.userInfo.organizationId);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const expectedStringsInEnvironmentVariables = ['orgLoginUrl','apiVersion','orgAdminUsername','orgAdminPassword','orgAdminSecurityToken'];\r",
											"const expectedStringsInCollectionVariables = [];\r",
											"\r",
											"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											"\r",
											"// Expected strings in environment variables\r",
											"for(const esiev of expectedStringsInEnvironmentVariables)\r",
											"{\r",
											"    if(!pm.environment.has(esiev))\r",
											"    {\r",
											"        const msg = `Expected Postman environment variable not found: '${esiev} in environment: '${pm.environment.name}'`;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"\r",
											"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
											"}\r",
											"\r",
											"// Expected strings in collection variables\r",
											"for(esicv of expectedStringsInCollectionVariables)\r",
											"{\r",
											"    if(!pm.collectionVariables.has(esicv))\r",
											"    {\r",
											"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    \r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "text/xml; charset=UTF-8",
										"type": "text"
									},
									{
										"key": "SOAPAction",
										"value": "login",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "text/xml",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\r\n<env:Envelope xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"\r\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n    xmlns:n1=\"urn:partner.soap.sforce.com\"\r\n    xmlns:env=\"http://schemas.xmlsoap.org/soap/envelope/\">\r\n    <env:Body>\r\n        <n1:login>\r\n            <n1:username><![CDATA[{{orgAdminUsername}}]]></n1:username>\r\n            <n1:password><![CDATA[{{orgAdminPassword}}]]></n1:password>\r\n        </n1:login>\r\n    </env:Body>\r\n</env:Envelope>"
								},
								"url": {
									"raw": "{{orgLoginUrl}}/services/Soap/u/{{apiVersion}}",
									"host": [
										"{{orgLoginUrl}}"
									],
									"path": [
										"services",
										"Soap",
										"u",
										"{{apiVersion}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Look Up and Set WebStore Id (Query API)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Tests...`);\r",
											"console.warn(`Code: ${pm.response.code} | Status: ${pm.response.status} | Response time: ${pm.response.responseTime} ms`);\r",
											"const expectedResponseCodes = [200];\r",
											"pm.expect(pm.response.code).to.be.oneOf(expectedResponseCodes, \"Response code not in expected range\");\r",
											"\r",
											"pm.test('Response is valid and has a JSON body', () => {\r",
											"     pm.response.to.be.success;\r",
											"     pm.response.to.be.withBody;\r",
											"     pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test('Validate the response and save the WebStore Id in the collection variables', () => {\r",
											"    const data = pm.response.json();\r",
											"    pm.expect(data.records).to.exist;\r",
											"    pm.expect(data.records).to.be.an('array');\r",
											"    pm.expect(data.records.length).to.eql(1);\r",
											"    const webStore = data.records[0];\r",
											"    pm.expect(webStore.Id).to.exist;\r",
											"    pm.expect(webStore.Id).to.be.an('string');\r",
											"    pm.collectionVariables.set('_webStoreId', webStore.Id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											"\r",
											"// Expected strings in environment variables\r",
											"['orgLoginUrl','apiVersion', 'webStoreName'].forEach(esiev => {\r",
											"    if(!pm.environment.has(esiev)) {\r",
											"       const msg = `Expected Postman environment variable not found: '${esiev} in environment: '${pm.environment.name}'`;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
											"});\r",
											"\r",
											"// Expected strings in collection variables\r",
											"['_instanceUrl'].forEach(esicv => {\r",
											"    if(pm.collectionVariables.get(esicv) === undefined) {\r",
											"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{_instanceUrl}}/services/data/v{{apiVersion}}/query/?q=SELECT+Id,+Name+FROM+WebStore+WHERE+Name+=+'{{webStoreName}}'",
									"host": [
										"{{_instanceUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"query",
										""
									],
									"query": [
										{
											"key": "q",
											"value": "SELECT+Id,+Name+FROM+WebStore+WHERE+Name+=+'{{webStoreName}}'"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Set Effective Account Id (Query API)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Tests...`);\r",
											"console.warn(`Code: ${pm.response.code} | Status: ${pm.response.status} | Response time: ${pm.response.responseTime} ms`);\r",
											"const expectedResponseCodes = [200];\r",
											"pm.expect(pm.response.code).to.be.oneOf(expectedResponseCodes, \"Response code not in expected range\");\r",
											"\r",
											"pm.test('Response is valid and has a JSON body', () => {\r",
											"     pm.response.to.be.success;\r",
											"     pm.response.to.be.withBody;\r",
											"     pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test('Validate the response and saves the WebStore Id in the collection variables', () => {\r",
											"    const data = pm.response.json();\r",
											"    pm.expect(data.records).to.exist;\r",
											"    pm.expect(data.records).to.be.an('array');\r",
											"    pm.expect(data.records.length).to.eql(1);\r",
											"    const account = data.records[0];\r",
											"    pm.expect(account.Id).to.exist;\r",
											"    pm.expect(account.Id).to.be.an('string');\r",
											"    pm.collectionVariables.set('_effectiveAccountId', account.Id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											"\r",
											"// Expected strings in environment variables\r",
											"['orgLoginUrl','apiVersion', 'webStoreName', 'buyerAccountName'].forEach(esiev => {\r",
											"    if(!pm.environment.has(esiev)) {\r",
											"        const msg = 'Expected Postman environment variable not found: ' + esiev;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
											"});\r",
											"\r",
											"// Expected strings in collection variables\r",
											"['_instanceUrl'].forEach(esicv => {\r",
											"    if(!pm.collectionVariables.has(esicv)) {\r",
											"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{_instanceUrl}}/services/data/v{{apiVersion}}/query/?q=SELECT+Id,+Name+FROM+Account+WHERE+Name+=+'{{buyerAccountName}}'",
									"host": [
										"{{_instanceUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"query",
										""
									],
									"query": [
										{
											"key": "q",
											"value": "SELECT+Id,+Name+FROM+Account+WHERE+Name+=+'{{buyerAccountName}}'"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Set ProductCatalog Id by Webstore Id (Query API)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Tests...`);\r",
											"console.warn(`Code: ${pm.response.code} | Status: ${pm.response.status} | Response time: ${pm.response.responseTime} ms`);\r",
											"const expectedResponseCodes = [200];\r",
											"pm.expect(pm.response.code).to.be.oneOf(expectedResponseCodes, \"Response code not in expected range\");\r",
											"\r",
											"pm.test('Response is valid and has a JSON body', () => {\r",
											"     pm.response.to.be.success;\r",
											"     pm.response.to.be.withBody;\r",
											"     pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test('Validate the response and save the ProductCatalog Id in the collection variables', () => {\r",
											"    const data = pm.response.json();\r",
											"    pm.expect(data.records).to.exist;\r",
											"    pm.expect(data.records).to.be.an('array');\r",
											"    pm.expect(data.records.length).to.eql(1);\r",
											"\r",
											"    const productCatalog = data.records[0];\r",
											"    pm.expect(productCatalog.ProductCatalogId).to.exist;\r",
											"    pm.expect(productCatalog.ProductCatalogId).to.be.an('string');\r",
											"    pm.collectionVariables.set('_productCatalogId', productCatalog.ProductCatalogId);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											"\r",
											"// Expected strings in environment variables\r",
											"['orgLoginUrl','apiVersion', 'webStoreName'].forEach(esiev => {\r",
											"    if(!pm.environment.has(esiev)) {\r",
											"       const msg = `Expected Postman environment variable not found: '${esiev} in environment: '${pm.environment.name}'`;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
											"});\r",
											"\r",
											"// Expected strings in collection variables\r",
											"['_instanceUrl'].forEach(esicv => {\r",
											"    if(pm.collectionVariables.get(esicv) === undefined) {\r",
											"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{_instanceUrl}}/services/data/v{{apiVersion}}/query/?q=SELECT+ProductCatalogId,+SalesStoreId+FROM+WebStoreCatalog+WHERE+SalesStoreId+=+'{{_webStoreId}}'",
									"host": [
										"{{_instanceUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"query",
										""
									],
									"query": [
										{
											"key": "q",
											"value": "SELECT+ProductCatalogId,+SalesStoreId+FROM+WebStoreCatalog+WHERE+SalesStoreId+=+'{{_webStoreId}}'"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Set Product Ids (Query API)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Tests...`);\r",
											"console.warn(`Code: ${pm.response.code} | Status: ${pm.response.status} | Response time: ${pm.response.responseTime} ms`);\r",
											"\r",
											"pm.test('Status code is 200', () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Response is valid and has a JSON body', () => {\r",
											"     pm.response.to.be.success;\r",
											"     pm.response.to.be.withBody;\r",
											"     pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test('Validate the response and save the Product Ids in the collection variables', () => {\r",
											"    const data = pm.response.json();\r",
											"    pm.expect(data.records).to.exist;\r",
											"    pm.expect(data.records).to.be.an('array');\r",
											"    pm.expect(data.records.length).greaterThan(1);\r",
											"    \r",
											"    const productIds = [];\r",
											"    data.records.forEach(p => {\r",
											"        productIds.push(p.Id);\r",
											"    });\r",
											"    \r",
											"    console.log('# of Product Ids: ' + productIds.length + ' Details:\\r\\n' + productIds.join(',\\r\\n'));\r",
											"    pm.collectionVariables.set('_productIds', JSON.stringify(productIds));\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											"\r",
											"// Expected strings in environment variables\r",
											"['orgLoginUrl','apiVersion', 'webStoreName', 'buyerAccountName', 'productNamesCommaDelimited'].forEach(esiev => {\r",
											"    if(!pm.environment.has(esiev)) {\r",
											"        const msg = 'Expected Postman environment variable not found: ' + esiev;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
											"});\r",
											"\r",
											"// Expected strings in collection variables\r",
											"['_instanceUrl'].forEach(esicv => {\r",
											"    if(!pm.collectionVariables.has(esicv)) {\r",
											"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
											"});\r",
											"\r",
											"console.log('Parsing and assigning productNames...');\r",
											"const productNamesCommaDelimited = pm.environment.get('productNamesCommaDelimited');\r",
											"const productNamesArray = productNamesCommaDelimited.split(',');\r",
											"console.log('# of Product Names: ' + productNamesArray.length + ' Details:\\r\\n' + productNamesArray.join(',\\r\\n'));\r",
											"pm.collectionVariables.set('_productNames', '\\'' + productNamesArray.join('\\',\\'') + '\\'');"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{_instanceUrl}}/services/data/v{{apiVersion}}/query/?q=SELECT+Id,+Name+FROM+Product2+WHERE+Name+in(+{{_productNames}})",
									"host": [
										"{{_instanceUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"query",
										""
									],
									"query": [
										{
											"key": "q",
											"value": "SELECT+Id,+Name+FROM+Product2+WHERE+Name+in(+{{_productNames}})"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Set Parent Category Id by ProductCatalog Id (Query API)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Tests...`);\r",
											"console.warn(`Code: ${pm.response.code} | Status: ${pm.response.status} | Response time: ${pm.response.responseTime} ms`);\r",
											"const expectedResponseCodes = [200];\r",
											"pm.expect(pm.response.code).to.be.oneOf(expectedResponseCodes, \"Response code not in expected range\");\r",
											"\r",
											"pm.test('Response is valid and has a JSON body', () => {\r",
											"     pm.response.to.be.success;\r",
											"     pm.response.to.be.withBody;\r",
											"     pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test('Validate the response and save the WebStore Id in the collection variables', () => {\r",
											"    const data = pm.response.json();\r",
											"    pm.expect(data.records).to.exist;\r",
											"    pm.expect(data.records).to.be.an('array');\r",
											"    pm.expect(data.records.length).to.eql(1);\r",
											"    const parentCategory = data.records[0];\r",
											"    pm.expect(parentCategory.Id).to.exist;\r",
											"    pm.expect(parentCategory.Id).to.be.an('string');\r",
											"    pm.collectionVariables.set('_b2bWebStoreParentCategoryId', parentCategory.Id);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											"\r",
											"// Expected strings in environment variables\r",
											"['orgLoginUrl','apiVersion', 'webStoreName', 'b2bWebStoreParentCategoryName'].forEach(esiev => {\r",
											"    if(!pm.environment.has(esiev)) {\r",
											"       const msg = `Expected Postman environment variable not found: '${esiev} in environment: '${pm.environment.name}'`;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
											"});\r",
											"\r",
											"// Expected strings in collection variables\r",
											"['_instanceUrl'].forEach(esicv => {\r",
											"    if(pm.collectionVariables.get(esicv) === undefined) {\r",
											"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{_instanceUrl}}/services/data/v{{apiVersion}}/query/?q=SELECT+Id,+Name+FROM+ProductCategory+WHERE+CatalogId='{{_productCatalogId}}'+and+Name+=+'{{b2bWebStoreParentCategoryName}}'",
									"host": [
										"{{_instanceUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"query",
										""
									],
									"query": [
										{
											"key": "q",
											"value": "SELECT+Id,+Name+FROM+ProductCategory+WHERE+CatalogId='{{_productCatalogId}}'+and+Name+=+'{{b2bWebStoreParentCategoryName}}'"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Set Site Id and UrlPathPrefix (Query API)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Tests...`);\r",
											"console.warn(`Code: ${pm.response.code} | Status: ${pm.response.status} | Response time: ${pm.response.responseTime} ms`);\r",
											"\r",
											"pm.test('Status code is 200', () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Response is valid and has a JSON body', () => {\r",
											"     pm.response.to.be.success;\r",
											"     pm.response.to.be.withBody;\r",
											"     pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test('Validate the response and save the Product Ids in the collection variables', () => {\r",
											"    const data = pm.response.json();\r",
											"    pm.expect(data.records).to.exist;\r",
											"    pm.expect(data.records).to.be.an('array');\r",
											"    pm.expect(data.records.length).greaterThan(0);\r",
											"    \r",
											"    const site = data.records[0];\r",
											"    pm.collectionVariables.set('_siteId', site.Id);\r",
											"    pm.collectionVariables.set('_siteUrlPathPrefix', site.UrlPathPrefix);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											"\r",
											"// Expected strings in environment variables\r",
											"['orgLoginUrl','apiVersion', 'webStoreName', 'buyerAccountName', 'productNamesCommaDelimited'].forEach(esiev => {\r",
											"    if(!pm.environment.has(esiev)) {\r",
											"        const msg = 'Expected Postman environment variable not found: ' + esiev;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
											"});\r",
											"\r",
											"// Expected strings in collection variables\r",
											"['_instanceUrl', '_webStoreId'].forEach(esicv => {\r",
											"    if(!pm.collectionVariables.has(esicv)) {\r",
											"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
											"});\r",
											"\r",
											"console.log('Parsing and assigning productNames...');\r",
											"const productNamesCommaDelimited = pm.environment.get('productNamesCommaDelimited');\r",
											"const productNamesArray = productNamesCommaDelimited.split(',');\r",
											"console.log('# of Product Names: ' + productNamesArray.length + ' Details:\\r\\n' + productNamesArray.join(',\\r\\n'));\r",
											"pm.collectionVariables.set('_productNames', '\\'' + productNamesArray.join('\\',\\'') + '\\'');"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{_instanceUrl}}/services/data/v{{apiVersion}}/query/?q=SELECT+Id,+Name,+UrlPathPrefix+FROM+Site+WHERE+MasterLabel+=+'{{webStoreName}}'",
									"host": [
										"{{_instanceUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"query",
										""
									],
									"query": [
										{
											"key": "q",
											"value": "SELECT+Id,+Name,+UrlPathPrefix+FROM+Site+WHERE+MasterLabel+=+'{{webStoreName}}'"
										}
									]
								}
							},
							"response": []
						}
					],
					"description": "Sometimes you can't get around those SeeAllData=True attributions in code and this setup allows you to do similar things in the vein of promoting automated testing and working models. Using the lego metaphor this is your baseplate. You can do things such as:\n\n- Clear collection variables\n- Log in as Administrator\n- Set up key variables for request chains such as:\n    \n    - WebStore Id\n    - Effective Account Id\n    - Product Catalog Id\n        \n    - Product Ids\n        \n    - Parent Category Id\n        \n    - Site Id and UrlPathPrefix\n        \n\nThe end-game would be to then continue using Buyer Login, oAuth 2.0 or Guest methodologies to complete the remaining calls in your chain."
				},
				{
					"name": "B. Bricks (Buyer Login)",
					"item": [
						{
							"name": "Login as Buyer (SOAP)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Tests...`);",
											"",
											"pm.expect(pm.response.text().includes('INVALID_LOGIN'), 'INVALID_LOGIN found in response - Suggested fix: Check username, password and tokens in the Postman Environment').to.be.false;",
											"",
											"pm.expect(pm.response.text().includes('API_CURRENTLY_DISABLED'), 'API_CURRENTLY_DISABLED found in response - Suggested fix: Create a Permission Set like \\'Api Enabled\\' with the API Enabled checkbox active in System Permissions and apply it to the user').to.be.false;",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Validate the access token is found in the body and save it to a collection variable', () => {",
											"    const result = xml2Json(pm.response.text())['soapenv:Envelope']['soapenv:Body'].loginResponse.result;",
											"    const url = result.serverUrl.split('/');",
											"",
											"    pm.expect(result.sessionId).to.exist;",
											"    pm.expect(result.sessionId).to.be.a.string;",
											"",
											"    pm.collectionVariables.set('_token', result.sessionId);",
											"    pm.collectionVariables.set('_instanceUrl', url[0] + '//' + url[2]);",
											"    pm.collectionVariables.set('_userId', result.userId);",
											"    pm.collectionVariables.set('_orgId', result.userInfo.organizationId);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const expectedStringsInEnvironmentVariables = ['orgLoginUrl','apiVersion'];\r",
											"const expectedStringsInCollectionVariables = ['_webStoreId'];\r",
											"\r",
											"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											"\r",
											"// Expected strings in environment variables\r",
											"for(const esiev of expectedStringsInEnvironmentVariables)\r",
											"{\r",
											"    if(!pm.environment.has(esiev))\r",
											"    {\r",
											"        const msg = `Expected Postman environment variable not found: '${esiev} in environment: '${pm.environment.name}'`;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"\r",
											"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
											"}\r",
											"\r",
											"// Expected strings in collection variables\r",
											"for(esicv of expectedStringsInCollectionVariables)\r",
											"{\r",
											"    if(!pm.collectionVariables.has(esicv))\r",
											"    {\r",
											"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "text/xml; charset=UTF-8"
									},
									{
										"key": "SOAPAction",
										"value": "login"
									},
									{
										"key": "Accept",
										"value": "text/xml"
									},
									{
										"key": "Cookie",
										"value": "BrowserId=POhd6XTZEe2v6_8M7WG26g"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap:Envelope xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\" \nxmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://\nwww.w3.org/2001/XMLSchema\">\n    <soap:Header>\n        <LoginScopeHeader xmlns=\"urn:partner.soap.sforce.com\">\n            <organizationId>{{_orgId}}</organizationId>\n        </LoginScopeHeader>\n    </soap:Header>\n    <soap:Body>\n        <login xmlns=\"urn:partner.soap.sforce.com\">\n            <username><![CDATA[{{buyerUsername}}]]></username>\n            <password><![CDATA[{{buyerPassword}}]]></password>\n        </login>\n    </soap:Body>\n</soap:Envelope>"
								},
								"url": {
									"raw": "{{orgLoginUrl}}/services/Soap/u/{{apiVersion}}",
									"host": [
										"{{orgLoginUrl}}"
									],
									"path": [
										"services",
										"Soap",
										"u",
										"{{apiVersion}}"
									]
								},
								"description": "Authenticate the shopper through the variables _buyerUsername_ and _buyerPassword_. Generated session ID is saved in _accessToken for use in the other calls in the collection."
							},
							"response": []
						},
						{
							"name": "Search for Products",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Tests...`);",
											"console.warn(`Code: ${pm.response.code} | Status: ${pm.response.status} | Response time: ${pm.response.responseTime} ms`);",
											"const expectedResponseCodes = [201];",
											"pm.expect(pm.response.code).to.be.oneOf(expectedResponseCodes, \"Response code not in expected range\");",
											"",
											"pm.test('Response is valid and has a JSON body', () => {",
											"    pm.response.to.be.success;",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test('Validate the response and save the product id to a collection variable', () => {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.productsPage).to.exist;",
											"    pm.expect(jsonData.productsPage).to.be.an('object');",
											"    pm.expect(jsonData.productsPage.products).to.exist;",
											"    pm.expect(jsonData.productsPage.products).to.be.an('array');",
											"    pm.expect(jsonData.productsPage.products[0]).to.exist;",
											"    pm.expect(jsonData.productsPage.products[0]).to.be.an('object');",
											"    pm.expect(jsonData.productsPage.products[0]).to.exist;",
											"    pm.expect(jsonData.productsPage.products[0].id).to.be.an('string');",
											"    pm.collectionVariables.set('_productId', jsonData.productsPage.products[0].id);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											"\r",
											"console.log(`${pm.collectionVariables.get('_instanceUrl')} _instanceUrl from collection`);\r",
											"console.log(`${pm.environment.get('orgHostMySalesforceFormat')} orgHostMySalesforceFormat from environment`);\r",
											"\r",
											"// Expected strings in environment variables\r",
											"['orgHostMySalesforceFormat','apiVersion', 'productSearchTerm'].forEach(esiev => {\r",
											"    if(!pm.environment.has(esiev)) {\r",
											"        const msg = `Expected Postman environment variable not found: '${esiev} in environment: '${pm.environment.name}'`;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
											"});\r",
											"\r",
											"// Expected strings in collection variables\r",
											"['_webStoreId', '_token', '_orgId'].forEach(esicv => {\r",
											"    if(!pm.collectionVariables.has(esicv)) {\r",
											"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableUrlEncoding": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"searchTerm\": \"{{productSearchTerm}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{_instanceUrl}}/services/data/v{{apiVersion}}/commerce/webstores/{{_webStoreId}}/search/product-search",
									"host": [
										"{{_instanceUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"commerce",
										"webstores",
										"{{_webStoreId}}",
										"search",
										"product-search"
									]
								},
								"description": "Uses the variable _productSearchTerm_ to search for products in the webstore. Sets the first returned product in the variable _productId_."
							},
							"response": []
						},
						{
							"name": "Get Product Detail",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Tests...`);",
											"console.warn(`Code: ${pm.response.code} | Status: ${pm.response.status} | Response time: ${pm.response.responseTime} ms`);",
											"const expectedResponseCodes = [200];",
											"pm.expect(pm.response.code).to.be.oneOf(expectedResponseCodes, \"Response code not in expected range\");",
											"",
											"pm.test('Response is valid and has a JSON body', () => {",
											"    pm.response.to.be.success;",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test('Validate the response', () => {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.defaultImage).to.exist;",
											"    pm.expect(jsonData.defaultImage).to.be.an('object').with.property('id').to.be.an('string');",
											"",
											"    pm.expect(jsonData.fields).to.exist;",
											"    pm.expect(jsonData.fields).to.be.an('object').with.property('Name').to.be.an('string');",
											"    pm.expect(jsonData.fields).to.be.an('object').with.property('Description').to.be.an('string');",
											"    pm.expect(jsonData.fields).to.be.an('object').with.property('LastModifiedDate').to.match(/\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}Z/);",
											"    ",
											"    pm.expect(jsonData.mediaGroups).to.exist;",
											"    pm.expect(jsonData.mediaGroups).to.be.an('array');",
											"    pm.expect(jsonData.mediaGroups[0]).to.be.an('object').with.property('id').to.be.an('string');",
											"    pm.expect(jsonData.mediaGroups[0].mediaItems[0]).to.be.an('object').with.property('url').to.be.an('string');",
											"    pm.expect(jsonData.mediaGroups[0].mediaItems[0]).to.be.an('object').with.property('mediaType').to.be.an('string');",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											"\r",
											"// Expected strings in environment variables\r",
											"['orgHostMySalesforceFormat','apiVersion'].forEach(esiev => {\r",
											"    if(!pm.environment.has(esiev)) {\r",
											"        const msg = 'Expected Postman environment variable not found: ' + esiev;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
											"});\r",
											"\r",
											"// Expected strings in collection variables\r",
											"['_instanceUrl', '_webStoreId', '_productId', '_token', '_effectiveAccountId'].forEach(esicv => {\r",
											"    if(!pm.collectionVariables.has(esicv)) {\r",
											"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{_instanceUrl}}/services/data/v{{apiVersion}}/commerce/webstores/{{_webStoreId}}/products/{{_productId}}",
									"host": [
										"{{_instanceUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"commerce",
										"webstores",
										"{{_webStoreId}}",
										"products",
										"{{_productId}}"
									],
									"query": [
										{
											"key": "effectiveAccountId",
											"value": "<string>",
											"disabled": true
										},
										{
											"key": "excludeAttributeSetInfo",
											"value": "<boolean>",
											"disabled": true
										},
										{
											"key": "excludeEntitlementDetails",
											"value": "<boolean>",
											"disabled": true
										},
										{
											"key": "excludeFields",
											"value": "<boolean>",
											"disabled": true
										},
										{
											"key": "excludeMedia",
											"value": "<boolean>",
											"disabled": true
										},
										{
											"key": "excludePrimaryProductCategory",
											"value": "<boolean>",
											"disabled": true
										},
										{
											"key": "excludeProductSellingModels",
											"value": "<boolean>",
											"disabled": true
										},
										{
											"key": "excludeQuantityRule",
											"value": "<boolean>",
											"disabled": true
										},
										{
											"key": "excludeVariationInfo",
											"value": "<boolean>",
											"disabled": true
										},
										{
											"key": "fields",
											"value": "[]",
											"disabled": true
										},
										{
											"key": "mediaGroups",
											"value": "[]",
											"disabled": true
										}
									]
								},
								"description": "Fetch standard field data, custom field data, and enrichment data for a single Product, identified by the variable _productId_ that was set by the search products request."
							},
							"response": []
						},
						{
							"name": "Get Product Pricing - Single",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Tests...`);",
											"console.warn(`Code: ${pm.response.code} | Status: ${pm.response.status} | Response time: ${pm.response.responseTime} ms`);",
											"const expectedResponseCodes = [200];",
											"pm.expect(pm.response.code).to.be.oneOf(expectedResponseCodes, \"Response code not in expected range\");",
											"",
											"pm.test('Response is valid and has a JSON body', () => {",
											"    pm.response.to.be.success;",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test('Validate top level data', () => {",
											"    pm.expect(jsonData).to.be.an('object').with.property('currencyIsoCode').to.be.an('string').with.length.greaterThan(2);",
											"    pm.expect(jsonData).to.be.an('object').with.property('listPrice');",
											"    pm.expect(jsonData).to.be.an('object').with.property('pricebookEntryId').to.be.an('string').with.length.greaterThan(0);",
											"    pm.expect(jsonData).to.be.an('object').with.property('productPriceEntries').to.be.an('array').with.length.greaterThan(0);",
											"    pm.expect(jsonData).to.be.an('object').with.property('unitPrice')",
											"    pm.expect(parseFloat(jsonData.listPrice)).to.be.an('number').greaterThan(0);",
											"    pm.expect(parseFloat(jsonData.unitPrice)).to.be.an('number').greaterThan(0);",
											"    pm.expect(jsonData.currencyIsoCode).equals(pm.environment.get('currencyIsoCode'));",
											"});",
											"",
											"pm.test('Validate nested data', () => {",
											"    //console.warn(JSON.stringify(jsonData.productPriceEntries[0]));",
											"    pm.expect(jsonData.productPriceEntries[0]).to.be.an('object').with.property('listPrice');",
											"    pm.expect(jsonData.productPriceEntries[0]).to.be.an('object').with.property('pricebookEntryId').to.be.an('string').with.length.greaterThan(0);",
											"    pm.expect(jsonData.productPriceEntries[0].success).to.be.an('boolean').that.equals(true);",
											"    pm.expect(parseFloat(jsonData.productPriceEntries[0].listPrice)).to.be.an('number').greaterThan(0);",
											"    pm.expect(parseFloat(jsonData.productPriceEntries[0].unitPrice)).to.be.an('number').greaterThan(0);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											"\r",
											"// Expected strings in environment variables\r",
											"['orgHostMySalesforceFormat','apiVersion'].forEach(esiev => {\r",
											"    if(!pm.environment.has(esiev)) {\r",
											"        const msg = 'Expected Postman environment variable not found: ' + esiev;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
											"});\r",
											"\r",
											"// Expected strings in collection variables\r",
											"['_instanceUrl', '_webStoreId', '_productId', '_token', '_effectiveAccountId'].forEach(esicv => {\r",
											"    if(!pm.collectionVariables.has(esicv)) {\r",
											"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{_instanceUrl}}/services/data/v{{apiVersion}}/commerce/webstores/{{_webStoreId}}/pricing/products/{{_productId}}?effectiveAccountId={{_effectiveAccountId}}",
									"host": [
										"{{_instanceUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"commerce",
										"webstores",
										"{{_webStoreId}}",
										"pricing",
										"products",
										"{{_productId}}"
									],
									"query": [
										{
											"key": "effectiveAccountId",
											"value": "{{_effectiveAccountId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Product Pricing - Multiple",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Tests...`);",
											"console.warn(`Code: ${pm.response.code} | Status: ${pm.response.status} | Response time: ${pm.response.responseTime} ms`);",
											"const expectedResponseCodes = [200];",
											"pm.expect(pm.response.code).to.be.oneOf(expectedResponseCodes, \"Response code not in expected range\");",
											"",
											"pm.test('Response is valid and has a JSON body', () => {",
											"    pm.response.to.be.success;",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test('Validate top level data', () => {",
											"    pm.expect(jsonData).to.be.an('object').with.property('currencyIsoCode').to.be.an('string').with.length.greaterThan(2);",
											"    pm.expect(jsonData.success).to.be.an('boolean').that.equals(true);",
											"    pm.expect(jsonData).to.be.an('object').with.property('pricingLineItemResults').to.be.an('array').with.length.greaterThan(1);",
											"    pm.expect(jsonData.currencyIsoCode).equals(pm.environment.get('currencyIsoCode'));",
											"});",
											"",
											"pm.test('Validate pricingLineItemResults', () => {",
											"    pm.expect(jsonData.pricingLineItemResults).to.be.an('array').with.length.greaterThan(1);",
											"    ",
											"    jsonData.pricingLineItemResults.forEach(plir => {",
											"        pm.expect(parseFloat(plir.listPrice)).to.be.an('number').greaterThan(0);",
											"        pm.expect(plir.pricebookEntryId).to.be.an('string').with.length.greaterThan(0);",
											"        pm.expect(plir.productId).to.be.an('string').with.length.greaterThan(0);",
											"        pm.expect(plir.success).to.be.an('boolean').that.equals(true);",
											"        pm.expect(parseFloat(plir.unitPrice)).to.be.an('number').greaterThan(0);",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Pre-request Script...`);",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));",
											"",
											"// Expected strings in environment variables",
											"['orgHostMySalesforceFormat','apiVersion'].forEach(esiev => {",
											"    if(!pm.environment.has(esiev)) {",
											"        const msg = 'Expected Postman environment variable not found: ' + esiev;",
											"        pm.expect.fail(msg);",
											"    }",
											"    pm.expect(pm.environment.get(esiev)).to.exist;",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');",
											"});",
											"",
											"// Expected strings in collection variables",
											"['_instanceUrl', '_webStoreId', '_productId', '_productIds', '_token', '_effectiveAccountId'].forEach(esicv => {",
											"    if(!pm.collectionVariables.has(esicv)) {",
											"        const msg = 'Expected Postman collection variable not found: ' + esicv;",
											"        pm.expect.fail(msg);",
											"    }",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');",
											"});",
											"",
											"const productIds = JSON.parse(pm.collectionVariables.get('_productIds'));",
											"const productIdsJoined = productIds.join(',');",
											"pm.collectionVariables.set('_productIdsJoined', productIdsJoined);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{_instanceUrl}}/services/data/v{{apiVersion}}/commerce/webstores/{{_webStoreId}}/pricing/products?productIds={{_productIdsJoined}}&effectiveAccountId={{_effectiveAccountId}}",
									"host": [
										"{{_instanceUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"commerce",
										"webstores",
										"{{_webStoreId}}",
										"pricing",
										"products"
									],
									"query": [
										{
											"key": "productIds",
											"value": "{{_productIdsJoined}}"
										},
										{
											"key": "effectiveAccountId",
											"value": "{{_effectiveAccountId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Active Cart",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											"\r",
											"pm.collectionVariables.set('_cartStateOrId', 'active');\r",
											"\r",
											"// Expected strings in environment variables\r",
											"['orgHostMySalesforceFormat','apiVersion'].forEach(esiev => {\r",
											"    if(!pm.environment.has(esiev)) {\r",
											"        const msg = 'Expected Postman environment variable not found: ' + esiev;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
											"});\r",
											"\r",
											"// Expected strings in collection variables\r",
											"['_instanceUrl', '_webStoreId', '_productId', '_token', '_effectiveAccountId', '_cartStateOrId'].forEach(esicv => {\r",
											"    if(!pm.collectionVariables.has(esicv)) {\r",
											"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Tests...`);\r",
											"console.warn(`Code: ${pm.response.code} | Status: ${pm.response.status} | Response time: ${pm.response.responseTime} ms`);\r",
											"\r",
											"if(pm.response.code === 400){\r",
											"    pm.expect.fail(\"Buyer cart not clean. Suggested fix: Log in to storefront, empty cart and run this folder again.\");\r",
											"}\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Response is valid and has a JSON body', () => {\r",
											"    pm.response.to.be.success;\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test('Validate the response contains a cart Id and set the collection variables', () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.cartId).to.exist;\r",
											"    pm.expect(jsonData.cartId).to.be.an('string');\r",
											"    pm.collectionVariables.set('_cartStateOrId', jsonData.cartId);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{_instanceUrl}}/services/data/v{{apiVersion}}/commerce/webstores/{{_webStoreId}}/carts/{{_cartStateOrId}}?effectiveAccountId={{_effectiveAccountId}}",
									"host": [
										"{{_instanceUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"commerce",
										"webstores",
										"{{_webStoreId}}",
										"carts",
										"{{_cartStateOrId}}"
									],
									"query": [
										{
											"key": "effectiveAccountId",
											"value": "{{_effectiveAccountId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Active Cart (demonstration purposes)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											"\r",
											"// Expected strings in environment variables\r",
											"['apiVersion'].forEach(esiev => {\r",
											"    if(!pm.environment.has(esiev)) {\r",
											"        const msg = 'Expected Postman environment variable not found: ' + esiev;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
											"});\r",
											"\r",
											"// Expected strings in collection variables\r",
											"['_webStoreId', '_productId', '_token', '_cartStateOrId', '_instanceUrl', '_effectiveAccountId'].forEach(esicv => {\r",
											"    if(!pm.collectionVariables.has(esicv)) {\r",
											"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Tests...`);\r",
											"\r",
											"pm.test('Status code is 204 or 404', () => {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([204, 404]);\r",
											"});\r",
											"\r",
											"pm.collectionVariables.set('_cartStateOrId', undefined);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{_instanceUrl}}/services/data/v{{apiVersion}}/commerce/webstores/{{_webStoreId}}/carts/{{_cartStateOrId}}?effectiveAccountId={{_effectiveAccountId}}",
									"host": [
										"{{_instanceUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"commerce",
										"webstores",
										"{{_webStoreId}}",
										"carts",
										"{{_cartStateOrId}}"
									],
									"query": [
										{
											"key": "effectiveAccountId",
											"value": "{{_effectiveAccountId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Cart (demonstration purposes)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											"\r",
											"// Expected strings in environment variables\r",
											"['orgHostMySalesforceFormat','apiVersion'].forEach(esiev => {\r",
											"    if(!pm.environment.has(esiev)) {\r",
											"        const msg = 'Expected Postman environment variable not found: ' + esiev;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
											"});\r",
											"\r",
											"// Expected strings in collection variables\r",
											"['_webStoreId', '_productId', '_token', '_instanceUrl'].forEach(esicv => {\r",
											"    if(!pm.collectionVariables.has(esicv)) {\r",
											"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Tests...`);\r",
											"\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test('Response is valid and has a JSON body', () => {\r",
											"    pm.response.to.be.success;\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test('Validate the response contains a cart Id and set the collection variables', () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const cartId = jsonData.cartId;\r",
											"    console.log('CART ID: ' + cartId);\r",
											"    pm.expect(jsonData.cartId).to.exist;\r",
											"    pm.expect(jsonData.cartId).to.be.an('string');\r",
											"    pm.collectionVariables.set('_cartStateOrId', jsonData.cartId);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"name\":\"Postman Cart\",\r\n   \"type\":\"Cart\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{_instanceUrl}}/services/data/v{{apiVersion}}/commerce/webstores/{{_webStoreId}}/carts",
									"host": [
										"{{_instanceUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"commerce",
										"webstores",
										"{{_webStoreId}}",
										"carts"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Cart By Id (demonstration purposes)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											"\r",
											"// Expected strings in environment variables\r",
											"['apiVersion'].forEach(esiev => {\r",
											"    if(!pm.environment.has(esiev)) {\r",
											"        const msg = 'Expected Postman environment variable not found: ' + esiev;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
											"});\r",
											"\r",
											"// Expected strings in collection variables\r",
											"['_webStoreId', '_productId', '_token', '_cartStateOrId', '_instanceUrl', '_effectiveAccountId'].forEach(esicv => {\r",
											"    if(!pm.collectionVariables.has(esicv)) {\r",
											"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Tests...`);\r",
											"\r",
											"pm.test('Status code is 204 or 404', () => {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([204, 404]);\r",
											"});\r",
											"\r",
											"pm.collectionVariables.set('_cartStateOrId', undefined);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{_instanceUrl}}/services/data/v{{apiVersion}}/commerce/webstores/{{_webStoreId}}/carts/{{_cartStateOrId}}?effectiveAccountId={{_effectiveAccountId}}",
									"host": [
										"{{_instanceUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"commerce",
										"webstores",
										"{{_webStoreId}}",
										"carts",
										"{{_cartStateOrId}}"
									],
									"query": [
										{
											"key": "effectiveAccountId",
											"value": "{{_effectiveAccountId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Cart Item - Draft",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 204 or 404', () => {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([204, 404]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											"\r",
											"// Expected strings in environment variables\r",
											"['orgHostMySalesforceFormat','apiVersion','productNamesCommaDelimited'].forEach(esiev => {\r",
											"    if(!pm.environment.has(esiev)) {\r",
											"        const msg = 'Expected Postman environment variable not found: ' + esiev;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
											"});\r",
											"\r",
											"// Expected strings in collection variables\r",
											"['_webStoreId', '_productId', '_token', '_instanceUrl', '_cartStateOrId', '_effectiveAccountId', '_cartItemIdForDelete'].forEach(esicv => {\r",
											"    if(!pm.collectionVariables.has(esicv)) {\r",
											"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{_instanceUrl}}/services/data/v{{apiVersion}}/commerce/webstores/{{_webStoreId}}/carts/{{_cartStateOrId}}/cart-items/{{_cartItemIdForRemoval}}?effectiveAccountId={{_effectiveAccountId}}",
									"host": [
										"{{_instanceUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"commerce",
										"webstores",
										"{{_webStoreId}}",
										"carts",
										"{{_cartStateOrId}}",
										"cart-items",
										"{{_cartItemIdForRemoval}}"
									],
									"query": [
										{
											"key": "effectiveAccountId",
											"value": "{{_effectiveAccountId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Item Quantity",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											"\r",
											"// Expected strings in environment variables\r",
											"['orgHostMySalesforceFormat','apiVersion','productNamesCommaDelimited', 'currencyIsoCode'].forEach(esiev => {\r",
											"    if(!pm.environment.has(esiev)) {\r",
											"        const msg = 'Expected Postman environment variable not found: ' + esiev;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
											"});\r",
											"\r",
											"// Expected strings in collection variables\r",
											"['_webStoreId', '_productId', '_token', '_instanceUrl', '_cartStateOrId', '_effectiveAccountId', '_cartItemIdForQuantityUpdate'].forEach(esicv => {\r",
											"    if(!pm.collectionVariables.has(esicv)) {\r",
											"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"console.warn(pm.response.status);\r",
											"\r",
											"pm.test('Response is valid and has a JSON body', () => {\r",
											"     pm.response.to.be.withBody;\r",
											"     pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test('Validate the response and save collection variables', () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    \r",
											"    console.warn(jsonData);\r",
											"\r",
											"    //pm.expect(jsonData.cartItem).to.exist;\r",
											"    /*\r",
											"    pm.expect(jsonData.cartItem).to.be.an('object').with.property('cartItemId').that.is.an('string');\r",
											"    pm.expect(jsonData.cartItem).to.be.an('object').with.property('cartId').that.is.an('string');\r",
											"    pm.expect(jsonData.cartItem).to.be.an('object').with.property('quantity').that.is.an('number');\r",
											"    pm.expect(jsonData.cartItem).equals(5);\r",
											"    pm.expect(jsonData.type).equals('Product');\r",
											"    */\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_token}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"quantity\": \"5\"\r\n}"
								},
								"url": {
									"raw": "{{_instanceUrl}}/services/data/v{{apiVersion}}/commerce/webstores/{{_webStoreId}}/carts/{{_cartStateOrId}}/cart-items/{{_cartItemIdForQuantityUpdate}}?effectiveAccountId={{_effectiveAccountId}}&currencyIsoCode={{currencyIsoCode}}",
									"host": [
										"{{_instanceUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"commerce",
										"webstores",
										"{{_webStoreId}}",
										"carts",
										"{{_cartStateOrId}}",
										"cart-items",
										"{{_cartItemIdForQuantityUpdate}}"
									],
									"query": [
										{
											"key": "effectiveAccountId",
											"value": "{{_effectiveAccountId}}"
										},
										{
											"key": "currencyIsoCode",
											"value": "{{currencyIsoCode}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create a Cart",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"let cartId = jsonData.cartId;",
											"pm.collectionVariables.set('_cartStateOrId', cartId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"name\":\"My Cart\",\n   \"type\":\"Cart\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{_instanceUrl}}/services/data/v{{apiVersion}}/commerce/webstores/{{_webStoreId}}/carts",
									"host": [
										"{{_instanceUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"commerce",
										"webstores",
										"{{_webStoreId}}",
										"carts"
									]
								},
								"description": "Creates a Cart and sets the variable __cartId_."
							},
							"response": []
						},
						{
							"name": "Create a Primary Cart",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"let cartId = jsonData.cartId;",
											"pm.collectionVariables.set('_cartStateOrId', cartId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"name\":\"My Primary Cart\",\n   \"type\":\"Cart\",\n   \"isSecondary\":false\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{_instanceUrl}}/services/data/v{{apiVersion}}/commerce/webstores/{{_webStoreId}}/carts",
									"host": [
										"{{_instanceUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"commerce",
										"webstores",
										"{{_webStoreId}}",
										"carts"
									]
								},
								"description": "Creates a Cart and sets the variable __cartId_."
							},
							"response": []
						},
						{
							"name": "Get Cart Items",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Response is valid and has a JSON body', () => {\r",
											"     pm.response.to.be.success;\r",
											"     pm.response.to.be.withBody;\r",
											"     pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test('Validate the response and save collection variables', () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.cartItems).to.exist;\r",
											"    pm.expect(jsonData.cartItems).to.be.an('array').with.length.greaterThan(0);\r",
											"    \r",
											"    const firstCartItem = jsonData.cartItems[0].cartItem;\r",
											"    pm.expect(firstCartItem).to.be.an('object').with.property('cartItemId').that.is.an('string');\r",
											"    \r",
											"    const secondCartItem = jsonData.cartItems[1].cartItem;\r",
											"    pm.expect(secondCartItem).to.be.an('object').with.property('cartItemId').that.is.an('string');\r",
											"    \r",
											"    pm.expect(firstCartItem.cartId).equals(secondCartItem.cartId);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											"\r",
											"// Expected strings in environment variables\r",
											"['orgHostMySalesforceFormat','apiVersion','productNamesCommaDelimited'].forEach(esiev => {\r",
											"    if(!pm.environment.has(esiev)) {\r",
											"        const msg = 'Expected Postman environment variable not found: ' + esiev;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
											"});\r",
											"\r",
											"// Expected strings in collection variables\r",
											"['_webStoreId', '_productId', '_token', '_instanceUrl', '_cartStateOrId', '_effectiveAccountId'].forEach(esicv => {\r",
											"    if(!pm.collectionVariables.has(esicv)) {\r",
											"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{_instanceUrl}}/services/data/v{{apiVersion}}/commerce/webstores/{{_webStoreId}}/carts/{{_cartStateOrId}}/cart-items?effectiveAccountId={{_effectiveAccountId}}",
									"host": [
										"{{_instanceUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"commerce",
										"webstores",
										"{{_webStoreId}}",
										"carts",
										"{{_cartStateOrId}}",
										"cart-items"
									],
									"query": [
										{
											"key": "effectiveAccountId",
											"value": "{{_effectiveAccountId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Carts by Effective Account Id",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											"\r",
											"pm.collectionVariables.set('_cartStateOrId', 'active');\r",
											"\r",
											"// Expected strings in environment variables\r",
											"['orgHostMySalesforceFormat','apiVersion'].forEach(esiev => {\r",
											"    if(!pm.environment.has(esiev)) {\r",
											"        const msg = 'Expected Postman environment variable not found: ' + esiev;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
											"});\r",
											"\r",
											"// Expected strings in collection variables\r",
											"['_instanceUrl', '_webStoreId', '_productId', '_token', '_effectiveAccountId', '_cartStateOrId'].forEach(esicv => {\r",
											"    if(!pm.collectionVariables.has(esicv)) {\r",
											"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Tests...`);\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Response is valid and has a JSON body', () => {\r",
											"    pm.response.to.be.success;\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test('Validate the response contains a cart Id and set the collection variables', () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    console.warn(jsonData);\r",
											"    pm.expect(jsonData.cartId).to.exist;\r",
											"    pm.expect(jsonData.cartId).to.be.an('string');\r",
											"    pm.collectionVariables.set('_cartStateOrId', jsonData.cartId);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"name\":\"My Cart\",\r\n   \"type\":\"Cart\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{_instanceUrl}}/services/data/v{{apiVersion}}/commerce/webstores/{{_webStoreId}}/carts",
									"host": [
										"{{_instanceUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"commerce",
										"webstores",
										"{{_webStoreId}}",
										"carts"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check Cart is empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Tests...`);\r",
											"console.warn(`Code: ${pm.response.code} | Status: ${pm.response.status} | Response time: ${pm.response.responseTime} ms`);\r",
											"const expectedResponseCodes = [200];\r",
											"pm.expect(pm.response.code).to.be.oneOf(expectedResponseCodes, \"Response code not in expected range\");\r",
											"\r",
											"pm.test('Response is valid and has a JSON body', () => {\r",
											"     pm.response.to.be.success;\r",
											"     pm.response.to.be.withBody;\r",
											"     pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"\r",
											"pm.test('Cart is empty', () => {\r",
											"    pm.expect(jsonData.cartItems).to.exist;\r",
											"    pm.expect(jsonData.cartItems).to.be.empty;\r",
											"    pm.expect(pm.collectionVariables.has('_cartItems').valueOf(false));\r",
											"});\r",
											"\r",
											"console.log('Double-check Cart item count: ' + jsonData.cartItems.length);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											"\r",
											"// Expected strings in environment variables\r",
											"['orgHostMySalesforceFormat','apiVersion','productNamesCommaDelimited'].forEach(esiev => {\r",
											"    if(!pm.environment.has(esiev)) {\r",
											"        const msg = 'Expected Postman environment variable not found: ' + esiev;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
											"});\r",
											"\r",
											"// Expected strings in collection variables\r",
											"['_webStoreId', '_productId', '_token', '_instanceUrl', '_cartStateOrId', '_effectiveAccountId'].forEach(esicv => {\r",
											"    if(!pm.collectionVariables.has(esicv)) {\r",
											"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{_instanceUrl}}/services/data/v{{apiVersion}}/commerce/webstores/{{_webStoreId}}/carts/{{_cartStateOrId}}/cart-items?effectiveAccountId={{_effectiveAccountId}}",
									"host": [
										"{{_instanceUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"commerce",
										"webstores",
										"{{_webStoreId}}",
										"carts",
										"{{_cartStateOrId}}",
										"cart-items"
									],
									"query": [
										{
											"key": "effectiveAccountId",
											"value": "{{_effectiveAccountId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Remove Cart Items (sequenced recursively)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
											"\r",
											"// Expected strings in environment variables\r",
											"['orgHostMySalesforceFormat','apiVersion'].forEach(esiev => {\r",
											"    if(!pm.environment.has(esiev)) {\r",
											"        const msg = 'Expected Postman environment variable not found: ' + esiev;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
											"});\r",
											"\r",
											"// Expected strings in collection variables\r",
											"['_instanceUrl', '_webStoreId', '_productId', '_token', '_effectiveAccountId', '_cartStateOrId'].forEach(esicv => {\r",
											"    if(!pm.collectionVariables.has(esicv)) {\r",
											"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
											"});\r",
											"\r",
											"// Expected arrays in collection variables\r",
											"['_cartItems'].forEach(eaicv => {\r",
											"    if(!pm.collectionVariables.has(eaicv)) {\r",
											"        const msg = 'Expected Postman collection array variable not found: ' + eaicv;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.collectionVariables.get(eaicv)).to.exist;\r",
											"    pm.expect(pm.collectionVariables.get(eaicv)).to.be.an('array');\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Tests...`);\r",
											"console.warn(`Code: ${pm.response.code} | Status: ${pm.response.status} | Response time: ${pm.response.responseTime} ms`);\r",
											"const expectedResponseCodes = [204];\r",
											"\r",
											"const instanceUrl = pm.collectionVariables.get('_instanceUrl');\r",
											"const apiVersion = pm.environment.get('apiVersion');\r",
											"const webStoreId = pm.collectionVariables.get('_webStoreId');\r",
											"const cartStateOrId = pm.collectionVariables.get('_cartStateOrId');\r",
											"const effectiveAccountId = pm.collectionVariables.get('_effectiveAccountId');\r",
											"const token = pm.collectionVariables.get('_token');\r",
											"const cartItems = pm.collectionVariables.get('_cartItems');\r",
											"\r",
											"// Put together the Url which will be called in a loop\r",
											"let renderedUrl = `${instanceUrl}`;\r",
											"renderedUrl += `/services/data/v${apiVersion}`;\r",
											"renderedUrl += `/commerce/webstores/${webStoreId}`;\r",
											"renderedUrl += `/carts/${cartStateOrId}`;\r",
											"renderedUrl += `/cart-items/{cartItemId}/?effectiveAccountId=${effectiveAccountId}`;\r",
											"\r",
											"// Loop the cart items and build an array of requests\r",
											"let deleteRequests = [];\r",
											"\r",
											"cartItems.forEach(ci => {\r",
											"    let cartItemId = ci.cartItem.cartItemId;\r",
											"    let itemUrl = renderedUrl.replace('{cartItemId}', cartItemId);\r",
											"    \r",
											"    // Assemble request and headers for the item's URL\r",
											"\r",
											"    const header = {\r",
											"        'Cache-Control':'no-cache',\r",
											"        'Accept-Encoding':'gzip, deflate, br',\r",
											"        'Connection':'keep-alive',\r",
											"        'Content-Type': 'application/json',\r",
											"        'Authorization': 'Bearer ' + token\r",
											"    }\r",
											"    \r",
											"    const deleteRequest = {\r",
											"        \"url\": itemUrl,\r",
											"        \"header\": header,\r",
											"        \"method\": 'DELETE',\r",
											"        \"body\": {},\r",
											"    };\r",
											"    \r",
											"    deleteRequests.push(deleteRequest);\r",
											"});\r",
											"\r",
											"function sequenceRequestsViaRecursion(requests) {\r",
											"    if(requests.length > 0) {\r",
											"        console.info(`Requesting: '${requests[0].url}'`);\r",
											"        pm.sendRequest(requests[0], function (error, response)  {\r",
											"            requests.splice(0, 1);\r",
											"            if(error != null) {\r",
											"                console.error(error);\r",
											"            }\r",
											"            console.warn(`Code: ${response.code} | Status: ${response.status} | Response time: ${response.responseTime} ms`);\r",
											"            pm.test('Check that Cart has first item and set collection variable for Update operation', () =>{\r",
											"                pm.expect(response.code).to.be.oneOf(expectedResponseCodes);\r",
											"            });\r",
											"            sequenceRequestsViaRecursion(requests);\r",
											"        });\r",
											"    }\r",
											"}\r",
											"\r",
											"// In Postman we need to nest the calls to make them sequentially\r",
											"console.warn(`Time for sequenceRequestsViaRecursion with ${deleteRequests.length} requests... Contact!`);\r",
											"sequenceRequestsViaRecursion(deleteRequests);\r",
											"// Sync up the collection variable with the work done\r",
											"pm.collectionVariables.unset('_cartItems');\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "postman-echo.com/get",
									"host": [
										"postman-echo",
										"com"
									],
									"path": [
										"get"
									]
								}
							},
							"response": []
						}
					],
					"description": "These bricks are meant to be used for Buyer Login Scenarios. You can expand on these as needed to build out your request chains. This is where you can do things like:\n\n- Log in as a Buyer\n- Search for Products\n- Get Product Pricing\n- Interact with Carts and Cart Items\n    \n\nIt's not a perfect world, but each brick checks for a set of expected collection values needed to make the request so you can chain them together with minimal debugging required."
				},
				{
					"name": "C. Bricks (oAuth 2.0)",
					"item": [
						{
							"name": "Set your oAuth 2.0 Token in Authorization tab",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
											"console.log('Checking oAuth has been set up...');\r",
											"\r",
											"const checkOpenAuthToken = (request) => {\r",
											"    const isTokenMissing = request.auth === undefined\r",
											"    || request.auth.oauth2 === undefined\r",
											"    || !request.auth.oauth2.has('accessToken')\r",
											"    || request.auth.oauth2.get('accessToken') === undefined\r",
											"    || request.auth.oauth2.get('accessToken') === null\r",
											"    || request.auth.oauth2.get('accessToken').length === 0;\r",
											"\r",
											"    if(isTokenMissing) {\r",
											"        const msg = 'Steps to fix issue \"Expected oAuth 2.0 token not found\":\\r\\n' + \r",
											"        '1. Check in Setup -> OAuth and OpenID Connect Settings -> Allow OAuth Username-Password Flows: Enabled \\r\\n' +\r",
											"        '2. Click on the Request with a name like \"Set your oAuth 2.0 Token in Authorization tab\"\\r\\n' +\r",
											"        '3. Click the \"Authorization\" tab\\r\\n' + \r",
											"        '4. Click the \"Get New Access Token\" button\\r\\n' +\r",
											"        '5. Click the \"Proceed\" button\\r\\n' + \r",
											"        '6. Click the \"Use Token\" button\\r\\n' +\r",
											"        '7. Retry your request';\r",
											"        console.error(msg);\r",
											"        pm.expect.fail('Expected oAuth 2.0 token not found. See steps above for a fix.');\r",
											"    }\r",
											"    else\r",
											"    {\r",
											"        const tokenAgeInMinutes = Math.floor(Math.floor((new Date().getTime() - pm.request.auth.oauth2.get('timestamp')) / 1000) / 60);\r",
											"        console.warn(`Token age: ${tokenAgeInMinutes} minutes`);\r",
											"        pm.collectionVariables.set('_token', pm.request.auth.oauth2.get('accessToken'));\r",
											"    }\r",
											"};\r",
											"\r",
											"checkOpenAuthToken(pm.request);\r",
											"\r",
											"pm.test('oAuth 2.0 Assertions', () => {\r",
											"    pm.expect(pm.request.auth).to.exist;\r",
											"    pm.expect(pm.request.auth).to.be.an('object');\r",
											"    pm.expect(pm.request.auth.oauth2).to.exist;\r",
											"    pm.expect(pm.request.auth.oauth2).to.be.an('object');\r",
											"    pm.expect(pm.request.auth.oauth2.has('accessToken')).to.be.true;\r",
											"    pm.expect(pm.request.auth.oauth2.get('accessToken')).to.exist;\r",
											"    pm.expect(pm.request.auth.oauth2.get('accessToken')).to.be.an('string').with.length.greaterThan(0);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Tests...`);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "oauth2",
									"oauth2": [
										{
											"key": "client_authentication",
											"value": "body",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{orgAdminPassword}}{{orgAdminSecurityToken}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{orgAdminUsername}}",
											"type": "string"
										},
										{
											"key": "clientSecret",
											"value": "{{connectedAppConsumerSecret}}",
											"type": "string"
										},
										{
											"key": "clientId",
											"value": "{{connectedAppConsumerKey}}",
											"type": "string"
										},
										{
											"key": "accessTokenUrl",
											"value": "{{orgLoginUrl}}/services/oauth2/token",
											"type": "string"
										},
										{
											"key": "grant_type",
											"value": "password_credentials",
											"type": "string"
										},
										{
											"key": "tokenName",
											"value": "SF Token",
											"type": "string"
										},
										{
											"key": "addTokenTo",
											"value": "header",
											"type": "string"
										},
										{
											"key": "useBrowser",
											"value": true,
											"type": "boolean"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "postman-echo.com/get",
									"host": [
										"postman-echo",
										"com"
									],
									"path": [
										"get"
									]
								}
							},
							"response": []
						},
						{
							"name": "Search for Products (oAuth 2.0)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Tests...`);",
											"console.warn(`Code: ${pm.response.code} | Status: ${pm.response.status} | Response time: ${pm.response.responseTime} ms`);",
											"",
											"const validateSession = (jsonData) => {",
											"    if(jsonData[0] !== undefined && jsonData[0].message !== undefined && jsonData[0].errorCode !== undefined &&",
											"        (jsonData[0].message.toUpperCase() === 'SESSION EXPIRED OR INVALID' || jsonData[0].errorCode.toUpperCase() === 'INVALID_SESSION_ID')) {",
											"        const msg = 'Steps to fix issue \"Expected oAuth 2.0 token found but likely expired\":\\r\\n' + ",
											"        '1. Check in Setup -> OAuth and OpenID Connect Settings -> Allow OAuth Username-Password Flows: Enabled \\r\\n' +",
											"        '2. Click on the Request with a name like \"Set your oAuth 2.0 Token in Authorization tab\"\\r\\n' +",
											"        '3. Click the \"Authorization\" tab\\r\\n' + ",
											"        '4. Click the \"Get New Access Token\" button\\r\\n' +",
											"        '5. Click the \"Proceed\" button\\r\\n' + ",
											"        '6. Click the \"Use Token\" button\\r\\n' +",
											"        '7. Retry your request';",
											"        console.error(msg);",
											"        pm.expect.fail('oAuth 2.0 token found but likely expired. See steps above for a fix.');",
											"    }",
											"};",
											"",
											"const jsonData = pm.response.json();",
											"validateSession(jsonData);",
											"",
											"const expectedResponseCodes = [201];",
											"pm.expect(pm.response.code).to.be.oneOf(expectedResponseCodes, \"Response code not in expected range\");",
											"",
											"pm.test('Response is valid and has a JSON body', () => {",
											"    pm.response.to.be.success;",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test('Validate the response and save the product id to a collection variable', () => {",
											"    pm.expect(jsonData.productsPage).to.exist;",
											"    pm.expect(jsonData.productsPage).to.be.an('object');",
											"    pm.expect(jsonData.productsPage.products).to.exist;",
											"    pm.expect(jsonData.productsPage.products).to.be.an('array');",
											"    pm.expect(jsonData.productsPage.products[0]).to.exist;",
											"    pm.expect(jsonData.productsPage.products[0]).to.be.an('object');",
											"    pm.expect(jsonData.productsPage.products[0]).to.exist;",
											"    pm.expect(jsonData.productsPage.products[0].id).to.be.an('string');",
											"    pm.collectionVariables.set('_productId', jsonData.productsPage.products[0].id);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											"\r",
											"// Expected strings in the environment\r",
											"['orgHostMySalesforceFormat','apiVersion', 'productSearchTerm'].forEach(esiev => {\r",
											"    if(!pm.environment.has(esiev)) {\r",
											"        const msg = `Expected Postman environment variable not found: '${esiev} in environment: '${pm.environment.name}'`;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
											"});\r",
											"\r",
											"// Expected strings in the collection variables\r",
											"['_webStoreId', '_token', '_orgId'].forEach(esicv => {\r",
											"    if(pm.collectionVariables.get(esicv) === undefined) {\r",
											"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableUrlEncoding": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"searchTerm\": \"{{productSearchTerm}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{orgHostMySalesforceFormat}}/services/data/v{{apiVersion}}/commerce/webstores/{{_webStoreId}}/search/product-search",
									"host": [
										"{{orgHostMySalesforceFormat}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"commerce",
										"webstores",
										"{{_webStoreId}}",
										"search",
										"product-search"
									]
								},
								"description": "Uses the variable _productSearchTerm_ to search for products in the webstore. Sets the first returned product in the variable _productId_."
							},
							"response": []
						},
						{
							"name": "Get Product Detail (oAuth 2.0)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Tests...`);",
											"console.warn(`Code: ${pm.response.code} | Status: ${pm.response.status} | Response time: ${pm.response.responseTime} ms`);",
											"",
											"const validateSession = (jsonData) => {",
											"    if(jsonData[0] !== undefined && jsonData[0].message !== undefined && jsonData[0].errorCode !== undefined &&",
											"        (jsonData[0].message.toUpperCase() === 'SESSION EXPIRED OR INVALID' || jsonData[0].errorCode.toUpperCase() === 'INVALID_SESSION_ID')) {",
											"        const msg = 'Steps to fix issue \"Expected oAuth 2.0 token found but likely expired\":\\r\\n' + ",
											"        '1. Check in Setup -> OAuth and OpenID Connect Settings -> Allow OAuth Username-Password Flows: Enabled \\r\\n' +",
											"        '2. Click on the Request with a name like \"Set your oAuth 2.0 Token in Authorization tab\"\\r\\n' +",
											"        '3. Click the \"Authorization\" tab\\r\\n' + ",
											"        '4. Click the \"Get New Access Token\" button\\r\\n' +",
											"        '5. Click the \"Proceed\" button\\r\\n' + ",
											"        '6. Click the \"Use Token\" button\\r\\n' +",
											"        '7. Retry your request';",
											"        console.error(msg);",
											"        pm.expect.fail('oAuth 2.0 token found but likely expired. See steps above for a fix.');",
											"    }",
											"};",
											"",
											"const jsonData = pm.response.json();",
											"validateSession(jsonData);",
											"",
											"const expectedResponseCodes = [200];",
											"pm.expect(pm.response.code).to.be.oneOf(expectedResponseCodes, \"Response code not in expected range\");",
											"",
											"pm.test('Response is valid and has a JSON body', () => {",
											"    pm.response.to.be.success;",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test('Validate the response', () => {",
											"    pm.expect(jsonData.defaultImage).to.exist;",
											"    pm.expect(jsonData.defaultImage).to.be.an('object').with.property('id').to.be.an('string');",
											"",
											"    pm.expect(jsonData.fields).to.exist;",
											"    pm.expect(jsonData.fields).to.be.an('object').with.property('Name').to.be.an('string');",
											"    pm.expect(jsonData.fields).to.be.an('object').with.property('Description').to.be.an('string');",
											"    pm.expect(jsonData.fields).to.be.an('object').with.property('LastModifiedDate').to.match(/\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}Z/);",
											"    ",
											"    pm.expect(jsonData.mediaGroups).to.exist;",
											"    pm.expect(jsonData.mediaGroups).to.be.an('array');",
											"    pm.expect(jsonData.mediaGroups[0]).to.be.an('object').with.property('id').to.be.an('string');",
											"    pm.expect(jsonData.mediaGroups[0].mediaItems[0]).to.be.an('object').with.property('url').to.be.an('string');",
											"    pm.expect(jsonData.mediaGroups[0].mediaItems[0]).to.be.an('object').with.property('mediaType').to.be.an('string');",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											"\r",
											"// Expected strings in environment variables\r",
											"['orgHostMySalesforceFormat','apiVersion'].forEach(esiev => {\r",
											"    if(!pm.environment.has(esiev)) {\r",
											"        const msg = 'Expected Postman environment variable not found: ' + esiev;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
											"});\r",
											"\r",
											"// Expected strings in collection variables\r",
											"['_instanceUrl', '_webStoreId', '_productId', '_token', '_effectiveAccountId'].forEach(esicv => {\r",
											"    if(!pm.collectionVariables.has(esicv)) {\r",
											"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{_instanceUrl}}/services/data/v{{apiVersion}}/commerce/webstores/{{_webStoreId}}/products/{{_productId}}",
									"host": [
										"{{_instanceUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"commerce",
										"webstores",
										"{{_webStoreId}}",
										"products",
										"{{_productId}}"
									],
									"query": [
										{
											"key": "effectiveAccountId",
											"value": "<string>",
											"disabled": true
										},
										{
											"key": "excludeAttributeSetInfo",
											"value": "<boolean>",
											"disabled": true
										},
										{
											"key": "excludeEntitlementDetails",
											"value": "<boolean>",
											"disabled": true
										},
										{
											"key": "excludeFields",
											"value": "<boolean>",
											"disabled": true
										},
										{
											"key": "excludeMedia",
											"value": "<boolean>",
											"disabled": true
										},
										{
											"key": "excludePrimaryProductCategory",
											"value": "<boolean>",
											"disabled": true
										},
										{
											"key": "excludeProductSellingModels",
											"value": "<boolean>",
											"disabled": true
										},
										{
											"key": "excludeQuantityRule",
											"value": "<boolean>",
											"disabled": true
										},
										{
											"key": "excludeVariationInfo",
											"value": "<boolean>",
											"disabled": true
										},
										{
											"key": "fields",
											"value": "[]",
											"disabled": true
										},
										{
											"key": "mediaGroups",
											"value": "[]",
											"disabled": true
										}
									]
								},
								"description": "Fetch standard field data, custom field data, and enrichment data for a single Product, identified by the variable _productId_ that was set by the search products request."
							},
							"response": []
						},
						{
							"name": "Get Product Pricing - Single (oAuth 2.0)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Tests...`);",
											"console.warn(`Code: ${pm.response.code} | Status: ${pm.response.status} | Response time: ${pm.response.responseTime} ms`);",
											"",
											"const validateSession = (jsonData) => {",
											"    if(jsonData[0] !== undefined && jsonData[0].message !== undefined && jsonData[0].errorCode !== undefined &&",
											"        (jsonData[0].message.toUpperCase() === 'SESSION EXPIRED OR INVALID' || jsonData[0].errorCode.toUpperCase() === 'INVALID_SESSION_ID')) {",
											"        const msg = 'Steps to fix issue \"Expected oAuth 2.0 token found but likely expired\":\\r\\n' + ",
											"        '1. Check in Setup -> OAuth and OpenID Connect Settings -> Allow OAuth Username-Password Flows: Enabled \\r\\n' +",
											"        '2. Click on the Request with a name like \"Set your oAuth 2.0 Token in Authorization tab\"\\r\\n' +",
											"        '3. Click the \"Authorization\" tab\\r\\n' + ",
											"        '4. Click the \"Get New Access Token\" button\\r\\n' +",
											"        '5. Click the \"Proceed\" button\\r\\n' + ",
											"        '6. Click the \"Use Token\" button\\r\\n' +",
											"        '7. Retry your request';",
											"        console.error(msg);",
											"        pm.expect.fail('oAuth 2.0 token found but likely expired. See steps above for a fix.');",
											"    }",
											"};",
											"",
											"const jsonData = pm.response.json();",
											"validateSession(jsonData);",
											"",
											"const expectedResponseCodes = [200];",
											"pm.expect(pm.response.code).to.be.oneOf(expectedResponseCodes, \"Response code not in expected range\");",
											" ",
											"pm.test('Response is valid and has a JSON body', () => {",
											"    pm.response.to.be.success;",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test('Validate top level data', () => {",
											"    pm.expect(jsonData).to.be.an('object').with.property('currencyIsoCode').to.be.an('string').with.length.greaterThan(2);",
											"    pm.expect(jsonData).to.be.an('object').with.property('listPrice');",
											"    pm.expect(jsonData).to.be.an('object').with.property('pricebookEntryId').to.be.an('string').with.length.greaterThan(0);",
											"    pm.expect(jsonData).to.be.an('object').with.property('productPriceEntries').to.be.an('array').with.length.greaterThan(0);",
											"    pm.expect(jsonData).to.be.an('object').with.property('unitPrice')",
											"    pm.expect(parseFloat(jsonData.listPrice)).to.be.an('number').greaterThan(0);",
											"    pm.expect(parseFloat(jsonData.unitPrice)).to.be.an('number').greaterThan(0);",
											"    pm.expect(jsonData.currencyIsoCode).equals(pm.environment.get('currencyIsoCode'));",
											"});",
											"",
											"pm.test('Validate nested data', () => {",
											"    //console.warn(JSON.stringify(jsonData.productPriceEntries[0]));",
											"    pm.expect(jsonData.productPriceEntries[0]).to.be.an('object').with.property('listPrice');",
											"    pm.expect(jsonData.productPriceEntries[0]).to.be.an('object').with.property('pricebookEntryId').to.be.an('string').with.length.greaterThan(0);",
											"    pm.expect(jsonData.productPriceEntries[0].success).to.be.an('boolean').that.equals(true);",
											"    pm.expect(parseFloat(jsonData.productPriceEntries[0].listPrice)).to.be.an('number').greaterThan(0);",
											"    pm.expect(parseFloat(jsonData.productPriceEntries[0].unitPrice)).to.be.an('number').greaterThan(0);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											"\r",
											"// Expected strings in environment variables\r",
											"['orgHostMySalesforceFormat','apiVersion'].forEach(esiev => {\r",
											"    if(!pm.environment.has(esiev)) {\r",
											"        const msg = 'Expected Postman environment variable not found: ' + esiev;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
											"});\r",
											"\r",
											"// Expected strings in collection variables\r",
											"['_instanceUrl', '_webStoreId', '_productId', '_token', '_effectiveAccountId'].forEach(esicv => {\r",
											"    if(!pm.collectionVariables.has(esicv)) {\r",
											"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{_instanceUrl}}/services/data/v{{apiVersion}}/commerce/webstores/{{_webStoreId}}/pricing/products/{{_productId}}?effectiveAccountId={{_effectiveAccountId}}",
									"host": [
										"{{_instanceUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"commerce",
										"webstores",
										"{{_webStoreId}}",
										"pricing",
										"products",
										"{{_productId}}"
									],
									"query": [
										{
											"key": "effectiveAccountId",
											"value": "{{_effectiveAccountId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Product Pricing - Multiple (oAuth 2.0)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Tests...`);",
											"console.warn(`Code: ${pm.response.code} | Status: ${pm.response.status} | Response time: ${pm.response.responseTime} ms`);",
											"",
											"const validateSession = (jsonData) => {",
											"    if(jsonData[0] !== undefined && jsonData[0].message !== undefined && jsonData[0].errorCode !== undefined &&",
											"        (jsonData[0].message.toUpperCase() === 'SESSION EXPIRED OR INVALID' || jsonData[0].errorCode.toUpperCase() === 'INVALID_SESSION_ID')) {",
											"        const msg = 'Steps to fix issue \"Expected oAuth 2.0 token found but likely expired\":\\r\\n' + ",
											"        '1. Check in Setup -> OAuth and OpenID Connect Settings -> Allow OAuth Username-Password Flows: Enabled \\r\\n' +",
											"        '2. Click on the Request with a name like \"Set your oAuth 2.0 Token in Authorization tab\"\\r\\n' +",
											"        '3. Click the \"Authorization\" tab\\r\\n' + ",
											"        '4. Click the \"Get New Access Token\" button\\r\\n' +",
											"        '5. Click the \"Proceed\" button\\r\\n' + ",
											"        '6. Click the \"Use Token\" button\\r\\n' +",
											"        '7. Retry your request';",
											"        console.error(msg);",
											"        pm.expect.fail('oAuth 2.0 token found but likely expired. See steps above for a fix.');",
											"    }",
											"};",
											"",
											"const jsonData = pm.response.json();",
											"validateSession(jsonData);",
											"",
											"const expectedResponseCodes = [200];",
											"pm.expect(pm.response.code).to.be.oneOf(expectedResponseCodes, \"Response code not in expected range\");",
											" ",
											"pm.test('Response is valid and has a JSON body', () => {",
											"    pm.response.to.be.success;",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test('Validate top level data', () => {",
											"    pm.expect(jsonData).to.be.an('object').with.property('currencyIsoCode').to.be.an('string').with.length.greaterThan(2);",
											"    pm.expect(jsonData.success).to.be.an('boolean').that.equals(true);",
											"    pm.expect(jsonData).to.be.an('object').with.property('pricingLineItemResults').to.be.an('array').with.length.greaterThan(1);",
											"    pm.expect(jsonData.currencyIsoCode).equals(pm.environment.get('currencyIsoCode'));",
											"});",
											"",
											"pm.test('Validate pricingLineItemResults', () => {",
											"    pm.expect(jsonData.pricingLineItemResults).to.be.an('array').with.length.greaterThan(1);",
											"    ",
											"    jsonData.pricingLineItemResults.forEach(plir => {",
											"        pm.expect(parseFloat(plir.listPrice)).to.be.an('number').greaterThan(0);",
											"        pm.expect(plir.pricebookEntryId).to.be.an('string').with.length.greaterThan(0);",
											"        pm.expect(plir.productId).to.be.an('string').with.length.greaterThan(0);",
											"        pm.expect(plir.success).to.be.an('boolean').that.equals(true);",
											"        pm.expect(parseFloat(plir.unitPrice)).to.be.an('number').greaterThan(0);",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Pre-request Script...`);",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));",
											"",
											"// Expected strings in environment variables",
											"['orgHostMySalesforceFormat','apiVersion'].forEach(esiev => {",
											"    if(!pm.environment.has(esiev)) {",
											"        const msg = 'Expected Postman environment variable not found: ' + esiev;",
											"        pm.expect.fail(msg);",
											"    }",
											"    pm.expect(pm.environment.get(esiev)).to.exist;",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');",
											"});",
											"",
											"// Expected strings in collection variables",
											"['_instanceUrl', '_webStoreId', '_productId', '_productIds', '_token', '_effectiveAccountId'].forEach(esicv => {",
											"    if(!pm.collectionVariables.has(esicv)) {",
											"        const msg = 'Expected Postman collection variable not found: ' + esicv;",
											"        pm.expect.fail(msg);",
											"    }",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');",
											"});",
											"",
											"const productIds = JSON.parse(pm.collectionVariables.get('_productIds'));",
											"const productIdsJoined = productIds.join(',');",
											"pm.collectionVariables.set('_productIdsJoined', productIdsJoined);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{_instanceUrl}}/services/data/v{{apiVersion}}/commerce/webstores/{{_webStoreId}}/pricing/products?productIds={{_productIdsJoined}}&effectiveAccountId={{_effectiveAccountId}}",
									"host": [
										"{{_instanceUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"commerce",
										"webstores",
										"{{_webStoreId}}",
										"pricing",
										"products"
									],
									"query": [
										{
											"key": "productIds",
											"value": "{{_productIdsJoined}}"
										},
										{
											"key": "effectiveAccountId",
											"value": "{{_effectiveAccountId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Active Cart (oAuth 2.0)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											"\r",
											"pm.collectionVariables.set('_cartStateOrId', 'active');\r",
											"\r",
											"// Expected strings in environment variables\r",
											"['orgHostMySalesforceFormat','apiVersion'].forEach(esiev => {\r",
											"    if(!pm.environment.has(esiev)) {\r",
											"        const msg = 'Expected Postman environment variable not found: ' + esiev;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
											"});\r",
											"\r",
											"// Expected strings in collection variables\r",
											"['_instanceUrl', '_webStoreId', '_productId', '_token', '_effectiveAccountId', '_cartStateOrId'].forEach(esicv => {\r",
											"    if(!pm.collectionVariables.has(esicv)) {\r",
											"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Tests...`);\r",
											"console.warn(`Code: ${pm.response.code} | Status: ${pm.response.status} | Response time: ${pm.response.responseTime} ms`);\r",
											"\r",
											"const validateSession = (jsonData) => {\r",
											"    if(jsonData[0] !== undefined && jsonData[0].message !== undefined && jsonData[0].errorCode !== undefined &&\r",
											"        (jsonData[0].message.toUpperCase() === 'SESSION EXPIRED OR INVALID' || jsonData[0].errorCode.toUpperCase() === 'INVALID_SESSION_ID')) {\r",
											"        const msg = 'Steps to fix issue \"Expected oAuth 2.0 token found but likely expired\":\\r\\n' + \r",
											"        '1. Check in Setup -> OAuth and OpenID Connect Settings -> Allow OAuth Username-Password Flows: Enabled \\r\\n' +\r",
											"        '2. Click on the Request with a name like \"Set your oAuth 2.0 Token in Authorization tab\"\\r\\n' +\r",
											"        '3. Click the \"Authorization\" tab\\r\\n' + \r",
											"        '4. Click the \"Get New Access Token\" button\\r\\n' +\r",
											"        '5. Click the \"Proceed\" button\\r\\n' + \r",
											"        '6. Click the \"Use Token\" button\\r\\n' +\r",
											"        '7. Retry your request';\r",
											"        console.error(msg);\r",
											"        pm.expect.fail('oAuth 2.0 token found but likely expired. See steps above for a fix.');\r",
											"    }\r",
											"};\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"validateSession(jsonData);\r",
											"\r",
											"const expectedResponseCodes = [200];\r",
											"pm.expect(pm.response.code).to.be.oneOf(expectedResponseCodes, \"Response code not in expected range\");\r",
											"\r",
											"if(pm.response.code === 400){\r",
											"    pm.expect.fail(\"Buyer cart not clean. Suggested fix: Log in to storefront, empty cart and run this folder again.\");\r",
											"}\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Response is valid and has a JSON body', () => {\r",
											"    pm.response.to.be.success;\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test('Validate the response contains a cart Id and set the collection variables', () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.cartId).to.exist;\r",
											"    pm.expect(jsonData.cartId).to.be.an('string');\r",
											"    pm.collectionVariables.set('_cartStateOrId', jsonData.cartId);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{_instanceUrl}}/services/data/v{{apiVersion}}/commerce/webstores/{{_webStoreId}}/carts/{{_cartStateOrId}}?effectiveAccountId={{_effectiveAccountId}}",
									"host": [
										"{{_instanceUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"commerce",
										"webstores",
										"{{_webStoreId}}",
										"carts",
										"{{_cartStateOrId}}"
									],
									"query": [
										{
											"key": "effectiveAccountId",
											"value": "{{_effectiveAccountId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Active Cart (oAuth 2.0)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											"\r",
											"// Expected strings in environment variables\r",
											"['apiVersion'].forEach(esiev => {\r",
											"    if(!pm.environment.has(esiev)) {\r",
											"        const msg = 'Expected Postman environment variable not found: ' + esiev;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
											"});\r",
											"\r",
											"// Expected strings in collection variables\r",
											"['_webStoreId', '_productId', '_token', '_cartStateOrId', '_instanceUrl', '_effectiveAccountId'].forEach(esicv => {\r",
											"    if(!pm.collectionVariables.has(esicv)) {\r",
											"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Tests...`);\r",
											"console.warn(`Code: ${pm.response.code} | Status: ${pm.response.status} | Response time: ${pm.response.responseTime} ms`);\r",
											"\r",
											"const validateSession = (jsonData) => {\r",
											"    if(jsonData[0] !== undefined && jsonData[0].message !== undefined && jsonData[0].errorCode !== undefined &&\r",
											"        (jsonData[0].message.toUpperCase() === 'SESSION EXPIRED OR INVALID' || jsonData[0].errorCode.toUpperCase() === 'INVALID_SESSION_ID')) {\r",
											"        const msg = 'Steps to fix issue \"Expected oAuth 2.0 token found but likely expired\":\\r\\n' + \r",
											"        '1. Check in Setup -> OAuth and OpenID Connect Settings -> Allow OAuth Username-Password Flows: Enabled \\r\\n' +\r",
											"        '2. Click on the Request with a name like \"Set your oAuth 2.0 Token in Authorization tab\"\\r\\n' +\r",
											"        '3. Click the \"Authorization\" tab\\r\\n' + \r",
											"        '4. Click the \"Get New Access Token\" button\\r\\n' +\r",
											"        '5. Click the \"Proceed\" button\\r\\n' + \r",
											"        '6. Click the \"Use Token\" button\\r\\n' +\r",
											"        '7. Retry your request';\r",
											"        console.error(msg);\r",
											"        pm.expect.fail('oAuth 2.0 token found but likely expired. See steps above for a fix.');\r",
											"    }\r",
											"};\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"validateSession(jsonData);\r",
											"\r",
											"const expectedResponseCodes = [204]; //, 404];\r",
											"pm.expect(pm.response.code).to.be.oneOf(expectedResponseCodes, \"Response code not in expected range\");\r",
											"\r",
											"pm.collectionVariables.set('_cartStateOrId', undefined);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{_instanceUrl}}/services/data/v{{apiVersion}}/commerce/webstores/{{_webStoreId}}/carts/{{_cartStateOrId}}?effectiveAccountId={{_effectiveAccountId}}",
									"host": [
										"{{_instanceUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"commerce",
										"webstores",
										"{{_webStoreId}}",
										"carts",
										"{{_cartStateOrId}}"
									],
									"query": [
										{
											"key": "effectiveAccountId",
											"value": "{{_effectiveAccountId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Cart (oAuth 2.0)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											"\r",
											"// Expected strings in environment variables\r",
											"['orgHostMySalesforceFormat','apiVersion'].forEach(esiev => {\r",
											"    if(!pm.environment.has(esiev)) {\r",
											"        const msg = 'Expected Postman environment variable not found: ' + esiev;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
											"});\r",
											"\r",
											"// Expected strings in collection variables\r",
											"['_webStoreId', '_productId', '_token', '_instanceUrl'].forEach(esicv => {\r",
											"    if(!pm.collectionVariables.has(esicv)) {\r",
											"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Tests...`);\r",
											"console.warn(`Code: ${pm.response.code} | Status: ${pm.response.status} | Response time: ${pm.response.responseTime} ms`);\r",
											"\r",
											"const validateSession = (jsonData) => {\r",
											"    if(jsonData[0] !== undefined && jsonData[0].message !== undefined && jsonData[0].errorCode !== undefined &&\r",
											"        (jsonData[0].message.toUpperCase() === 'SESSION EXPIRED OR INVALID' || jsonData[0].errorCode.toUpperCase() === 'INVALID_SESSION_ID')) {\r",
											"        const msg = 'Steps to fix issue \"Expected oAuth 2.0 token found but likely expired\":\\r\\n' + \r",
											"        '1. Check in Setup -> OAuth and OpenID Connect Settings -> Allow OAuth Username-Password Flows: Enabled \\r\\n' +\r",
											"        '2. Click on the Request with a name like \"Set your oAuth 2.0 Token in Authorization tab\"\\r\\n' +\r",
											"        '3. Click the \"Authorization\" tab\\r\\n' + \r",
											"        '4. Click the \"Get New Access Token\" button\\r\\n' +\r",
											"        '5. Click the \"Proceed\" button\\r\\n' + \r",
											"        '6. Click the \"Use Token\" button\\r\\n' +\r",
											"        '7. Retry your request';\r",
											"        console.error(msg);\r",
											"        pm.expect.fail('oAuth 2.0 token found but likely expired. See steps above for a fix.');\r",
											"    }\r",
											"};\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"validateSession(jsonData);\r",
											"\r",
											"const expectedResponseCodes = [201];\r",
											"pm.expect(pm.response.code).to.be.oneOf(expectedResponseCodes, \"Response code not in expected range\");\r",
											"\r",
											"pm.test('Response is valid and has a JSON body', () => {\r",
											"    pm.response.to.be.success;\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test('Validate the response contains a cart Id and set the collection variables', () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const cartId = jsonData.cartId;\r",
											"    console.log('CART ID: ' + cartId);\r",
											"    pm.expect(jsonData.cartId).to.exist;\r",
											"    pm.expect(jsonData.cartId).to.be.an('string');\r",
											"    pm.collectionVariables.set('_cartStateOrId', jsonData.cartId);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"name\":\"Postman Cart\",\r\n   \"type\":\"Cart\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{_instanceUrl}}/services/data/v{{apiVersion}}/commerce/webstores/{{_webStoreId}}/carts",
									"host": [
										"{{_instanceUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"commerce",
										"webstores",
										"{{_webStoreId}}",
										"carts"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Cart By Id (oAuth 2.0)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											"\r",
											"// Expected strings in environment variables\r",
											"['apiVersion'].forEach(esiev => {\r",
											"    if(!pm.environment.has(esiev)) {\r",
											"        const msg = 'Expected Postman environment variable not found: ' + esiev;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
											"});\r",
											"\r",
											"// Expected strings in collection variables\r",
											"['_webStoreId', '_productId', '_token', '_cartStateOrId', '_instanceUrl', '_effectiveAccountId'].forEach(esicv => {\r",
											"    if(!pm.collectionVariables.has(esicv)) {\r",
											"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Tests...`);\r",
											"console.warn(`Code: ${pm.response.code} | Status: ${pm.response.status} | Response time: ${pm.response.responseTime} ms`);\r",
											"\r",
											"const validateSession = (jsonData) => {\r",
											"    if(jsonData[0] !== undefined && jsonData[0].message !== undefined && jsonData[0].errorCode !== undefined &&\r",
											"        (jsonData[0].message.toUpperCase() === 'SESSION EXPIRED OR INVALID' || jsonData[0].errorCode.toUpperCase() === 'INVALID_SESSION_ID')) {\r",
											"        const msg = 'Steps to fix issue \"Expected oAuth 2.0 token found but likely expired\":\\r\\n' + \r",
											"        '1. Check in Setup -> OAuth and OpenID Connect Settings -> Allow OAuth Username-Password Flows: Enabled \\r\\n' +\r",
											"        '2. Click on the Request with a name like \"Set your oAuth 2.0 Token in Authorization tab\"\\r\\n' +\r",
											"        '3. Click the \"Authorization\" tab\\r\\n' + \r",
											"        '4. Click the \"Get New Access Token\" button\\r\\n' +\r",
											"        '5. Click the \"Proceed\" button\\r\\n' + \r",
											"        '6. Click the \"Use Token\" button\\r\\n' +\r",
											"        '7. Retry your request';\r",
											"        console.error(msg);\r",
											"        pm.expect.fail('oAuth 2.0 token found but likely expired. See steps above for a fix.');\r",
											"    }\r",
											"};\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"validateSession(jsonData);\r",
											"\r",
											"const expectedResponseCodes = [204]; //, 404];\r",
											"pm.expect(pm.response.code).to.be.oneOf(expectedResponseCodes, \"Response code not in expected range\");\r",
											"\r",
											"pm.collectionVariables.set('_cartStateOrId', undefined);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{_instanceUrl}}/services/data/v{{apiVersion}}/commerce/webstores/{{_webStoreId}}/carts/{{_cartStateOrId}}?effectiveAccountId={{_effectiveAccountId}}",
									"host": [
										"{{_instanceUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"commerce",
										"webstores",
										"{{_webStoreId}}",
										"carts",
										"{{_cartStateOrId}}"
									],
									"query": [
										{
											"key": "effectiveAccountId",
											"value": "{{_effectiveAccountId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Cart Item (oAuth 2.0)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Tests...`);\r",
											"console.warn(`Code: ${pm.response.code} | Status: ${pm.response.status} | Response time: ${pm.response.responseTime} ms`);\r",
											"\r",
											"\r",
											"const validateSession = (jsonData) => {\r",
											"    if(jsonData[0] !== undefined && jsonData[0].message !== undefined && jsonData[0].errorCode !== undefined &&\r",
											"        (jsonData[0].message.toUpperCase() === 'SESSION EXPIRED OR INVALID' || jsonData[0].errorCode.toUpperCase() === 'INVALID_SESSION_ID')) {\r",
											"        const msg = 'Steps to fix issue \"Expected oAuth 2.0 token found but likely expired\":\\r\\n' + \r",
											"        '1. Check in Setup -> OAuth and OpenID Connect Settings -> Allow OAuth Username-Password Flows: Enabled \\r\\n' +\r",
											"        '2. Click on the Request with a name like \"Set your oAuth 2.0 Token in Authorization tab\"\\r\\n' +\r",
											"        '3. Click the \"Authorization\" tab\\r\\n' + \r",
											"        '4. Click the \"Get New Access Token\" button\\r\\n' +\r",
											"        '5. Click the \"Proceed\" button\\r\\n' + \r",
											"        '6. Click the \"Use Token\" button\\r\\n' +\r",
											"        '7. Retry your request';\r",
											"        console.error(msg);\r",
											"        pm.expect.fail('oAuth 2.0 token found but likely expired. See steps above for a fix.');\r",
											"    }\r",
											"};\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"validateSession(jsonData)\r",
											"\r",
											"const expectedResponseCodes = [204]; //, 404];\r",
											"pm.expect(pm.response.code).to.be.oneOf(expectedResponseCodes, \"Response code not in expected range\");\r",
											"\r",
											"pm.collectionVariables.set('_cartStateOrId', undefined);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											"\r",
											"// Expected strings in environment variables\r",
											"['orgHostMySalesforceFormat','apiVersion','productNamesCommaDelimited'].forEach(esiev => {\r",
											"    if(!pm.environment.has(esiev)) {\r",
											"        const msg = 'Expected Postman environment variable not found: ' + esiev;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
											"});\r",
											"\r",
											"// Expected strings in collection variables\r",
											"['_webStoreId', '_productId', '_token', '_instanceUrl', '_cartStateOrId', '_effectiveAccountId', '_cartItemIdForDelete'].forEach(esicv => {\r",
											"    if(!pm.collectionVariables.has(esicv)) {\r",
											"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{_instanceUrl}}/services/data/v{{apiVersion}}/commerce/webstores/{{_webStoreId}}/carts/{{_cartStateOrId}}/cart-items/{{_cartItemIdForRemoval}}?effectiveAccountId={{_effectiveAccountId}}",
									"host": [
										"{{_instanceUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"commerce",
										"webstores",
										"{{_webStoreId}}",
										"carts",
										"{{_cartStateOrId}}",
										"cart-items",
										"{{_cartItemIdForRemoval}}"
									],
									"query": [
										{
											"key": "effectiveAccountId",
											"value": "{{_effectiveAccountId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Item Quantity Copy (oAuth 2.0)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											"\r",
											"// Expected strings in environment variables\r",
											"['orgHostMySalesforceFormat','apiVersion','productNamesCommaDelimited', 'currencyIsoCode'].forEach(esiev => {\r",
											"    if(!pm.environment.has(esiev)) {\r",
											"        const msg = 'Expected Postman environment variable not found: ' + esiev;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
											"});\r",
											"\r",
											"// Expected strings in collection variables\r",
											"['_webStoreId', '_productId', '_token', '_instanceUrl', '_cartStateOrId', '_effectiveAccountId', '_cartItemIdForQuantityUpdate'].forEach(esicv => {\r",
											"    if(!pm.collectionVariables.has(esicv)) {\r",
											"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Tests...`);\r",
											"console.warn(`Code: ${pm.response.code} | Status: ${pm.response.status} | Response time: ${pm.response.responseTime} ms`);\r",
											"\r",
											"\r",
											"const validateSession = (jsonData) => {\r",
											"    if(jsonData[0] !== undefined && jsonData[0].message !== undefined && jsonData[0].errorCode !== undefined &&\r",
											"        (jsonData[0].message.toUpperCase() === 'SESSION EXPIRED OR INVALID' || jsonData[0].errorCode.toUpperCase() === 'INVALID_SESSION_ID')) {\r",
											"        const msg = 'Steps to fix issue \"Expected oAuth 2.0 token found but likely expired\":\\r\\n' + \r",
											"        '1. Check in Setup -> OAuth and OpenID Connect Settings -> Allow OAuth Username-Password Flows: Enabled \\r\\n' +\r",
											"        '2. Click on the Request with a name like \"Set your oAuth 2.0 Token in Authorization tab\"\\r\\n' +\r",
											"        '3. Click the \"Authorization\" tab\\r\\n' + \r",
											"        '4. Click the \"Get New Access Token\" button\\r\\n' +\r",
											"        '5. Click the \"Proceed\" button\\r\\n' + \r",
											"        '6. Click the \"Use Token\" button\\r\\n' +\r",
											"        '7. Retry your request';\r",
											"        console.error(msg);\r",
											"        pm.expect.fail('oAuth 2.0 token found but likely expired. See steps above for a fix.');\r",
											"    }\r",
											"};\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"validateSession(jsonData)\r",
											"\r",
											"const expectedResponseCodes = [204]; //, 404];\r",
											"pm.expect(pm.response.code).to.be.oneOf(expectedResponseCodes, \"Response code not in expected range\");\r",
											"\r",
											"pm.test('Response is valid and has a JSON body', () => {\r",
											"     pm.response.to.be.withBody;\r",
											"     pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test('Validate the response and save collection variables', () => {\r",
											"    console.warn(jsonData);\r",
											"\r",
											"    //pm.expect(jsonData.cartItem).to.exist;\r",
											"    /*\r",
											"    pm.expect(jsonData.cartItem).to.be.an('object').with.property('cartItemId').that.is.an('string');\r",
											"    pm.expect(jsonData.cartItem).to.be.an('object').with.property('cartId').that.is.an('string');\r",
											"    pm.expect(jsonData.cartItem).to.be.an('object').with.property('quantity').that.is.an('number');\r",
											"    pm.expect(jsonData.cartItem).equals(5);\r",
											"    pm.expect(jsonData.type).equals('Product');\r",
											"    */\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_token}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"quantity\": \"5\"\r\n}"
								},
								"url": {
									"raw": "{{_instanceUrl}}/services/data/v{{apiVersion}}/commerce/webstores/{{_webStoreId}}/carts/{{_cartStateOrId}}/cart-items/{{_cartItemIdForQuantityUpdate}}?effectiveAccountId={{_effectiveAccountId}}&currencyIsoCode={{currencyIsoCode}}",
									"host": [
										"{{_instanceUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"commerce",
										"webstores",
										"{{_webStoreId}}",
										"carts",
										"{{_cartStateOrId}}",
										"cart-items",
										"{{_cartItemIdForQuantityUpdate}}"
									],
									"query": [
										{
											"key": "effectiveAccountId",
											"value": "{{_effectiveAccountId}}"
										},
										{
											"key": "currencyIsoCode",
											"value": "{{currencyIsoCode}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create a Cart (oAuth 2.0)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Tests...`);",
											"console.warn(`Code: ${pm.response.code} | Status: ${pm.response.status} | Response time: ${pm.response.responseTime} ms`);",
											"",
											"const validateSession = (jsonData) => {",
											"    if(jsonData[0] !== undefined && jsonData[0].message !== undefined && jsonData[0].errorCode !== undefined &&",
											"        (jsonData[0].message.toUpperCase() === 'SESSION EXPIRED OR INVALID' || jsonData[0].errorCode.toUpperCase() === 'INVALID_SESSION_ID')) {",
											"        const msg = 'Steps to fix issue \"Expected oAuth 2.0 token found but likely expired\":\\r\\n' + ",
											"        '1. Check in Setup -> OAuth and OpenID Connect Settings -> Allow OAuth Username-Password Flows: Enabled \\r\\n' +",
											"        '2. Click on the Request with a name like \"Set your oAuth 2.0 Token in Authorization tab\"\\r\\n' +",
											"        '3. Click the \"Authorization\" tab\\r\\n' + ",
											"        '4. Click the \"Get New Access Token\" button\\r\\n' +",
											"        '5. Click the \"Proceed\" button\\r\\n' + ",
											"        '6. Click the \"Use Token\" button\\r\\n' +",
											"        '7. Retry your request';",
											"        console.error(msg);",
											"        pm.expect.fail('oAuth 2.0 token found but likely expired. See steps above for a fix.');",
											"    }",
											"};",
											"",
											"const jsonData = pm.response.json();",
											"validateSession(jsonData);",
											"",
											"const expectedResponseCodes = [201];",
											"pm.expect(pm.response.code).to.be.oneOf(expectedResponseCodes, \"Response code not in expected range\");",
											"",
											"let cartId = jsonData.cartId;",
											"pm.collectionVariables.set('_cartStateOrId', cartId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"name\":\"My Cart\",\n   \"type\":\"Cart\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{_instanceUrl}}/services/data/v{{apiVersion}}/commerce/webstores/{{_webStoreId}}/carts",
									"host": [
										"{{_instanceUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"commerce",
										"webstores",
										"{{_webStoreId}}",
										"carts"
									]
								},
								"description": "Creates a Cart and sets the variable __cartId_."
							},
							"response": []
						},
						{
							"name": "Create a Primary Cart (oAuth 2.0)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Tests...`);",
											"console.warn(`Code: ${pm.response.code} | Status: ${pm.response.status} | Response time: ${pm.response.responseTime} ms`);",
											"",
											"const validateSession = (jsonData) => {",
											"    if(jsonData[0] !== undefined && jsonData[0].message !== undefined && jsonData[0].errorCode !== undefined &&",
											"        (jsonData[0].message.toUpperCase() === 'SESSION EXPIRED OR INVALID' || jsonData[0].errorCode.toUpperCase() === 'INVALID_SESSION_ID')) {",
											"        const msg = 'Steps to fix issue \"Expected oAuth 2.0 token found but likely expired\":\\r\\n' + ",
											"        '1. Check in Setup -> OAuth and OpenID Connect Settings -> Allow OAuth Username-Password Flows: Enabled \\r\\n' +",
											"        '2. Click on the Request with a name like \"Set your oAuth 2.0 Token in Authorization tab\"\\r\\n' +",
											"        '3. Click the \"Authorization\" tab\\r\\n' + ",
											"        '4. Click the \"Get New Access Token\" button\\r\\n' +",
											"        '5. Click the \"Proceed\" button\\r\\n' + ",
											"        '6. Click the \"Use Token\" button\\r\\n' +",
											"        '7. Retry your request';",
											"        console.error(msg);",
											"        pm.expect.fail('oAuth 2.0 token found but likely expired. See steps above for a fix.');",
											"    }",
											"};",
											"",
											"const jsonData = pm.response.json();",
											"validateSession(jsonData)",
											"",
											"const expectedResponseCodes = [201];",
											"pm.expect(pm.response.code).to.be.oneOf(expectedResponseCodes, \"Response code not in expected range\");",
											"",
											"let cartId = jsonData.cartId;",
											"pm.collectionVariables.set('_cartStateOrId', cartId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"name\":\"My Primary Cart\",\n   \"type\":\"Cart\",\n   \"isSecondary\":false\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{_instanceUrl}}/services/data/v{{apiVersion}}/commerce/webstores/{{_webStoreId}}/carts",
									"host": [
										"{{_instanceUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"commerce",
										"webstores",
										"{{_webStoreId}}",
										"carts"
									]
								},
								"description": "Creates a Cart and sets the variable __cartId_."
							},
							"response": []
						},
						{
							"name": "Get Cart Items (oAuth 2.0)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Tests...`);\r",
											"console.warn(`Code: ${pm.response.code} | Status: ${pm.response.status} | Response time: ${pm.response.responseTime} ms`);\r",
											"\r",
											"const validateSession = (jsonData) => {\r",
											"    if(jsonData[0] !== undefined && jsonData[0].message !== undefined && jsonData[0].errorCode !== undefined &&\r",
											"        (jsonData[0].message.toUpperCase() === 'SESSION EXPIRED OR INVALID' || jsonData[0].errorCode.toUpperCase() === 'INVALID_SESSION_ID')) {\r",
											"        const msg = 'Steps to fix issue \"Expected oAuth 2.0 token found but likely expired\":\\r\\n' + \r",
											"        '1. Check in Setup -> OAuth and OpenID Connect Settings -> Allow OAuth Username-Password Flows: Enabled \\r\\n' +\r",
											"        '2. Click on the Request with a name like \"Set your oAuth 2.0 Token in Authorization tab\"\\r\\n' +\r",
											"        '3. Click the \"Authorization\" tab\\r\\n' + \r",
											"        '4. Click the \"Get New Access Token\" button\\r\\n' +\r",
											"        '5. Click the \"Proceed\" button\\r\\n' + \r",
											"        '6. Click the \"Use Token\" button\\r\\n' +\r",
											"        '7. Retry your request';\r",
											"        console.error(msg);\r",
											"        pm.expect.fail('oAuth 2.0 token found but likely expired. See steps above for a fix.');\r",
											"    }\r",
											"};\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"validateSession(jsonData)\r",
											"\r",
											"const expectedResponseCodes = [200];\r",
											"pm.expect(pm.response.code).to.be.oneOf(expectedResponseCodes, \"Response code not in expected range\");\r",
											"\r",
											"pm.test('Response is valid and has a JSON body', () => {\r",
											"     pm.response.to.be.success;\r",
											"     pm.response.to.be.withBody;\r",
											"     pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test('Validate the response and save collection variables', () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.cartItems).to.exist;\r",
											"    pm.expect(jsonData.cartItems).to.be.an('array').with.length.greaterThan(0);\r",
											"    \r",
											"    const firstCartItem = jsonData.cartItems[0].cartItem;\r",
											"    pm.expect(firstCartItem).to.be.an('object').with.property('cartItemId').that.is.an('string');\r",
											"    \r",
											"    const secondCartItem = jsonData.cartItems[1].cartItem;\r",
											"    pm.expect(secondCartItem).to.be.an('object').with.property('cartItemId').that.is.an('string');\r",
											"    \r",
											"    pm.expect(firstCartItem.cartId).equals(secondCartItem.cartId);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											"\r",
											"// Expected strings in environment variables\r",
											"['orgHostMySalesforceFormat','apiVersion','productNamesCommaDelimited'].forEach(esiev => {\r",
											"    if(!pm.environment.has(esiev)) {\r",
											"        const msg = 'Expected Postman environment variable not found: ' + esiev;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
											"});\r",
											"\r",
											"// Expected strings in collection variables\r",
											"['_webStoreId', '_productId', '_token', '_instanceUrl', '_cartStateOrId', '_effectiveAccountId'].forEach(esicv => {\r",
											"    if(!pm.collectionVariables.has(esicv)) {\r",
											"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{_instanceUrl}}/services/data/v{{apiVersion}}/commerce/webstores/{{_webStoreId}}/carts/{{_cartStateOrId}}/cart-items?effectiveAccountId={{_effectiveAccountId}}",
									"host": [
										"{{_instanceUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"commerce",
										"webstores",
										"{{_webStoreId}}",
										"carts",
										"{{_cartStateOrId}}",
										"cart-items"
									],
									"query": [
										{
											"key": "effectiveAccountId",
											"value": "{{_effectiveAccountId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Carts by Effective Account Id (oAuth 2.0)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											"\r",
											"pm.collectionVariables.set('_cartStateOrId', 'active');\r",
											"\r",
											"// Expected strings in environment variables\r",
											"['orgHostMySalesforceFormat','apiVersion'].forEach(esiev => {\r",
											"    if(!pm.environment.has(esiev)) {\r",
											"        const msg = 'Expected Postman environment variable not found: ' + esiev;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
											"});\r",
											"\r",
											"// Expected strings in collection variables\r",
											"['_instanceUrl', '_webStoreId', '_productId', '_token', '_effectiveAccountId', '_cartStateOrId'].forEach(esicv => {\r",
											"    if(!pm.collectionVariables.has(esicv)) {\r",
											"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Tests...`);\r",
											"console.warn(`Code: ${pm.response.code} | Status: ${pm.response.status} | Response time: ${pm.response.responseTime} ms`);\r",
											"\r",
											"const validateSession = (jsonData) => {\r",
											"    if(jsonData[0] !== undefined && jsonData[0].message !== undefined && jsonData[0].errorCode !== undefined &&\r",
											"        (jsonData[0].message.toUpperCase() === 'SESSION EXPIRED OR INVALID' || jsonData[0].errorCode.toUpperCase() === 'INVALID_SESSION_ID')) {\r",
											"        const msg = 'Steps to fix issue \"Expected oAuth 2.0 token found but likely expired\":\\r\\n' + \r",
											"        '1. Check in Setup -> OAuth and OpenID Connect Settings -> Allow OAuth Username-Password Flows: Enabled \\r\\n' +\r",
											"        '2. Click on the Request with a name like \"Set your oAuth 2.0 Token in Authorization tab\"\\r\\n' +\r",
											"        '3. Click the \"Authorization\" tab\\r\\n' + \r",
											"        '4. Click the \"Get New Access Token\" button\\r\\n' +\r",
											"        '5. Click the \"Proceed\" button\\r\\n' + \r",
											"        '6. Click the \"Use Token\" button\\r\\n' +\r",
											"        '7. Retry your request';\r",
											"        console.error(msg);\r",
											"        pm.expect.fail('oAuth 2.0 token found but likely expired. See steps above for a fix.');\r",
											"    }\r",
											"};\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"validateSession(jsonData)\r",
											"\r",
											"const expectedResponseCodes = [200];\r",
											"pm.expect(pm.response.code).to.be.oneOf(expectedResponseCodes, \"Response code not in expected range\");\r",
											"\r",
											"pm.test('Response is valid and has a JSON body', () => {\r",
											"    pm.response.to.be.success;\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test('Validate the response contains a cart Id and set the collection variables', () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    console.warn(jsonData);\r",
											"    pm.expect(jsonData.cartId).to.exist;\r",
											"    pm.expect(jsonData.cartId).to.be.an('string');\r",
											"    pm.collectionVariables.set('_cartStateOrId', jsonData.cartId);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"name\":\"My Cart\",\r\n   \"type\":\"Cart\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{_instanceUrl}}/services/data/v{{apiVersion}}/commerce/webstores/{{_webStoreId}}/carts",
									"host": [
										"{{_instanceUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"commerce",
										"webstores",
										"{{_webStoreId}}",
										"carts"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check Cart is empty Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Tests...`);\r",
											"console.warn(`Code: ${pm.response.code} | Status: ${pm.response.status} | Response time: ${pm.response.responseTime} ms`);\r",
											"const expectedResponseCodes = [200];\r",
											"pm.expect(pm.response.code).to.be.oneOf(expectedResponseCodes, \"Response code not in expected range\");\r",
											"\r",
											"pm.test('Response is valid and has a JSON body', () => {\r",
											"     pm.response.to.be.success;\r",
											"     pm.response.to.be.withBody;\r",
											"     pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"\r",
											"pm.test('Cart is empty', () => {\r",
											"    pm.expect(jsonData.cartItems).to.exist;\r",
											"    pm.expect(jsonData.cartItems).to.be.empty;\r",
											"    pm.expect(pm.collectionVariables.has('_cartItems').valueOf(false));\r",
											"});\r",
											"\r",
											"console.log('Double-check Cart item count: ' + jsonData.cartItems.length);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											"\r",
											"// Expected strings in environment variables\r",
											"['orgHostMySalesforceFormat','apiVersion','productNamesCommaDelimited'].forEach(esiev => {\r",
											"    if(!pm.environment.has(esiev)) {\r",
											"        const msg = 'Expected Postman environment variable not found: ' + esiev;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
											"});\r",
											"\r",
											"// Expected strings in collection variables\r",
											"['_webStoreId', '_productId', '_token', '_instanceUrl', '_cartStateOrId', '_effectiveAccountId'].forEach(esicv => {\r",
											"    if(!pm.collectionVariables.has(esicv)) {\r",
											"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{_instanceUrl}}/services/data/v{{apiVersion}}/commerce/webstores/{{_webStoreId}}/carts/{{_cartStateOrId}}/cart-items?effectiveAccountId={{_effectiveAccountId}}",
									"host": [
										"{{_instanceUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"commerce",
										"webstores",
										"{{_webStoreId}}",
										"carts",
										"{{_cartStateOrId}}",
										"cart-items"
									],
									"query": [
										{
											"key": "effectiveAccountId",
											"value": "{{_effectiveAccountId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Remove Cart Items (sequenced recursively) Copy",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
											"\r",
											"// Expected strings in environment variables\r",
											"['orgHostMySalesforceFormat','apiVersion'].forEach(esiev => {\r",
											"    if(!pm.environment.has(esiev)) {\r",
											"        const msg = 'Expected Postman environment variable not found: ' + esiev;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
											"});\r",
											"\r",
											"// Expected strings in collection variables\r",
											"['_instanceUrl', '_webStoreId', '_productId', '_token', '_effectiveAccountId', '_cartStateOrId'].forEach(esicv => {\r",
											"    if(!pm.collectionVariables.has(esicv)) {\r",
											"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
											"});\r",
											"\r",
											"// Expected arrays in collection variables\r",
											"['_cartItems'].forEach(eaicv => {\r",
											"    if(!pm.collectionVariables.has(eaicv)) {\r",
											"        const msg = 'Expected Postman collection array variable not found: ' + eaicv;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.collectionVariables.get(eaicv)).to.exist;\r",
											"    pm.expect(pm.collectionVariables.get(eaicv)).to.be.an('array');\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Tests...`);\r",
											"console.warn(`Code: ${pm.response.code} | Status: ${pm.response.status} | Response time: ${pm.response.responseTime} ms`);\r",
											"const expectedResponseCodes = [204];\r",
											"\r",
											"const instanceUrl = pm.collectionVariables.get('_instanceUrl');\r",
											"const apiVersion = pm.environment.get('apiVersion');\r",
											"const webStoreId = pm.collectionVariables.get('_webStoreId');\r",
											"const cartStateOrId = pm.collectionVariables.get('_cartStateOrId');\r",
											"const effectiveAccountId = pm.collectionVariables.get('_effectiveAccountId');\r",
											"const token = pm.collectionVariables.get('_token');\r",
											"const cartItems = pm.collectionVariables.get('_cartItems');\r",
											"\r",
											"// Put together the Url which will be called in a loop\r",
											"let renderedUrl = `${instanceUrl}`;\r",
											"renderedUrl += `/services/data/v${apiVersion}`;\r",
											"renderedUrl += `/commerce/webstores/${webStoreId}`;\r",
											"renderedUrl += `/carts/${cartStateOrId}`;\r",
											"renderedUrl += `/cart-items/{cartItemId}/?effectiveAccountId=${effectiveAccountId}`;\r",
											"\r",
											"// Loop the cart items and build an array of requests\r",
											"let deleteRequests = [];\r",
											"\r",
											"cartItems.forEach(ci => {\r",
											"    let cartItemId = ci.cartItem.cartItemId;\r",
											"    let itemUrl = renderedUrl.replace('{cartItemId}', cartItemId);\r",
											"    \r",
											"    // Assemble request and headers for the item's URL\r",
											"\r",
											"    const header = {\r",
											"        'Cache-Control':'no-cache',\r",
											"        'Accept-Encoding':'gzip, deflate, br',\r",
											"        'Connection':'keep-alive',\r",
											"        'Content-Type': 'application/json',\r",
											"        'Authorization': 'Bearer ' + token\r",
											"    }\r",
											"    \r",
											"    const deleteRequest = {\r",
											"        \"url\": itemUrl,\r",
											"        \"header\": header,\r",
											"        \"method\": 'DELETE',\r",
											"        \"body\": {},\r",
											"    };\r",
											"    \r",
											"    deleteRequests.push(deleteRequest);\r",
											"});\r",
											"\r",
											"function sequenceRequestsViaRecursion(requests) {\r",
											"    if(requests.length > 0) {\r",
											"        console.info(`Requesting: '${requests[0].url}'`);\r",
											"        pm.sendRequest(requests[0], function (error, response)  {\r",
											"            requests.splice(0, 1);\r",
											"            if(error != null) {\r",
											"                console.error(error);\r",
											"            }\r",
											"            console.warn(`Code: ${response.code} | Status: ${response.status} | Response time: ${response.responseTime} ms`);\r",
											"            pm.test('Check that Cart has first item and set collection variable for Update operation', () =>{\r",
											"                pm.expect(response.code).to.be.oneOf(expectedResponseCodes);\r",
											"            });\r",
											"            sequenceRequestsViaRecursion(requests);\r",
											"        });\r",
											"    }\r",
											"}\r",
											"\r",
											"// In Postman we need to nest the calls to make them sequentially\r",
											"console.warn(`Time for sequenceRequestsViaRecursion with ${deleteRequests.length} requests... Contact!`);\r",
											"sequenceRequestsViaRecursion(deleteRequests);\r",
											"// Sync up the collection variable with the work done\r",
											"pm.collectionVariables.unset('_cartItems');\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "postman-echo.com/get",
									"host": [
										"postman-echo",
										"com"
									],
									"path": [
										"get"
									]
								}
							},
							"response": []
						}
					],
					"description": "These bricks are meant to be used for oAuth 2.0 Login Scenarios. You can expand on these as needed to build out your request chains. This is where you can do things like:\n\n- Log in as a Buyer\n- Search for Products\n- Get Product Pricing\n- Interact with Carts and Cart Items\n    \n\nEach of these bricks should check that your oAuth 2.0 token setup has been completed and will provide these steps as guidance in the case that it isn't or when tokens may have expired:\n\n1. Check in Setup -> OAuth and OpenID Connect Settings -> Allow OAuth Username-Password Flows: Enabled\n    \n2. Click on the Request with a name like \"Set your oAuth 2.0 Token in Authorization tab\"\n    \n3. Click the \"Authorization\" tab\n    \n4. Click the \"Get New Access Token\" button\n    \n5. Click the \"Proceed\" button\n    \n6. Click the \"Use Token\" button\n    \n7. Retry your requestEndFragment\n    \n\nIt's not a perfect world, but each brick checks for a set of expected collection values needed to make the request so you can chain them together with minimal debugging required."
				},
				{
					"name": "D. Bricks (Guest) - WIP",
					"item": [
						{
							"name": "Login as Buyer (SOAP)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Tests...`);",
											"",
											"pm.expect(pm.response.text().includes('INVALID_LOGIN'), 'INVALID_LOGIN found in response - Suggested fix: Check username, password and tokens in the Postman Environment').to.be.false;",
											"",
											"pm.expect(pm.response.text().includes('API_CURRENTLY_DISABLED'), 'API_CURRENTLY_DISABLED found in response - Suggested fix: Create a Permission Set like \\'Api Enabled\\' with the API Enabled checkbox active in System Permissions and apply it to the user').to.be.false;",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Validate the access token is found in the body and save it to a collection variable', () => {",
											"    const result = xml2Json(pm.response.text())['soapenv:Envelope']['soapenv:Body'].loginResponse.result;",
											"    const url = result.serverUrl.split('/');",
											"",
											"    pm.expect(result.sessionId).to.exist;",
											"    pm.expect(result.sessionId).to.be.a.string;",
											"",
											"    pm.collectionVariables.set('_token', result.sessionId);",
											"    pm.collectionVariables.set('_instanceUrl', url[0] + '//' + url[2]);",
											"    pm.collectionVariables.set('_userId', result.userId);",
											"    pm.collectionVariables.set('_orgId', result.userInfo.organizationId);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											"\r",
											"// Expected strings in environment variables\r",
											"['orgLoginUrl','apiVersion'].forEach(esiev => {\r",
											"    if(!pm.environment.has(esiev)) {\r",
											"        const msg = `Expected Postman environment variable not found: '${esiev} in environment: '${pm.environment.name}'`;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
											"});\r",
											"\r",
											"// Expected strings in collection variables\r",
											"['_orgId', '_webStoreId'].forEach(esicv => {\r",
											"    if(pm.collectionVariables.get(esicv) === undefined) {\r",
											"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "text/xml; charset=UTF-8"
									},
									{
										"key": "SOAPAction",
										"value": "login"
									},
									{
										"key": "Accept",
										"value": "text/xml"
									},
									{
										"key": "Cookie",
										"value": "BrowserId=POhd6XTZEe2v6_8M7WG26g"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap:Envelope xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\" \nxmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://\nwww.w3.org/2001/XMLSchema\">\n    <soap:Header>\n        <LoginScopeHeader xmlns=\"urn:partner.soap.sforce.com\">\n            <organizationId>{{_orgId}}</organizationId>\n        </LoginScopeHeader>\n    </soap:Header>\n    <soap:Body>\n        <login xmlns=\"urn:partner.soap.sforce.com\">\n            <username><![CDATA[{{buyerUsername}}]]></username>\n            <password><![CDATA[{{buyerPassword}}]]></password>\n        </login>\n    </soap:Body>\n</soap:Envelope>"
								},
								"url": {
									"raw": "{{orgLoginUrl}}/services/Soap/u/{{apiVersion}}",
									"host": [
										"{{orgLoginUrl}}"
									],
									"path": [
										"services",
										"Soap",
										"u",
										"{{apiVersion}}"
									]
								},
								"description": "Authenticate the shopper through the variables _buyerUsername_ and _buyerPassword_. Generated session ID is saved in _accessToken for use in the other calls in the collection."
							},
							"response": []
						},
						{
							"name": "Search for Products",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Tests...`);",
											"console.warn(`Code: ${pm.response.code} | Status: ${pm.response.status} | Response time: ${pm.response.responseTime} ms`);",
											"const expectedResponseCodes = [201];",
											"pm.expect(pm.response.code).to.be.oneOf(expectedResponseCodes, \"Response code not in expected range\");",
											"",
											"pm.test('Response is valid and has a JSON body', () => {",
											"    pm.response.to.be.success;",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"pm.test('Validate the response and save the product id to a collection variable', () => {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.productsPage).to.exist;",
											"    pm.expect(jsonData.productsPage).to.be.an('object');",
											"    pm.expect(jsonData.productsPage.products).to.exist;",
											"    pm.expect(jsonData.productsPage.products).to.be.an('array');",
											"    pm.expect(jsonData.productsPage.products[0]).to.exist;",
											"    pm.expect(jsonData.productsPage.products[0]).to.be.an('object');",
											"    pm.expect(jsonData.productsPage.products[0]).to.exist;",
											"    pm.expect(jsonData.productsPage.products[0].id).to.be.an('string');",
											"    pm.collectionVariables.set('_productId', jsonData.productsPage.products[0].id);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											"\r",
											"console.log(`${pm.collectionVariables.get('_instanceUrl')} _instanceUrl from collection`);\r",
											"console.log(`${pm.environment.get('orgHostMySalesforceFormat')} orgHostMySalesforceFormat from environment`);\r",
											"\r",
											"// Expected strings in environment variables\r",
											"['orgHostMySalesforceFormat','apiVersion', 'productSearchTerm'].forEach(esiev => {\r",
											"    if(!pm.environment.has(esiev)) {\r",
											"        const msg = `Expected Postman environment variable not found: '${esiev} in environment: '${pm.environment.name}'`;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
											"});\r",
											"\r",
											"// Expected strings in collection variables\r",
											"['_webStoreId', '_token', '_orgId'].forEach(esicv => {\r",
											"    if(!pm.collectionVariables.has(esicv)) {\r",
											"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableUrlEncoding": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"searchTerm\": \"{{productSearchTerm}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{_instanceUrl}}/services/data/v{{apiVersion}}/commerce/webstores/{{_webStoreId}}/search/product-search",
									"host": [
										"{{_instanceUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"commerce",
										"webstores",
										"{{_webStoreId}}",
										"search",
										"product-search"
									]
								},
								"description": "Uses the variable _productSearchTerm_ to search for products in the webstore. Sets the first returned product in the variable _productId_."
							},
							"response": []
						},
						{
							"name": "Get Product Pricing - Single",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Tests...`);",
											"console.warn(`Code: ${pm.response.code} | Status: ${pm.response.status} | Response time: ${pm.response.responseTime} ms`);",
											"const expectedResponseCodes = [200];",
											"pm.expect(pm.response.code).to.be.oneOf(expectedResponseCodes, \"Response code not in expected range\");",
											"",
											"pm.test('Response is valid and has a JSON body', () => {",
											"    pm.response.to.be.success;",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test('Validate top level data', () => {",
											"    pm.expect(jsonData).to.be.an('object').with.property('currencyIsoCode').to.be.an('string').with.length.greaterThan(2);",
											"    pm.expect(jsonData).to.be.an('object').with.property('listPrice');",
											"    pm.expect(jsonData).to.be.an('object').with.property('pricebookEntryId').to.be.an('string').with.length.greaterThan(0);",
											"    pm.expect(jsonData).to.be.an('object').with.property('productPriceEntries').to.be.an('array').with.length.greaterThan(0);",
											"    pm.expect(jsonData).to.be.an('object').with.property('unitPrice')",
											"    pm.expect(parseFloat(jsonData.listPrice)).to.be.an('number').greaterThan(0);",
											"    pm.expect(parseFloat(jsonData.unitPrice)).to.be.an('number').greaterThan(0);",
											"    pm.expect(jsonData.currencyIsoCode).equals(pm.environment.get('currencyIsoCode'));",
											"});",
											"",
											"pm.test('Validate nested data', () => {",
											"    //console.warn(JSON.stringify(jsonData.productPriceEntries[0]));",
											"    pm.expect(jsonData.productPriceEntries[0]).to.be.an('object').with.property('listPrice');",
											"    pm.expect(jsonData.productPriceEntries[0]).to.be.an('object').with.property('pricebookEntryId').to.be.an('string').with.length.greaterThan(0);",
											"    pm.expect(jsonData.productPriceEntries[0].success).to.be.an('boolean').that.equals(true);",
											"    pm.expect(parseFloat(jsonData.productPriceEntries[0].listPrice)).to.be.an('number').greaterThan(0);",
											"    pm.expect(parseFloat(jsonData.productPriceEntries[0].unitPrice)).to.be.an('number').greaterThan(0);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											"\r",
											"// Expected strings in environment variables\r",
											"['orgHostMySalesforceFormat','apiVersion'].forEach(esiev => {\r",
											"    if(!pm.environment.has(esiev)) {\r",
											"        const msg = 'Expected Postman environment variable not found: ' + esiev;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
											"});\r",
											"\r",
											"// Expected strings in collection variables\r",
											"['_instanceUrl', '_webStoreId', '_productId', '_token', '_effectiveAccountId'].forEach(esicv => {\r",
											"    if(!pm.collectionVariables.has(esicv)) {\r",
											"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{_instanceUrl}}/services/data/v{{apiVersion}}/commerce/webstores/{{_webStoreId}}/pricing/products/{{_productId}}?effectiveAccountId={{_effectiveAccountId}}",
									"host": [
										"{{_instanceUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"commerce",
										"webstores",
										"{{_webStoreId}}",
										"pricing",
										"products",
										"{{_productId}}"
									],
									"query": [
										{
											"key": "effectiveAccountId",
											"value": "{{_effectiveAccountId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Product Pricing - Multiple",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Tests...`);",
											"console.warn(`Code: ${pm.response.code} | Status: ${pm.response.status} | Response time: ${pm.response.responseTime} ms`);",
											"const expectedResponseCodes = [200];",
											"pm.expect(pm.response.code).to.be.oneOf(expectedResponseCodes, \"Response code not in expected range\");",
											"",
											"pm.test('Response is valid and has a JSON body', () => {",
											"    pm.response.to.be.success;",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test('Validate top level data', () => {",
											"    pm.expect(jsonData).to.be.an('object').with.property('currencyIsoCode').to.be.an('string').with.length.greaterThan(2);",
											"    pm.expect(jsonData.success).to.be.an('boolean').that.equals(true);",
											"    pm.expect(jsonData).to.be.an('object').with.property('pricingLineItemResults').to.be.an('array').with.length.greaterThan(1);",
											"    pm.expect(jsonData.currencyIsoCode).equals(pm.environment.get('currencyIsoCode'));",
											"});",
											"",
											"pm.test('Validate pricingLineItemResults', () => {",
											"    pm.expect(jsonData.pricingLineItemResults).to.be.an('array').with.length.greaterThan(1);",
											"    ",
											"    jsonData.pricingLineItemResults.forEach(plir => {",
											"        pm.expect(parseFloat(plir.listPrice)).to.be.an('number').greaterThan(0);",
											"        pm.expect(plir.pricebookEntryId).to.be.an('string').with.length.greaterThan(0);",
											"        pm.expect(plir.productId).to.be.an('string').with.length.greaterThan(0);",
											"        pm.expect(plir.success).to.be.an('boolean').that.equals(true);",
											"        pm.expect(parseFloat(plir.unitPrice)).to.be.an('number').greaterThan(0);",
											"    });",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Pre-request Script...`);",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));",
											"",
											"// Expected strings in environment variables",
											"['orgHostMySalesforceFormat','apiVersion'].forEach(esiev => {",
											"    if(!pm.environment.has(esiev)) {",
											"        const msg = 'Expected Postman environment variable not found: ' + esiev;",
											"        pm.expect.fail(msg);",
											"    }",
											"    pm.expect(pm.environment.get(esiev)).to.exist;",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');",
											"});",
											"",
											"// Expected strings in collection variables",
											"['_instanceUrl', '_webStoreId', '_productId', '_productIds', '_token', '_effectiveAccountId'].forEach(esicv => {",
											"    if(!pm.collectionVariables.has(esicv)) {",
											"        const msg = 'Expected Postman collection variable not found: ' + esicv;",
											"        pm.expect.fail(msg);",
											"    }",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');",
											"});",
											"",
											"const productIds = JSON.parse(pm.collectionVariables.get('_productIds'));",
											"const productIdsJoined = productIds.join(',');",
											"pm.collectionVariables.set('_productIdsJoined', productIdsJoined);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{_instanceUrl}}/services/data/v{{apiVersion}}/commerce/webstores/{{_webStoreId}}/pricing/products?productIds={{_productIdsJoined}}&effectiveAccountId={{_effectiveAccountId}}",
									"host": [
										"{{_instanceUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"commerce",
										"webstores",
										"{{_webStoreId}}",
										"pricing",
										"products"
									],
									"query": [
										{
											"key": "productIds",
											"value": "{{_productIdsJoined}}"
										},
										{
											"key": "effectiveAccountId",
											"value": "{{_effectiveAccountId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Active Cart",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											"\r",
											"pm.collectionVariables.set('_cartStateOrId', 'active');\r",
											"\r",
											"// Expected strings in environment variables\r",
											"['orgHostMySalesforceFormat','apiVersion'].forEach(esiev => {\r",
											"    if(!pm.environment.has(esiev)) {\r",
											"        const msg = 'Expected Postman environment variable not found: ' + esiev;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
											"});\r",
											"\r",
											"// Expected strings in collection variables\r",
											"['_instanceUrl', '_webStoreId', '_productId', '_token', '_effectiveAccountId', '_cartStateOrId'].forEach(esicv => {\r",
											"    if(!pm.collectionVariables.has(esicv)) {\r",
											"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Tests...`);\r",
											"console.warn(`Code: ${pm.response.code} | Status: ${pm.response.status} | Response time: ${pm.response.responseTime} ms`);\r",
											"\r",
											"if(pm.response.code === 400){\r",
											"    pm.expect.fail(\"Buyer cart not clean. Suggested fix: Log in to storefront, empty cart and run this folder again.\");\r",
											"}\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Response is valid and has a JSON body', () => {\r",
											"    pm.response.to.be.success;\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test('Validate the response contains a cart Id and set the collection variables', () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.cartId).to.exist;\r",
											"    pm.expect(jsonData.cartId).to.be.an('string');\r",
											"    pm.collectionVariables.set('_cartStateOrId', jsonData.cartId);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{_instanceUrl}}/services/data/v{{apiVersion}}/commerce/webstores/{{_webStoreId}}/carts/{{_cartStateOrId}}?effectiveAccountId={{_effectiveAccountId}}",
									"host": [
										"{{_instanceUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"commerce",
										"webstores",
										"{{_webStoreId}}",
										"carts",
										"{{_cartStateOrId}}"
									],
									"query": [
										{
											"key": "effectiveAccountId",
											"value": "{{_effectiveAccountId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Active Cart (demonstration purposes)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											"\r",
											"// Expected strings in environment variables\r",
											"['apiVersion'].forEach(esiev => {\r",
											"    if(!pm.environment.has(esiev)) {\r",
											"        const msg = 'Expected Postman environment variable not found: ' + esiev;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
											"});\r",
											"\r",
											"// Expected strings in collection variables\r",
											"['_webStoreId', '_productId', '_token', '_cartStateOrId', '_instanceUrl', '_effectiveAccountId'].forEach(esicv => {\r",
											"    if(!pm.collectionVariables.has(esicv)) {\r",
											"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Tests...`);\r",
											"\r",
											"pm.test('Status code is 204 or 404', () => {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([204, 404]);\r",
											"});\r",
											"\r",
											"pm.collectionVariables.set('_cartStateOrId', undefined);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{_instanceUrl}}/services/data/v{{apiVersion}}/commerce/webstores/{{_webStoreId}}/carts/{{_cartStateOrId}}?effectiveAccountId={{_effectiveAccountId}}",
									"host": [
										"{{_instanceUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"commerce",
										"webstores",
										"{{_webStoreId}}",
										"carts",
										"{{_cartStateOrId}}"
									],
									"query": [
										{
											"key": "effectiveAccountId",
											"value": "{{_effectiveAccountId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Cart (demonstration purposes)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											"\r",
											"// Expected strings in environment variables\r",
											"['orgHostMySalesforceFormat','apiVersion'].forEach(esiev => {\r",
											"    if(!pm.environment.has(esiev)) {\r",
											"        const msg = 'Expected Postman environment variable not found: ' + esiev;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
											"});\r",
											"\r",
											"// Expected strings in collection variables\r",
											"['_webStoreId', '_productId', '_token', '_instanceUrl'].forEach(esicv => {\r",
											"    if(!pm.collectionVariables.has(esicv)) {\r",
											"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Tests...`);\r",
											"\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test('Response is valid and has a JSON body', () => {\r",
											"    pm.response.to.be.success;\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test('Validate the response contains a cart Id and set the collection variables', () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    const cartId = jsonData.cartId;\r",
											"    console.log('CART ID: ' + cartId);\r",
											"    pm.expect(jsonData.cartId).to.exist;\r",
											"    pm.expect(jsonData.cartId).to.be.an('string');\r",
											"    pm.collectionVariables.set('_cartStateOrId', jsonData.cartId);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"name\":\"Postman Cart\",\r\n   \"type\":\"Cart\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{_instanceUrl}}/services/data/v{{apiVersion}}/commerce/webstores/{{_webStoreId}}/carts",
									"host": [
										"{{_instanceUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"commerce",
										"webstores",
										"{{_webStoreId}}",
										"carts"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Cart By Id (demonstration purposes)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											"\r",
											"// Expected strings in environment variables\r",
											"['apiVersion'].forEach(esiev => {\r",
											"    if(!pm.environment.has(esiev)) {\r",
											"        const msg = 'Expected Postman environment variable not found: ' + esiev;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
											"});\r",
											"\r",
											"// Expected strings in collection variables\r",
											"['_webStoreId', '_productId', '_token', '_cartStateOrId', '_instanceUrl', '_effectiveAccountId'].forEach(esicv => {\r",
											"    if(!pm.collectionVariables.has(esicv)) {\r",
											"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Tests...`);\r",
											"\r",
											"pm.test('Status code is 204 or 404', () => {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([204, 404]);\r",
											"});\r",
											"\r",
											"pm.collectionVariables.set('_cartStateOrId', undefined);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{_instanceUrl}}/services/data/v{{apiVersion}}/commerce/webstores/{{_webStoreId}}/carts/{{_cartStateOrId}}?effectiveAccountId={{_effectiveAccountId}}",
									"host": [
										"{{_instanceUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"commerce",
										"webstores",
										"{{_webStoreId}}",
										"carts",
										"{{_cartStateOrId}}"
									],
									"query": [
										{
											"key": "effectiveAccountId",
											"value": "{{_effectiveAccountId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Cart Item - Draft",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 204 or 404', () => {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([204, 404]);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											"\r",
											"// Expected strings in environment variables\r",
											"['orgHostMySalesforceFormat','apiVersion','productNamesCommaDelimited'].forEach(esiev => {\r",
											"    if(!pm.environment.has(esiev)) {\r",
											"        const msg = 'Expected Postman environment variable not found: ' + esiev;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
											"});\r",
											"\r",
											"// Expected strings in collection variables\r",
											"['_webStoreId', '_productId', '_token', '_instanceUrl', '_cartStateOrId', '_effectiveAccountId', '_cartItemIdForDelete'].forEach(esicv => {\r",
											"    if(!pm.collectionVariables.has(esicv)) {\r",
											"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{_instanceUrl}}/services/data/v{{apiVersion}}/commerce/webstores/{{_webStoreId}}/carts/{{_cartStateOrId}}/cart-items/{{_cartItemIdForRemoval}}?effectiveAccountId={{_effectiveAccountId}}",
									"host": [
										"{{_instanceUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"commerce",
										"webstores",
										"{{_webStoreId}}",
										"carts",
										"{{_cartStateOrId}}",
										"cart-items",
										"{{_cartItemIdForRemoval}}"
									],
									"query": [
										{
											"key": "effectiveAccountId",
											"value": "{{_effectiveAccountId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Item Quantity",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											"\r",
											"// Expected strings in environment variables\r",
											"['orgHostMySalesforceFormat','apiVersion','productNamesCommaDelimited', 'currencyIsoCode'].forEach(esiev => {\r",
											"    if(!pm.environment.has(esiev)) {\r",
											"        const msg = 'Expected Postman environment variable not found: ' + esiev;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
											"});\r",
											"\r",
											"// Expected strings in collection variables\r",
											"['_webStoreId', '_productId', '_token', '_instanceUrl', '_cartStateOrId', '_effectiveAccountId', '_cartItemIdForQuantityUpdate'].forEach(esicv => {\r",
											"    if(!pm.collectionVariables.has(esicv)) {\r",
											"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"console.warn(pm.response.status);\r",
											"\r",
											"pm.test('Response is valid and has a JSON body', () => {\r",
											"     pm.response.to.be.withBody;\r",
											"     pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test('Validate the response and save collection variables', () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    \r",
											"    console.warn(jsonData);\r",
											"\r",
											"    //pm.expect(jsonData.cartItem).to.exist;\r",
											"    /*\r",
											"    pm.expect(jsonData.cartItem).to.be.an('object').with.property('cartItemId').that.is.an('string');\r",
											"    pm.expect(jsonData.cartItem).to.be.an('object').with.property('cartId').that.is.an('string');\r",
											"    pm.expect(jsonData.cartItem).to.be.an('object').with.property('quantity').that.is.an('number');\r",
											"    pm.expect(jsonData.cartItem).equals(5);\r",
											"    pm.expect(jsonData.type).equals('Product');\r",
											"    */\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_token}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"quantity\": \"5\"\r\n}"
								},
								"url": {
									"raw": "{{_instanceUrl}}/services/data/v{{apiVersion}}/commerce/webstores/{{_webStoreId}}/carts/{{_cartStateOrId}}/cart-items/{{_cartItemIdForQuantityUpdate}}?effectiveAccountId={{_effectiveAccountId}}&currencyIsoCode={{currencyIsoCode}}",
									"host": [
										"{{_instanceUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"commerce",
										"webstores",
										"{{_webStoreId}}",
										"carts",
										"{{_cartStateOrId}}",
										"cart-items",
										"{{_cartItemIdForQuantityUpdate}}"
									],
									"query": [
										{
											"key": "effectiveAccountId",
											"value": "{{_effectiveAccountId}}"
										},
										{
											"key": "currencyIsoCode",
											"value": "{{currencyIsoCode}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Cart Items",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', () => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Response is valid and has a JSON body', () => {\r",
											"     pm.response.to.be.success;\r",
											"     pm.response.to.be.withBody;\r",
											"     pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test('Validate the response and save collection variables', () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.cartItems).to.exist;\r",
											"    pm.expect(jsonData.cartItems).to.be.an('array').with.length.greaterThan(0);\r",
											"    \r",
											"    const firstCartItem = jsonData.cartItems[0].cartItem;\r",
											"    pm.expect(firstCartItem).to.be.an('object').with.property('cartItemId').that.is.an('string');\r",
											"    \r",
											"    const secondCartItem = jsonData.cartItems[1].cartItem;\r",
											"    pm.expect(secondCartItem).to.be.an('object').with.property('cartItemId').that.is.an('string');\r",
											"    \r",
											"    pm.expect(firstCartItem.cartId).equals(secondCartItem.cartId);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											"\r",
											"// Expected strings in environment variables\r",
											"['orgHostMySalesforceFormat','apiVersion','productNamesCommaDelimited'].forEach(esiev => {\r",
											"    if(!pm.environment.has(esiev)) {\r",
											"        const msg = 'Expected Postman environment variable not found: ' + esiev;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
											"});\r",
											"\r",
											"// Expected strings in collection variables\r",
											"['_webStoreId', '_productId', '_token', '_instanceUrl', '_cartStateOrId', '_effectiveAccountId'].forEach(esicv => {\r",
											"    if(!pm.collectionVariables.has(esicv)) {\r",
											"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{_instanceUrl}}/services/data/v{{apiVersion}}/commerce/webstores/{{_webStoreId}}/carts/{{_cartStateOrId}}/cart-items?effectiveAccountId={{_effectiveAccountId}}",
									"host": [
										"{{_instanceUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"commerce",
										"webstores",
										"{{_webStoreId}}",
										"carts",
										"{{_cartStateOrId}}",
										"cart-items"
									],
									"query": [
										{
											"key": "effectiveAccountId",
											"value": "{{_effectiveAccountId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create a Cart",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"let cartId = jsonData.cartId;",
											"pm.collectionVariables.set('_cartStateOrId', cartId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"name\":\"My Cart\",\n   \"type\":\"Cart\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{_instanceUrl}}/services/data/v{{apiVersion}}/commerce/webstores/{{_webStoreId}}/carts",
									"host": [
										"{{_instanceUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"commerce",
										"webstores",
										"{{_webStoreId}}",
										"carts"
									]
								},
								"description": "Creates a Cart and sets the variable __cartId_."
							},
							"response": []
						},
						{
							"name": "Create a Primary Cart",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"let cartId = jsonData.cartId;",
											"pm.collectionVariables.set('_cartStateOrId', cartId);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"name\":\"My Primary Cart\",\n   \"type\":\"Cart\",\n   \"isSecondary\":false\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{_instanceUrl}}/services/data/v{{apiVersion}}/commerce/webstores/{{_webStoreId}}/carts",
									"host": [
										"{{_instanceUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"commerce",
										"webstores",
										"{{_webStoreId}}",
										"carts"
									]
								},
								"description": "Creates a Cart and sets the variable __cartId_."
							},
							"response": []
						},
						{
							"name": "Get Carts by Effective Account Id",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Pre-request Script...`);\r",
											"console.log('Collection variables before:\\r\\n'.concat(pm.collectionVariables.values.map((v) =>  v.key + ': ' + v.value).sort().join('\\r\\n')));\r",
											"\r",
											"pm.collectionVariables.set('_cartStateOrId', 'active');\r",
											"\r",
											"// Expected strings in environment variables\r",
											"['orgHostMySalesforceFormat','apiVersion'].forEach(esiev => {\r",
											"    if(!pm.environment.has(esiev)) {\r",
											"        const msg = 'Expected Postman environment variable not found: ' + esiev;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.environment.get(esiev)).to.exist;\r",
											"    pm.expect(pm.environment.get(esiev)).to.be.an('string');\r",
											"});\r",
											"\r",
											"// Expected strings in collection variables\r",
											"['_instanceUrl', '_webStoreId', '_productId', '_token', '_effectiveAccountId', '_cartStateOrId'].forEach(esicv => {\r",
											"    if(!pm.collectionVariables.has(esicv)) {\r",
											"        const msg = 'Expected Postman collection variable not found: ' + esicv;\r",
											"        pm.expect.fail(msg);\r",
											"    }\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.exist;\r",
											"    pm.expect(pm.collectionVariables.get(esicv)).to.be.an('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"console.log(`${pm.info.requestName} Tests...`);\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test('Response is valid and has a JSON body', () => {\r",
											"    pm.response.to.be.success;\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test('Validate the response contains a cart Id and set the collection variables', () => {\r",
											"    const jsonData = pm.response.json();\r",
											"    console.warn(jsonData);\r",
											"    pm.expect(jsonData.cartId).to.exist;\r",
											"    pm.expect(jsonData.cartId).to.be.an('string');\r",
											"    pm.collectionVariables.set('_cartStateOrId', jsonData.cartId);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"name\":\"My Cart\",\r\n   \"type\":\"Cart\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{_instanceUrl}}/services/data/v{{apiVersion}}/commerce/webstores/{{_webStoreId}}/carts",
									"host": [
										"{{_instanceUrl}}"
									],
									"path": [
										"services",
										"data",
										"v{{apiVersion}}",
										"commerce",
										"webstores",
										"{{_webStoreId}}",
										"carts"
									]
								}
							},
							"response": []
						}
					],
					"description": "These bricks are meant to be used for Buyer Login Scenarios. You can expand on these as needed to build out your request chains. This is where you can do things like:\n\n- Log in as a Buyer\n- Search for Products\n- Get Product Pricing\n- Interact with Carts and Cart Items\n    \n\nIt's not a perfect world, but each brick checks for a set of expected collection values needed to make the request so you can chain them together with minimal debugging required."
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "_token",
			"value": ""
		},
		{
			"key": "_instanceUrl",
			"value": ""
		},
		{
			"key": "_userId",
			"value": ""
		},
		{
			"key": "_orgId",
			"value": ""
		},
		{
			"key": "_webStoreId",
			"value": ""
		},
		{
			"key": "_effectiveAccountId",
			"value": ""
		},
		{
			"key": "_productNames",
			"value": ""
		},
		{
			"key": "_productIds",
			"value": ""
		},
		{
			"key": "_productId",
			"value": ""
		},
		{
			"key": "_productIdsJoined",
			"value": ""
		}
	]
}